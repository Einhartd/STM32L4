
timers_and_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080054a8  080054a8  000154a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f0  080056f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08005768  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005768  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab98  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001798  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f6f  00000000  00000000  0002d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7bb  00000000  00000000  00053947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed2a4  00000000  00000000  0005f102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000352c  00000000  00000000  0014c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800548c 	.word	0x0800548c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800548c 	.word	0x0800548c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

volatile int16_t enc_val = 0;

//	Interrupt from basic timer (timer 6 and 7)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	// timer 6 is set up to change LED level once per 2s.
	if(htim==&htim6){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d105      	bne.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b74:	2120      	movs	r1, #32
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fff5 	bl	8001b68 <HAL_GPIO_TogglePin>
	}
	//	timer 7 is set up to change LED level once per 50ms.
	else if (htim==&htim7){
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	}
}
 8000b7e:	e008      	b.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if (htim==&htim7){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d104      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 ffeb 	bl	8001b68 <HAL_GPIO_TogglePin>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000124 	.word	0x20000124
 8000ba0:	20000170 	.word	0x20000170
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <calc_pwm>:


//	Function which calculates pwm levels for color red and blue in RGB LED
float calc_pwm(float value){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	ed87 0a01 	vstr	s0, [r7, #4]
	const float k = 0.13;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <calc_pwm+0x80>)
 8000bb4:	60fb      	str	r3, [r7, #12]
	const float x0 = 70.0;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <calc_pwm+0x84>)
 8000bb8:	60bb      	str	r3, [r7, #8]
	return 10000.0 / (1.0 + exp(-k * (value - x0)));
 8000bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bbe:	eeb1 7a67 	vneg.f32	s14, s15
 8000bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd2:	ee17 0a90 	vmov	r0, s15
 8000bd6:	f7ff fc5b 	bl	8000490 <__aeabi_f2d>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	ec43 2b10 	vmov	d0, r2, r3
 8000be2:	f003 fa59 	bl	8004098 <exp>
 8000be6:	ec51 0b10 	vmov	r0, r1, d0
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <calc_pwm+0x88>)
 8000bf0:	f7ff faf0 	bl	80001d4 <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	a109      	add	r1, pc, #36	; (adr r1, 8000c20 <calc_pwm+0x78>)
 8000bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bfe:	f7ff fdc9 	bl	8000794 <__aeabi_ddiv>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4610      	mov	r0, r2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f7ff ff5b 	bl	8000ac4 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	ee07 3a90 	vmov	s15, r3
}
 8000c14:	eeb0 0a67 	vmov.f32	s0, s15
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	00000000 	.word	0x00000000
 8000c24:	40c38800 	.word	0x40c38800
 8000c28:	3e051eb8 	.word	0x3e051eb8
 8000c2c:	428c0000 	.word	0x428c0000
 8000c30:	3ff00000 	.word	0x3ff00000

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f000 fc28 	bl	800148e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f8c3 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f000 fa59 	bl	80010f8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000c46:	f000 f9e7 	bl	8001018 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c4a:	f000 fa1d 	bl	8001088 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000c4e:	f000 f961 	bl	8000f14 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000c52:	f000 f90b 	bl	8000e6c <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //	SETTING UP TIMERS (ACTIVATING THEM)
  HAL_TIM_Base_Start_IT(&htim6);
 8000c56:	4854      	ldr	r0, [pc, #336]	; (8000da8 <main+0x174>)
 8000c58:	f001 fe8c 	bl	8002974 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000c5c:	4853      	ldr	r0, [pc, #332]	; (8000dac <main+0x178>)
 8000c5e:	f001 fe89 	bl	8002974 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000c62:	4853      	ldr	r0, [pc, #332]	; (8000db0 <main+0x17c>)
 8000c64:	f001 fe1e 	bl	80028a4 <HAL_TIM_Base_Start>

  //	SETTING UP ENCODER
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	4852      	ldr	r0, [pc, #328]	; (8000db4 <main+0x180>)
 8000c6c:	f002 f900 	bl	8002e70 <HAL_TIM_Encoder_Start>

  //	Activating PWM channels for timer 3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c70:	2100      	movs	r1, #0
 8000c72:	484f      	ldr	r0, [pc, #316]	; (8000db0 <main+0x17c>)
 8000c74:	f001 ff50 	bl	8002b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c78:	2104      	movs	r1, #4
 8000c7a:	484d      	ldr	r0, [pc, #308]	; (8000db0 <main+0x17c>)
 8000c7c:	f001 ff4c 	bl	8002b18 <HAL_TIM_PWM_Start>

  float counter = 0.0;
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]


  while (1)
  {
	  //	Getting new value from encoder to change frequency of sinus
	  enc_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000c86:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <main+0x180>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <main+0x184>)
 8000c90:	801a      	strh	r2, [r3, #0]


	  //	Creating sinus wave which changes pwm level
	  float r = 50 * (1.0f + sin((float)enc_val*(counter / 100.0f)));
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <main+0x184>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ca4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8000dbc <main+0x188>
 8000ca8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f7ff fbec 	bl	8000490 <__aeabi_f2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	ec43 2b10 	vmov	d0, r2, r3
 8000cc0:	f003 f992 	bl	8003fe8 <sin>
 8000cc4:	ec51 0b10 	vmov	r0, r1, d0
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <main+0x18c>)
 8000cce:	f7ff fa81 	bl	80001d4 <__adddf3>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <main+0x190>)
 8000ce0:	f7ff fc2e 	bl	8000540 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff feea 	bl	8000ac4 <__aeabi_d2f>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60bb      	str	r3, [r7, #8]
	  float b = 50 * (1.0f + sin((float)enc_val*(2.0f * counter / 100.0f)));
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x184>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d02:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000d0a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8000dbc <main+0x188>
 8000d0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d16:	ee17 0a90 	vmov	r0, s15
 8000d1a:	f7ff fbb9 	bl	8000490 <__aeabi_f2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	ec43 2b10 	vmov	d0, r2, r3
 8000d26:	f003 f95f 	bl	8003fe8 <sin>
 8000d2a:	ec51 0b10 	vmov	r0, r1, d0
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <main+0x18c>)
 8000d34:	f7ff fa4e 	bl	80001d4 <__adddf3>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <main+0x190>)
 8000d46:	f7ff fbfb 	bl	8000540 <__aeabi_dmul>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff feb7 	bl	8000ac4 <__aeabi_d2f>
 8000d56:	4603      	mov	r3, r0
 8000d58:	607b      	str	r3, [r7, #4]

	  //	Changing PWM level in timer
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(r));
 8000d5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d5e:	f7ff ff23 	bl	8000ba8 <calc_pwm>
 8000d62:	eef0 7a40 	vmov.f32	s15, s0
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <main+0x17c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d6e:	ee17 2a90 	vmov	r2, s15
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(b));
 8000d74:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d78:	f7ff ff16 	bl	8000ba8 <calc_pwm>
 8000d7c:	eef0 7a40 	vmov.f32	s15, s0
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <main+0x17c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d88:	ee17 2a90 	vmov	r2, s15
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_Delay(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fbf2 	bl	8001578 <HAL_Delay>
	  counter++;
 8000d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000da0:	edc7 7a03 	vstr	s15, [r7, #12]
  {
 8000da4:	e76f      	b.n	8000c86 <main+0x52>
 8000da6:	bf00      	nop
 8000da8:	20000124 	.word	0x20000124
 8000dac:	20000170 	.word	0x20000170
 8000db0:	200000d8 	.word	0x200000d8
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	200001bc 	.word	0x200001bc
 8000dbc:	42c80000 	.word	0x42c80000
 8000dc0:	3ff00000 	.word	0x3ff00000
 8000dc4:	40490000 	.word	0x40490000

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b096      	sub	sp, #88	; 0x58
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	2244      	movs	r2, #68	; 0x44
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 f8fe 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dee:	f000 fee3 	bl	8001bb8 <HAL_PWREx_ControlVoltageScaling>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000df8:	f000 f9bc 	bl	8001174 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e08:	2360      	movs	r3, #96	; 0x60
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e10:	2301      	movs	r3, #1
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e18:	2328      	movs	r3, #40	; 0x28
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 ff19 	bl	8001c64 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e38:	f000 f99c 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2303      	movs	r3, #3
 8000e42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fae1 	bl	800241c <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e60:	f000 f988 	bl	8001174 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3758      	adds	r7, #88	; 0x58
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f8ac 	bl	8003fd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000ede:	f001 ff21 	bl	8002d24 <HAL_TIM_Encoder_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ee8:	f000 f944 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM2_Init+0xa4>)
 8000efa:	f002 ff9d 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f04:	f000 f936 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000008c 	.word	0x2000008c

08000f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f48:	4a32      	ldr	r2, [pc, #200]	; (8001014 <MX_TIM3_Init+0x100>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f4e:	224f      	movs	r2, #79	; 0x4f
 8000f50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f6e:	f001 fc41 	bl	80027f4 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f78:	f000 f8fc 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4821      	ldr	r0, [pc, #132]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f8a:	f002 fa33 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f94:	f000 f8ee 	bl	8001174 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000f9a:	f001 fd5b 	bl	8002a54 <HAL_TIM_PWM_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fa4:	f000 f8e6 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4816      	ldr	r0, [pc, #88]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000fb8:	f002 ff3e 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fc2:	f000 f8d7 	bl	8001174 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc6:	2360      	movs	r3, #96	; 0x60
 8000fc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000fde:	f002 f8f5 	bl	80031cc <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fe8:	f000 f8c4 	bl	8001174 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM3_Init+0xfc>)
 8000ff4:	f002 f8ea 	bl	80031cc <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ffe:	f000 f8b9 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM3_Init+0xfc>)
 8001004:	f000 f976 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000d8 	.word	0x200000d8
 8001014:	40000400 	.word	0x40000400

08001018 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM6_Init+0x68>)
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_TIM6_Init+0x6c>)
 800102c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_TIM6_Init+0x68>)
 8001030:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001034:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_TIM6_Init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_TIM6_Init+0x68>)
 800103e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001042:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_TIM6_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM6_Init+0x68>)
 800104c:	f001 fbd2 	bl	80027f4 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001056:	f000 f88d 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM6_Init+0x68>)
 8001068:	f002 fee6 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001072:	f000 f87f 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000124 	.word	0x20000124
 8001084:	40001000 	.word	0x40001000

08001088 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM7_Init+0x68>)
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_TIM7_Init+0x6c>)
 800109c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010ae:	f240 12f3 	movw	r2, #499	; 0x1f3
 80010b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010bc:	f001 fb9a 	bl	80027f4 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010c6:	f000 f855 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM7_Init+0x68>)
 80010d8:	f002 feae 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010e2:	f000 f847 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000170 	.word	0x20000170
 80010f4:	40001400 	.word	0x40001400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_GPIO_Init+0x78>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <MX_GPIO_Init+0x78>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_GPIO_Init+0x78>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_GPIO_Init+0x78>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <MX_GPIO_Init+0x78>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_GPIO_Init+0x78>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2160      	movs	r1, #96	; 0x60
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f000 fcf7 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800114a:	2360      	movs	r3, #96	; 0x60
 800114c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f000 fb3e 	bl	80017e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_MspInit+0x44>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_MspInit+0x44>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6613      	str	r3, [r2, #96]	; 0x60
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_MspInit+0x44>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x44>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x44>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6593      	str	r3, [r2, #88]	; 0x58
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d128      	bne.n	800123c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800121a:	2303      	movs	r3, #3
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800122a:	2301      	movs	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 fad4 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10c      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6593      	str	r3, [r2, #88]	; 0x58
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001272:	e032      	b.n	80012da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_TIM_Base_MspInit+0xa4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d114      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	210a      	movs	r1, #10
 800129a:	2036      	movs	r0, #54	; 0x36
 800129c:	f000 fa6b 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a0:	2036      	movs	r0, #54	; 0x36
 80012a2:	f000 fa84 	bl	80017ae <HAL_NVIC_EnableIRQ>
}
 80012a6:	e018      	b.n	80012da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_TIM_Base_MspInit+0xa8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d113      	bne.n	80012da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_TIM_Base_MspInit+0xa0>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 11, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210b      	movs	r1, #11
 80012ce:	2037      	movs	r0, #55	; 0x37
 80012d0:	f000 fa51 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012d4:	2037      	movs	r0, #55	; 0x37
 80012d6:	f000 fa6a 	bl	80017ae <HAL_NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40001000 	.word	0x40001000
 80012f0:	40001400 	.word	0x40001400

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_TIM_MspPostInit+0x9c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d138      	bne.n	8001388 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_MspPostInit+0xa0>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001356:	2302      	movs	r3, #2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f000 fa3e 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001368:	2340      	movs	r3, #64	; 0x40
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001378:	2302      	movs	r3, #2
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_TIM_MspPostInit+0xa4>)
 8001384:	f000 fa2e 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000800 	.word	0x48000800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f8a6 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM6_DAC_IRQHandler+0x10>)
 80013f6:	f001 fdc9 	bl	8002f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000124 	.word	0x20000124

08001404 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM7_IRQHandler+0x10>)
 800140a:	f001 fdbf 	bl	8002f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000170 	.word	0x20000170

08001418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff ffea 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f002 fd91 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff fbe1 	bl	8000c34 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001480:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8001484:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001488:	200001c4 	.word	0x200001c4

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>

0800148e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f961 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 f80e 	bl	80014c0 <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e001      	b.n	80014b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b0:	f7ff fe66 	bl	8001180 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_InitTick+0x6c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_InitTick+0x70>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_InitTick+0x6c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f96d 	bl	80017ca <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d809      	bhi.n	8001510 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f937 	bl	8001776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_InitTick+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e007      	b.n	8001520 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e004      	b.n	8001520 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e001      	b.n	8001520 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	200001c0 	.word	0x200001c0

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200001c0 	.word	0x200001c0

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e17f      	b.n	8001af4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8171 	beq.w	8001aee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d005      	beq.n	8001824 <HAL_GPIO_Init+0x40>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d130      	bne.n	8001886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185a:	2201      	movs	r2, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 0201 	and.w	r2, r3, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d118      	bne.n	80018c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d017      	beq.n	8001900 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d123      	bne.n	8001954 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	6939      	ldr	r1, [r7, #16]
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80ac 	beq.w	8001aee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <HAL_GPIO_Init+0x330>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a5e      	ldr	r2, [pc, #376]	; (8001b14 <HAL_GPIO_Init+0x330>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <HAL_GPIO_Init+0x330>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ae:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <HAL_GPIO_Init+0x334>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d8:	d025      	beq.n	8001a26 <HAL_GPIO_Init+0x242>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x338>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01f      	beq.n	8001a22 <HAL_GPIO_Init+0x23e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_GPIO_Init+0x33c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d019      	beq.n	8001a1e <HAL_GPIO_Init+0x23a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x340>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0x236>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_GPIO_Init+0x344>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00d      	beq.n	8001a16 <HAL_GPIO_Init+0x232>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_GPIO_Init+0x348>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x22e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <HAL_GPIO_Init+0x34c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_GPIO_Init+0x22a>
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x244>
 8001a26:	2300      	movs	r3, #0
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a38:	4937      	ldr	r1, [pc, #220]	; (8001b18 <HAL_GPIO_Init+0x334>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_GPIO_Init+0x350>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f47f ae78 	bne.w	80017f4 <HAL_GPIO_Init+0x10>
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	48000400 	.word	0x48000400
 8001b20:	48000800 	.word	0x48000800
 8001b24:	48000c00 	.word	0x48000c00
 8001b28:	48001000 	.word	0x48001000
 8001b2c:	48001400 	.word	0x48001400
 8001b30:	48001800 	.word	0x48001800
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43d9      	mvns	r1, r3
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	400b      	ands	r3, r1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc6:	d130      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd4:	d038      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2232      	movs	r2, #50	; 0x32
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfc:	e002      	b.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c10:	d102      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f2      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c24:	d110      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e00f      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d007      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e3ca      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80e4 	beq.w	8001e60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_RCC_OscConfig+0x4a>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	f040 808b 	bne.w	8001dbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f040 8087 	bne.w	8001dbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e3a2      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x7c>
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cde:	e005      	b.n	8001cec <HAL_RCC_OscConfig+0x88>
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d223      	bcs.n	8001d38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fd1d 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e383      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	496d      	ldr	r1, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4968      	ldr	r1, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
 8001d36:	e025      	b.n	8001d84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4960      	ldr	r1, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	495b      	ldr	r1, [pc, #364]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fcdd 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e343      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d84:	f000 fc4a 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	4950      	ldr	r1, [pc, #320]	; (8001ed8 <HAL_RCC_OscConfig+0x274>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_RCC_OscConfig+0x278>)
 8001da2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb89 	bl	80014c0 <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d052      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	e327      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d032      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fbc6 	bl	8001560 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fbc2 	bl	8001560 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e310      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4931      	ldr	r1, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	492c      	ldr	r1, [pc, #176]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e01a      	b.n	8001e60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fb93 	bl	8001560 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fb8f 	bl	8001560 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2dd      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x1da>
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d074      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x21a>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d10e      	bne.n	8001e96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d064      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d160      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e2ba      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x24a>
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e026      	b.n	8001efc <HAL_RCC_OscConfig+0x298>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb6:	d115      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x280>
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a02      	ldr	r2, [pc, #8]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x298>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	080054a8 	.word	0x080054a8
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	4ba0      	ldr	r3, [pc, #640]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a9f      	ldr	r2, [pc, #636]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b9d      	ldr	r3, [pc, #628]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a9c      	ldr	r2, [pc, #624]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb2c 	bl	8001560 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fb28 	bl	8001560 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e276      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4b92      	ldr	r3, [pc, #584]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2a8>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fb18 	bl	8001560 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fb14 	bl	8001560 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e262      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f46:	4b88      	ldr	r3, [pc, #544]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d0>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d060      	beq.n	8002024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x310>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d116      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	4b7c      	ldr	r3, [pc, #496]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x328>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e23f      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b76      	ldr	r3, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4973      	ldr	r1, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	e040      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d023      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fad3 	bl	8001560 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff facf 	bl	8001560 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e21d      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	495f      	ldr	r1, [pc, #380]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e018      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff faaf 	bl	8001560 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff faab 	bl	8001560 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1f9      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03c      	beq.n	80020aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01c      	beq.n	8002072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002038:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fa8a 	bl	8001560 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fa86 	bl	8001560 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1d4      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ef      	beq.n	8002050 <HAL_RCC_OscConfig+0x3ec>
 8002070:	e01b      	b.n	80020aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002072:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff fa6d 	bl	8001560 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff fa69 	bl	8001560 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1b7      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ef      	bne.n	800208a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80a6 	beq.w	8002204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x508>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x508>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x508>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7ff fa30 	bl	8001560 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7ff fa2c 	bl	8001560 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e17a      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x508>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x4d8>
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213a:	e029      	b.n	8002190 <HAL_RCC_OscConfig+0x52c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d115      	bne.n	8002170 <HAL_RCC_OscConfig+0x50c>
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_RCC_OscConfig+0x504>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x52c>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	4b9c      	ldr	r3, [pc, #624]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a9b      	ldr	r2, [pc, #620]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002180:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a97      	ldr	r2, [pc, #604]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d016      	beq.n	80021c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff f9e2 	bl	8001560 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff f9de 	bl	8001560 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e12a      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b6:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ed      	beq.n	80021a0 <HAL_RCC_OscConfig+0x53c>
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7ff f9cb 	bl	8001560 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff f9c7 	bl	8001560 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e113      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b7f      	ldr	r3, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ed      	bne.n	80021ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80fe 	beq.w	800240a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	2b02      	cmp	r3, #2
 8002214:	f040 80d0 	bne.w	80023b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002218:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	429a      	cmp	r2, r3
 800222a:	d130      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	3b01      	subs	r3, #1
 8002238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d127      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d11f      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002258:	2a07      	cmp	r2, #7
 800225a:	bf14      	ite	ne
 800225c:	2201      	movne	r2, #1
 800225e:	2200      	moveq	r2, #0
 8002260:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	4293      	cmp	r3, r2
 8002264:	d113      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d06e      	beq.n	800236c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d069      	beq.n	8002368 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0ad      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022bc:	f7ff f950 	bl	8001560 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f94c 	bl	8001560 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e09a      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x784>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002304:	0852      	lsrs	r2, r2, #1
 8002306:	3a01      	subs	r2, #1
 8002308:	0552      	lsls	r2, r2, #21
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002310:	0852      	lsrs	r2, r2, #1
 8002312:	3a01      	subs	r2, #1
 8002314:	0652      	lsls	r2, r2, #25
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800231c:	0912      	lsrs	r2, r2, #4
 800231e:	0452      	lsls	r2, r2, #17
 8002320:	430a      	orrs	r2, r1
 8002322:	4930      	ldr	r1, [pc, #192]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002340:	f7ff f90e 	bl	8001560 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff f90a 	bl	8001560 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e058      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002366:	e050      	b.n	800240a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e04f      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d148      	bne.n	800240a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002390:	f7ff f8e6 	bl	8001560 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f8e2 	bl	8001560 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e030      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x734>
 80023b6:	e028      	b.n	800240a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d023      	beq.n	8002406 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <HAL_RCC_OscConfig+0x780>)
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff f8c9 	bl	8001560 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	e00c      	b.n	80023ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff f8c5 	bl	8001560 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d905      	bls.n	80023ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_RCC_OscConfig+0x7b0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ec      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x7b0>)
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	4905      	ldr	r1, [pc, #20]	; (8002414 <HAL_RCC_OscConfig+0x7b0>)
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_OscConfig+0x7b4>)
 8002400:	4013      	ands	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
 8002404:	e001      	b.n	800240a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	feeefffc 	.word	0xfeeefffc

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0e7      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b75      	ldr	r3, [pc, #468]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4970      	ldr	r1, [pc, #448]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b6e      	ldr	r3, [pc, #440]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cf      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002478:	429a      	cmp	r2, r3
 800247a:	d908      	bls.n	800248e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4960      	ldr	r1, [pc, #384]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d04c      	beq.n	8002534 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0a6      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e09a      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d2:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e08e      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e086      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4943      	ldr	r1, [pc, #268]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7ff f82c 	bl	8001560 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7ff f828 	bl	8001560 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e06e      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254c:	429a      	cmp	r2, r3
 800254e:	d208      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	492b      	ldr	r1, [pc, #172]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d210      	bcs.n	8002592 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 0207 	bic.w	r2, r3, #7
 8002578:	4923      	ldr	r1, [pc, #140]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_ClockConfig+0x1ec>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e036      	b.n	8002600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4918      	ldr	r1, [pc, #96]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4910      	ldr	r1, [pc, #64]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d0:	f000 f824 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	490b      	ldr	r1, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1f4>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1fc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe ff63 	bl	80014c0 <HAL_InitTick>
 80025fa:	4603      	mov	r3, r0
 80025fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	080054a8 	.word	0x080054a8
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x34>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d121      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d11e      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800265c:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 800265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e005      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002678:	4a2b      	ldr	r2, [pc, #172]	; (8002728 <HAL_RCC_GetSysClockFreq+0x10c>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d102      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_GetSysClockFreq+0x110>)
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e004      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_RCC_GetSysClockFreq+0x114>)
 80026a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d134      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d003      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0xac>
 80026c0:	e005      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_RCC_GetSysClockFreq+0x110>)
 80026c4:	617b      	str	r3, [r7, #20]
      break;
 80026c6:	e005      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ca:	617b      	str	r3, [r7, #20]
      break;
 80026cc:	e002      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	617b      	str	r3, [r7, #20]
      break;
 80026d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	3301      	adds	r3, #1
 80026e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	fb03 f202 	mul.w	r2, r3, r2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	0e5b      	lsrs	r3, r3, #25
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	3301      	adds	r3, #1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002714:	69bb      	ldr	r3, [r7, #24]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	080054b8 	.word	0x080054b8
 800272c:	00f42400 	.word	0x00f42400
 8002730:	007a1200 	.word	0x007a1200

08002734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800274c:	f7ff fa26 	bl	8001b9c <HAL_PWREx_GetVoltageRange>
 8002750:	6178      	str	r0, [r7, #20]
 8002752:	e014      	b.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a24      	ldr	r2, [pc, #144]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800276c:	f7ff fa16 	bl	8001b9c <HAL_PWREx_GetVoltageRange>
 8002770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002784:	d10b      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d919      	bls.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2ba0      	cmp	r3, #160	; 0xa0
 8002790:	d902      	bls.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002792:	2302      	movs	r3, #2
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	e013      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002798:	2301      	movs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	e010      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b80      	cmp	r3, #128	; 0x80
 80027a2:	d902      	bls.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027a4:	2303      	movs	r3, #3
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	e00a      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d102      	bne.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b0:	2302      	movs	r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	e004      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b70      	cmp	r3, #112	; 0x70
 80027ba:	d101      	bne.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027bc:	2301      	movs	r3, #1
 80027be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 0207 	bic.w	r2, r3, #7
 80027c8:	4909      	ldr	r1, [pc, #36]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d001      	beq.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e049      	b.n	800289a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fd14 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fed0 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d001      	beq.n	80028bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e047      	b.n	800294c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_TIM_Base_Start+0xb4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01d      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d6:	d018      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_TIM_Base_Start+0xb8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_TIM_Base_Start+0xbc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_TIM_Base_Start+0xc0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_TIM_Base_Start+0xc4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_TIM_Base_Start+0x66>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_TIM_Base_Start+0xc8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d115      	bne.n	8002936 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_TIM_Base_Start+0xcc>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d015      	beq.n	8002948 <HAL_TIM_Base_Start+0xa4>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002922:	d011      	beq.n	8002948 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	e008      	b.n	8002948 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e000      	b.n	800294a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40013400 	.word	0x40013400
 800296c:	40014000 	.word	0x40014000
 8002970:	00010007 	.word	0x00010007

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e04f      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d018      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d115      	bne.n	8002a16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d015      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d011      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e008      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40013400 	.word	0x40013400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	00010007 	.word	0x00010007

08002a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e049      	b.n	8002afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f841 	bl	8002b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 fda0 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x24>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e03c      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x9e>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d109      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x3e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e02f      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x9e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start+0x58>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e022      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x9e>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d109      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x72>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e015      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x9e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d109      	bne.n	8002ba4 <HAL_TIM_PWM_Start+0x8c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e008      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e09c      	b.n	8002cf8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_PWM_Start+0xb6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	e023      	b.n	8002c16 <HAL_TIM_PWM_Start+0xfe>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Start+0xc6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bdc:	e01b      	b.n	8002c16 <HAL_TIM_PWM_Start+0xfe>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_PWM_Start+0xd6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bec:	e013      	b.n	8002c16 <HAL_TIM_PWM_Start+0xfe>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xe6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bfc:	e00b      	b.n	8002c16 <HAL_TIM_PWM_Start+0xfe>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0xf6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c0c:	e003      	b.n	8002c16 <HAL_TIM_PWM_Start+0xfe>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f8e4 	bl	8003dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a35      	ldr	r2, [pc, #212]	; (8002d00 <HAL_TIM_PWM_Start+0x1e8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x13e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <HAL_TIM_PWM_Start+0x1ec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x13e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a32      	ldr	r2, [pc, #200]	; (8002d08 <HAL_TIM_PWM_Start+0x1f0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x13e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a31      	ldr	r2, [pc, #196]	; (8002d0c <HAL_TIM_PWM_Start+0x1f4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x13e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <HAL_TIM_PWM_Start+0x1f8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x142>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_PWM_Start+0x144>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_TIM_PWM_Start+0x1e8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d018      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_TIM_PWM_Start+0x1fc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_TIM_PWM_Start+0x200>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_TIM_PWM_Start+0x204>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_TIM_PWM_Start+0x1ec>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x19e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_TIM_PWM_Start+0x1f0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d115      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_TIM_PWM_Start+0x208>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b06      	cmp	r3, #6
 8002cc6:	d015      	beq.n	8002cf4 <HAL_TIM_PWM_Start+0x1dc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d011      	beq.n	8002cf4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	e008      	b.n	8002cf4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e000      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	00010007 	.word	0x00010007

08002d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e097      	b.n	8002e68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fe fa3b 	bl	80011c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002d68:	f023 0307 	bic.w	r3, r3, #7
 8002d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f000 fc2d 	bl	80035d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	4313      	orrs	r3, r2
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dc4:	f023 030c 	bic.w	r3, r3, #12
 8002dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	4313      	orrs	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	011a      	lsls	r2, r3, #4
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	4313      	orrs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4313      	orrs	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d110      	bne.n	8002ec2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ea6:	7b7b      	ldrb	r3, [r7, #13]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d001      	beq.n	8002eb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e069      	b.n	8002f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	e031      	b.n	8002f26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d110      	bne.n	8002eea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d102      	bne.n	8002ed4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ece:	7b3b      	ldrb	r3, [r7, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d001      	beq.n	8002ed8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e055      	b.n	8002f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee8:	e01d      	b.n	8002f26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ef0:	7bbb      	ldrb	r3, [r7, #14]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ef6:	7b7b      	ldrb	r3, [r7, #13]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002efc:	7b3b      	ldrb	r3, [r7, #12]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03e      	b.n	8002f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_TIM_Encoder_Start+0xc4>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d008      	beq.n	8002f44 <HAL_TIM_Encoder_Start+0xd4>
 8002f32:	e00f      	b.n	8002f54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ff55 	bl	8003dec <TIM_CCxChannelCmd>
      break;
 8002f42:	e016      	b.n	8002f72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 ff4d 	bl	8003dec <TIM_CCxChannelCmd>
      break;
 8002f52:	e00e      	b.n	8002f72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 ff45 	bl	8003dec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	2104      	movs	r1, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ff3e 	bl	8003dec <TIM_CCxChannelCmd>
      break;
 8002f70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0202 	mvn.w	r2, #2
 8002fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fae3 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fad5 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fae6 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0204 	mvn.w	r2, #4
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fab9 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 faab 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fabc 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa8f 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa81 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa92 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2208      	movs	r2, #8
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa65 	bl	800359a <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa57 	bl	8003586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa68 	bl	80035ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fd2a 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 ff10 	bl	8003f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 ff03 	bl	8003f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d10e      	bne.n	8003196 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d107      	bne.n	8003196 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa16 	bl	80035c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d10e      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f06f 0220 	mvn.w	r2, #32
 80031ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fec3 	bl	8003f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0ff      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b14      	cmp	r3, #20
 80031f6:	f200 80f0 	bhi.w	80033da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003255 	.word	0x08003255
 8003204:	080033db 	.word	0x080033db
 8003208:	080033db 	.word	0x080033db
 800320c:	080033db 	.word	0x080033db
 8003210:	08003295 	.word	0x08003295
 8003214:	080033db 	.word	0x080033db
 8003218:	080033db 	.word	0x080033db
 800321c:	080033db 	.word	0x080033db
 8003220:	080032d7 	.word	0x080032d7
 8003224:	080033db 	.word	0x080033db
 8003228:	080033db 	.word	0x080033db
 800322c:	080033db 	.word	0x080033db
 8003230:	08003317 	.word	0x08003317
 8003234:	080033db 	.word	0x080033db
 8003238:	080033db 	.word	0x080033db
 800323c:	080033db 	.word	0x080033db
 8003240:	08003359 	.word	0x08003359
 8003244:	080033db 	.word	0x080033db
 8003248:	080033db 	.word	0x080033db
 800324c:	080033db 	.word	0x080033db
 8003250:	08003399 	.word	0x08003399
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fa56 	bl	800370c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0204 	bic.w	r2, r2, #4
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	619a      	str	r2, [r3, #24]
      break;
 8003292:	e0a5      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fac6 	bl	800382c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6999      	ldr	r1, [r3, #24]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	619a      	str	r2, [r3, #24]
      break;
 80032d4:	e084      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fb2f 	bl	8003940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0208 	orr.w	r2, r2, #8
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
      break;
 8003314:	e064      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fb97 	bl	8003a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	61da      	str	r2, [r3, #28]
      break;
 8003356:	e043      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fbe0 	bl	8003b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003396:	e023      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fc24 	bl	8003bec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033d8:	e002      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
      break;
 80033de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b6      	b.n	800357e <HAL_TIM_ConfigClockSource+0x18a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344c:	d03e      	beq.n	80034cc <HAL_TIM_ConfigClockSource+0xd8>
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003452:	f200 8087 	bhi.w	8003564 <HAL_TIM_ConfigClockSource+0x170>
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	f000 8086 	beq.w	800356a <HAL_TIM_ConfigClockSource+0x176>
 800345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003462:	d87f      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 8003464:	2b70      	cmp	r3, #112	; 0x70
 8003466:	d01a      	beq.n	800349e <HAL_TIM_ConfigClockSource+0xaa>
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d87b      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d050      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x11e>
 8003470:	2b60      	cmp	r3, #96	; 0x60
 8003472:	d877      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 8003474:	2b50      	cmp	r3, #80	; 0x50
 8003476:	d03c      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0xfe>
 8003478:	2b50      	cmp	r3, #80	; 0x50
 800347a:	d873      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d058      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x13e>
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d86f      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d064      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x15e>
 8003488:	2b30      	cmp	r3, #48	; 0x30
 800348a:	d86b      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d060      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x15e>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d867      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05c      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x15e>
 8003498:	2b10      	cmp	r3, #16
 800349a:	d05a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x15e>
 800349c:	e062      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f000 fc7d 	bl	8003dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	609a      	str	r2, [r3, #8]
      break;
 80034ca:	e04f      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f000 fc66 	bl	8003dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ee:	609a      	str	r2, [r3, #8]
      break;
 80034f0:	e03c      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 fbda 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2150      	movs	r1, #80	; 0x50
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fc33 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003510:	e02c      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	461a      	mov	r2, r3
 8003520:	f000 fbf9 	bl	8003d16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2160      	movs	r1, #96	; 0x60
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc23 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003530:	e01c      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	461a      	mov	r2, r3
 8003540:	f000 fbba 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2140      	movs	r1, #64	; 0x40
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc13 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003550:	e00c      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f000 fc0a 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003562:	e003      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      break;
 8003568:	e000      	b.n	800356c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800356a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a40      	ldr	r2, [pc, #256]	; (80036ec <TIM_Base_SetConfig+0x114>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d00f      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <TIM_Base_SetConfig+0x118>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3c      	ldr	r2, [pc, #240]	; (80036f4 <TIM_Base_SetConfig+0x11c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <TIM_Base_SetConfig+0x120>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3a      	ldr	r2, [pc, #232]	; (80036fc <TIM_Base_SetConfig+0x124>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <TIM_Base_SetConfig+0x114>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01f      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003638:	d01b      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <TIM_Base_SetConfig+0x118>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d017      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <TIM_Base_SetConfig+0x11c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2a      	ldr	r2, [pc, #168]	; (80036f8 <TIM_Base_SetConfig+0x120>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00f      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_Base_SetConfig+0x124>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <TIM_Base_SetConfig+0x128>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <TIM_Base_SetConfig+0x12c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a26      	ldr	r2, [pc, #152]	; (8003708 <TIM_Base_SetConfig+0x130>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <TIM_Base_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_Base_SetConfig+0xf8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <TIM_Base_SetConfig+0x124>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0xf8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a11      	ldr	r2, [pc, #68]	; (8003700 <TIM_Base_SetConfig+0x128>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0xf8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a10      	ldr	r2, [pc, #64]	; (8003704 <TIM_Base_SetConfig+0x12c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0xf8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <TIM_Base_SetConfig+0x130>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	615a      	str	r2, [r3, #20]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40013400 	.word	0x40013400
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0302 	bic.w	r3, r3, #2
 8003758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <TIM_OC1_SetConfig+0x10c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_OC1_SetConfig+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2b      	ldr	r2, [pc, #172]	; (800381c <TIM_OC1_SetConfig+0x110>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_OC1_SetConfig+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <TIM_OC1_SetConfig+0x114>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_OC1_SetConfig+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <TIM_OC1_SetConfig+0x118>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC1_SetConfig+0x80>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a28      	ldr	r2, [pc, #160]	; (8003828 <TIM_OC1_SetConfig+0x11c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10c      	bne.n	80037a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0308 	bic.w	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <TIM_OC1_SetConfig+0x10c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00f      	beq.n	80037ce <TIM_OC1_SetConfig+0xc2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <TIM_OC1_SetConfig+0x110>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_OC1_SetConfig+0xc2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <TIM_OC1_SetConfig+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_OC1_SetConfig+0xc2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <TIM_OC1_SetConfig+0x118>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_OC1_SetConfig+0xc2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <TIM_OC1_SetConfig+0x11c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d111      	bne.n	80037f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0210 	bic.w	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0320 	bic.w	r3, r3, #32
 800387a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a28      	ldr	r2, [pc, #160]	; (800392c <TIM_OC2_SetConfig+0x100>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_OC2_SetConfig+0x6c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <TIM_OC2_SetConfig+0x104>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10d      	bne.n	80038b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_OC2_SetConfig+0x100>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_OC2_SetConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <TIM_OC2_SetConfig+0x104>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_OC2_SetConfig+0xb0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <TIM_OC2_SetConfig+0x108>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_OC2_SetConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <TIM_OC2_SetConfig+0x10c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_OC2_SetConfig+0xb0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_OC2_SetConfig+0x110>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d113      	bne.n	8003904 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40013400 	.word	0x40013400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_OC3_SetConfig+0xfc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_OC3_SetConfig+0x6a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_OC3_SetConfig+0x100>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10d      	bne.n	80039c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <TIM_OC3_SetConfig+0xfc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_OC3_SetConfig+0xae>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <TIM_OC3_SetConfig+0x100>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_OC3_SetConfig+0xae>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <TIM_OC3_SetConfig+0x104>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_OC3_SetConfig+0xae>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <TIM_OC3_SetConfig+0x108>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_OC3_SetConfig+0xae>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <TIM_OC3_SetConfig+0x10c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40013400 	.word	0x40013400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <TIM_OC4_SetConfig+0xc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00f      	beq.n	8003ad4 <TIM_OC4_SetConfig+0x84>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <TIM_OC4_SetConfig+0xc4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <TIM_OC4_SetConfig+0x84>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <TIM_OC4_SetConfig+0xc8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_OC4_SetConfig+0x84>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <TIM_OC4_SetConfig+0xcc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_OC4_SetConfig+0x84>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <TIM_OC4_SetConfig+0xd0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d109      	bne.n	8003ae8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	019b      	lsls	r3, r3, #6
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <TIM_OC5_SetConfig+0xb4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00f      	beq.n	8003b9e <TIM_OC5_SetConfig+0x7a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <TIM_OC5_SetConfig+0xb8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_OC5_SetConfig+0x7a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <TIM_OC5_SetConfig+0xbc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_OC5_SetConfig+0x7a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <TIM_OC5_SetConfig+0xc0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_OC5_SetConfig+0x7a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <TIM_OC5_SetConfig+0xc4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d109      	bne.n	8003bb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <TIM_OC6_SetConfig+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <TIM_OC6_SetConfig+0x7c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <TIM_OC6_SetConfig+0xbc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_OC6_SetConfig+0x7c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <TIM_OC6_SetConfig+0xc0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_OC6_SetConfig+0x7c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC6_SetConfig+0xc4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC6_SetConfig+0x7c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <TIM_OC6_SetConfig+0xc8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d109      	bne.n	8003c7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 030a 	bic.w	r3, r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0210 	bic.w	r2, r3, #16
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f043 0307 	orr.w	r3, r3, #7
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2201      	movs	r2, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e068      	b.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01d      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d018      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10c      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40014000 	.word	0x40014000

08003f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <__errno>:
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <__errno+0x8>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4d0d      	ldr	r5, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1b64      	subs	r4, r4, r5
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4d0b      	ldr	r5, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f001 fa72 	bl	800548c <_init>
 8003fa8:	1b64      	subs	r4, r4, r5
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2600      	movs	r6, #0
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	080056f0 	.word	0x080056f0
 8003fcc:	080056f0 	.word	0x080056f0
 8003fd0:	080056f0 	.word	0x080056f0
 8003fd4:	080056f4 	.word	0x080056f4

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <sin>:
 8003fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fea:	ec53 2b10 	vmov	r2, r3, d0
 8003fee:	4828      	ldr	r0, [pc, #160]	; (8004090 <sin+0xa8>)
 8003ff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ff4:	4281      	cmp	r1, r0
 8003ff6:	dc07      	bgt.n	8004008 <sin+0x20>
 8003ff8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004088 <sin+0xa0>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	b005      	add	sp, #20
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	f001 b838 	b.w	8005078 <__kernel_sin>
 8004008:	4822      	ldr	r0, [pc, #136]	; (8004094 <sin+0xac>)
 800400a:	4281      	cmp	r1, r0
 800400c:	dd09      	ble.n	8004022 <sin+0x3a>
 800400e:	ee10 0a10 	vmov	r0, s0
 8004012:	4619      	mov	r1, r3
 8004014:	f7fc f8dc 	bl	80001d0 <__aeabi_dsub>
 8004018:	ec41 0b10 	vmov	d0, r0, r1
 800401c:	b005      	add	sp, #20
 800401e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004022:	4668      	mov	r0, sp
 8004024:	f000 fa04 	bl	8004430 <__ieee754_rem_pio2>
 8004028:	f000 0003 	and.w	r0, r0, #3
 800402c:	2801      	cmp	r0, #1
 800402e:	d00c      	beq.n	800404a <sin+0x62>
 8004030:	2802      	cmp	r0, #2
 8004032:	d011      	beq.n	8004058 <sin+0x70>
 8004034:	b9f0      	cbnz	r0, 8004074 <sin+0x8c>
 8004036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800403a:	ed9d 0b00 	vldr	d0, [sp]
 800403e:	2001      	movs	r0, #1
 8004040:	f001 f81a 	bl	8005078 <__kernel_sin>
 8004044:	ec51 0b10 	vmov	r0, r1, d0
 8004048:	e7e6      	b.n	8004018 <sin+0x30>
 800404a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800404e:	ed9d 0b00 	vldr	d0, [sp]
 8004052:	f000 fbf9 	bl	8004848 <__kernel_cos>
 8004056:	e7f5      	b.n	8004044 <sin+0x5c>
 8004058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800405c:	ed9d 0b00 	vldr	d0, [sp]
 8004060:	2001      	movs	r0, #1
 8004062:	f001 f809 	bl	8005078 <__kernel_sin>
 8004066:	ec53 2b10 	vmov	r2, r3, d0
 800406a:	ee10 0a10 	vmov	r0, s0
 800406e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004072:	e7d1      	b.n	8004018 <sin+0x30>
 8004074:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004078:	ed9d 0b00 	vldr	d0, [sp]
 800407c:	f000 fbe4 	bl	8004848 <__kernel_cos>
 8004080:	e7f1      	b.n	8004066 <sin+0x7e>
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
	...
 8004090:	3fe921fb 	.word	0x3fe921fb
 8004094:	7fefffff 	.word	0x7fefffff

08004098 <exp>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	ed2d 8b02 	vpush	{d8}
 800409e:	ec55 4b10 	vmov	r4, r5, d0
 80040a2:	f000 f841 	bl	8004128 <__ieee754_exp>
 80040a6:	eeb0 8a40 	vmov.f32	s16, s0
 80040aa:	eef0 8a60 	vmov.f32	s17, s1
 80040ae:	ec45 4b10 	vmov	d0, r4, r5
 80040b2:	f001 f8d8 	bl	8005266 <finite>
 80040b6:	b168      	cbz	r0, 80040d4 <exp+0x3c>
 80040b8:	a317      	add	r3, pc, #92	; (adr r3, 8004118 <exp+0x80>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc fccd 	bl	8000a60 <__aeabi_dcmpgt>
 80040c6:	b160      	cbz	r0, 80040e2 <exp+0x4a>
 80040c8:	f7ff ff5c 	bl	8003f84 <__errno>
 80040cc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8004108 <exp+0x70>
 80040d0:	2322      	movs	r3, #34	; 0x22
 80040d2:	6003      	str	r3, [r0, #0]
 80040d4:	eeb0 0a48 	vmov.f32	s0, s16
 80040d8:	eef0 0a68 	vmov.f32	s1, s17
 80040dc:	ecbd 8b02 	vpop	{d8}
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	a30f      	add	r3, pc, #60	; (adr r3, 8004120 <exp+0x88>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc fc9a 	bl	8000a24 <__aeabi_dcmplt>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d0ef      	beq.n	80040d4 <exp+0x3c>
 80040f4:	f7ff ff46 	bl	8003f84 <__errno>
 80040f8:	2322      	movs	r3, #34	; 0x22
 80040fa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8004110 <exp+0x78>
 80040fe:	6003      	str	r3, [r0, #0]
 8004100:	e7e8      	b.n	80040d4 <exp+0x3c>
 8004102:	bf00      	nop
 8004104:	f3af 8000 	nop.w
 8004108:	00000000 	.word	0x00000000
 800410c:	7ff00000 	.word	0x7ff00000
	...
 8004118:	fefa39ef 	.word	0xfefa39ef
 800411c:	40862e42 	.word	0x40862e42
 8004120:	d52d3051 	.word	0xd52d3051
 8004124:	c0874910 	.word	0xc0874910

08004128 <__ieee754_exp>:
 8004128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	ec55 4b10 	vmov	r4, r5, d0
 8004130:	49b5      	ldr	r1, [pc, #724]	; (8004408 <__ieee754_exp+0x2e0>)
 8004132:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004136:	428b      	cmp	r3, r1
 8004138:	ed2d 8b04 	vpush	{d8-d9}
 800413c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004140:	d93d      	bls.n	80041be <__ieee754_exp+0x96>
 8004142:	49b2      	ldr	r1, [pc, #712]	; (800440c <__ieee754_exp+0x2e4>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d918      	bls.n	800417a <__ieee754_exp+0x52>
 8004148:	ee10 3a10 	vmov	r3, s0
 800414c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8004150:	4313      	orrs	r3, r2
 8004152:	d009      	beq.n	8004168 <__ieee754_exp+0x40>
 8004154:	ee10 2a10 	vmov	r2, s0
 8004158:	462b      	mov	r3, r5
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc f839 	bl	80001d4 <__adddf3>
 8004162:	4604      	mov	r4, r0
 8004164:	460d      	mov	r5, r1
 8004166:	e002      	b.n	800416e <__ieee754_exp+0x46>
 8004168:	b10e      	cbz	r6, 800416e <__ieee754_exp+0x46>
 800416a:	2400      	movs	r4, #0
 800416c:	2500      	movs	r5, #0
 800416e:	ecbd 8b04 	vpop	{d8-d9}
 8004172:	ec45 4b10 	vmov	d0, r4, r5
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417a:	a38d      	add	r3, pc, #564	; (adr r3, 80043b0 <__ieee754_exp+0x288>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	ee10 0a10 	vmov	r0, s0
 8004184:	4629      	mov	r1, r5
 8004186:	f7fc fc6b 	bl	8000a60 <__aeabi_dcmpgt>
 800418a:	4607      	mov	r7, r0
 800418c:	b130      	cbz	r0, 800419c <__ieee754_exp+0x74>
 800418e:	ecbd 8b04 	vpop	{d8-d9}
 8004192:	2000      	movs	r0, #0
 8004194:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	f001 b853 	b.w	8005242 <__math_oflow>
 800419c:	a386      	add	r3, pc, #536	; (adr r3, 80043b8 <__ieee754_exp+0x290>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fc fc3d 	bl	8000a24 <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f000 808b 	beq.w	80042c6 <__ieee754_exp+0x19e>
 80041b0:	ecbd 8b04 	vpop	{d8-d9}
 80041b4:	4638      	mov	r0, r7
 80041b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ba:	f001 b839 	b.w	8005230 <__math_uflow>
 80041be:	4a94      	ldr	r2, [pc, #592]	; (8004410 <__ieee754_exp+0x2e8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f240 80ac 	bls.w	800431e <__ieee754_exp+0x1f6>
 80041c6:	4a93      	ldr	r2, [pc, #588]	; (8004414 <__ieee754_exp+0x2ec>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d87c      	bhi.n	80042c6 <__ieee754_exp+0x19e>
 80041cc:	4b92      	ldr	r3, [pc, #584]	; (8004418 <__ieee754_exp+0x2f0>)
 80041ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	ee10 0a10 	vmov	r0, s0
 80041da:	4629      	mov	r1, r5
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	4b8e      	ldr	r3, [pc, #568]	; (800441c <__ieee754_exp+0x2f4>)
 80041e2:	00f7      	lsls	r7, r6, #3
 80041e4:	443b      	add	r3, r7
 80041e6:	ed93 7b00 	vldr	d7, [r3]
 80041ea:	f1c6 0a01 	rsb	sl, r6, #1
 80041ee:	4680      	mov	r8, r0
 80041f0:	4689      	mov	r9, r1
 80041f2:	ebaa 0a06 	sub.w	sl, sl, r6
 80041f6:	eeb0 8a47 	vmov.f32	s16, s14
 80041fa:	eef0 8a67 	vmov.f32	s17, s15
 80041fe:	ec53 2b18 	vmov	r2, r3, d8
 8004202:	4640      	mov	r0, r8
 8004204:	4649      	mov	r1, r9
 8004206:	f7fb ffe3 	bl	80001d0 <__aeabi_dsub>
 800420a:	4604      	mov	r4, r0
 800420c:	460d      	mov	r5, r1
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fc f993 	bl	8000540 <__aeabi_dmul>
 800421a:	a369      	add	r3, pc, #420	; (adr r3, 80043c0 <__ieee754_exp+0x298>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	f7fc f98c 	bl	8000540 <__aeabi_dmul>
 8004228:	a367      	add	r3, pc, #412	; (adr r3, 80043c8 <__ieee754_exp+0x2a0>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fb ffcf 	bl	80001d0 <__aeabi_dsub>
 8004232:	4632      	mov	r2, r6
 8004234:	463b      	mov	r3, r7
 8004236:	f7fc f983 	bl	8000540 <__aeabi_dmul>
 800423a:	a365      	add	r3, pc, #404	; (adr r3, 80043d0 <__ieee754_exp+0x2a8>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fb ffc8 	bl	80001d4 <__adddf3>
 8004244:	4632      	mov	r2, r6
 8004246:	463b      	mov	r3, r7
 8004248:	f7fc f97a 	bl	8000540 <__aeabi_dmul>
 800424c:	a362      	add	r3, pc, #392	; (adr r3, 80043d8 <__ieee754_exp+0x2b0>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fb ffbd 	bl	80001d0 <__aeabi_dsub>
 8004256:	4632      	mov	r2, r6
 8004258:	463b      	mov	r3, r7
 800425a:	f7fc f971 	bl	8000540 <__aeabi_dmul>
 800425e:	a360      	add	r3, pc, #384	; (adr r3, 80043e0 <__ieee754_exp+0x2b8>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fb ffb6 	bl	80001d4 <__adddf3>
 8004268:	4632      	mov	r2, r6
 800426a:	463b      	mov	r3, r7
 800426c:	f7fc f968 	bl	8000540 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4606      	mov	r6, r0
 8004282:	460f      	mov	r7, r1
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7fc f95a 	bl	8000540 <__aeabi_dmul>
 800428c:	ec41 0b19 	vmov	d9, r0, r1
 8004290:	f1ba 0f00 	cmp.w	sl, #0
 8004294:	d15d      	bne.n	8004352 <__ieee754_exp+0x22a>
 8004296:	2200      	movs	r2, #0
 8004298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f7fb ff96 	bl	80001d0 <__aeabi_dsub>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	ec51 0b19 	vmov	r0, r1, d9
 80042ac:	f7fc fa72 	bl	8000794 <__aeabi_ddiv>
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	f7fb ff8c 	bl	80001d0 <__aeabi_dsub>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	2000      	movs	r0, #0
 80042be:	4958      	ldr	r1, [pc, #352]	; (8004420 <__ieee754_exp+0x2f8>)
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_dsub>
 80042c4:	e74d      	b.n	8004162 <__ieee754_exp+0x3a>
 80042c6:	4857      	ldr	r0, [pc, #348]	; (8004424 <__ieee754_exp+0x2fc>)
 80042c8:	a347      	add	r3, pc, #284	; (adr r3, 80043e8 <__ieee754_exp+0x2c0>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80042d2:	4629      	mov	r1, r5
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7fc f933 	bl	8000540 <__aeabi_dmul>
 80042da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042de:	f7fb ff79 	bl	80001d4 <__adddf3>
 80042e2:	f7fc fbc7 	bl	8000a74 <__aeabi_d2iz>
 80042e6:	4682      	mov	sl, r0
 80042e8:	f7fc f8c0 	bl	800046c <__aeabi_i2d>
 80042ec:	a340      	add	r3, pc, #256	; (adr r3, 80043f0 <__ieee754_exp+0x2c8>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	4606      	mov	r6, r0
 80042f4:	460f      	mov	r7, r1
 80042f6:	f7fc f923 	bl	8000540 <__aeabi_dmul>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4620      	mov	r0, r4
 8004300:	4629      	mov	r1, r5
 8004302:	f7fb ff65 	bl	80001d0 <__aeabi_dsub>
 8004306:	a33c      	add	r3, pc, #240	; (adr r3, 80043f8 <__ieee754_exp+0x2d0>)
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	4680      	mov	r8, r0
 800430e:	4689      	mov	r9, r1
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f7fc f914 	bl	8000540 <__aeabi_dmul>
 8004318:	ec41 0b18 	vmov	d8, r0, r1
 800431c:	e76f      	b.n	80041fe <__ieee754_exp+0xd6>
 800431e:	4a42      	ldr	r2, [pc, #264]	; (8004428 <__ieee754_exp+0x300>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d811      	bhi.n	8004348 <__ieee754_exp+0x220>
 8004324:	a336      	add	r3, pc, #216	; (adr r3, 8004400 <__ieee754_exp+0x2d8>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	ee10 0a10 	vmov	r0, s0
 800432e:	4629      	mov	r1, r5
 8004330:	f7fb ff50 	bl	80001d4 <__adddf3>
 8004334:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <__ieee754_exp+0x2f8>)
 8004336:	2200      	movs	r2, #0
 8004338:	f7fc fb92 	bl	8000a60 <__aeabi_dcmpgt>
 800433c:	b138      	cbz	r0, 800434e <__ieee754_exp+0x226>
 800433e:	4b38      	ldr	r3, [pc, #224]	; (8004420 <__ieee754_exp+0x2f8>)
 8004340:	2200      	movs	r2, #0
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	e70a      	b.n	800415e <__ieee754_exp+0x36>
 8004348:	f04f 0a00 	mov.w	sl, #0
 800434c:	e75f      	b.n	800420e <__ieee754_exp+0xe6>
 800434e:	4682      	mov	sl, r0
 8004350:	e75d      	b.n	800420e <__ieee754_exp+0xe6>
 8004352:	4632      	mov	r2, r6
 8004354:	463b      	mov	r3, r7
 8004356:	2000      	movs	r0, #0
 8004358:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800435c:	f7fb ff38 	bl	80001d0 <__aeabi_dsub>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	ec51 0b19 	vmov	r0, r1, d9
 8004368:	f7fc fa14 	bl	8000794 <__aeabi_ddiv>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	ec51 0b18 	vmov	r0, r1, d8
 8004374:	f7fb ff2c 	bl	80001d0 <__aeabi_dsub>
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	f7fb ff28 	bl	80001d0 <__aeabi_dsub>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	2000      	movs	r0, #0
 8004386:	4926      	ldr	r1, [pc, #152]	; (8004420 <__ieee754_exp+0x2f8>)
 8004388:	f7fb ff22 	bl	80001d0 <__aeabi_dsub>
 800438c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8004390:	4592      	cmp	sl, r2
 8004392:	db02      	blt.n	800439a <__ieee754_exp+0x272>
 8004394:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004398:	e6e3      	b.n	8004162 <__ieee754_exp+0x3a>
 800439a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800439e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80043a2:	2200      	movs	r2, #0
 80043a4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80043a8:	f7fc f8ca 	bl	8000540 <__aeabi_dmul>
 80043ac:	e6d9      	b.n	8004162 <__ieee754_exp+0x3a>
 80043ae:	bf00      	nop
 80043b0:	fefa39ef 	.word	0xfefa39ef
 80043b4:	40862e42 	.word	0x40862e42
 80043b8:	d52d3051 	.word	0xd52d3051
 80043bc:	c0874910 	.word	0xc0874910
 80043c0:	72bea4d0 	.word	0x72bea4d0
 80043c4:	3e663769 	.word	0x3e663769
 80043c8:	c5d26bf1 	.word	0xc5d26bf1
 80043cc:	3ebbbd41 	.word	0x3ebbbd41
 80043d0:	af25de2c 	.word	0xaf25de2c
 80043d4:	3f11566a 	.word	0x3f11566a
 80043d8:	16bebd93 	.word	0x16bebd93
 80043dc:	3f66c16c 	.word	0x3f66c16c
 80043e0:	5555553e 	.word	0x5555553e
 80043e4:	3fc55555 	.word	0x3fc55555
 80043e8:	652b82fe 	.word	0x652b82fe
 80043ec:	3ff71547 	.word	0x3ff71547
 80043f0:	fee00000 	.word	0xfee00000
 80043f4:	3fe62e42 	.word	0x3fe62e42
 80043f8:	35793c76 	.word	0x35793c76
 80043fc:	3dea39ef 	.word	0x3dea39ef
 8004400:	8800759c 	.word	0x8800759c
 8004404:	7e37e43c 	.word	0x7e37e43c
 8004408:	40862e41 	.word	0x40862e41
 800440c:	7fefffff 	.word	0x7fefffff
 8004410:	3fd62e42 	.word	0x3fd62e42
 8004414:	3ff0a2b1 	.word	0x3ff0a2b1
 8004418:	080054f8 	.word	0x080054f8
 800441c:	08005508 	.word	0x08005508
 8004420:	3ff00000 	.word	0x3ff00000
 8004424:	080054e8 	.word	0x080054e8
 8004428:	3defffff 	.word	0x3defffff
 800442c:	00000000 	.word	0x00000000

08004430 <__ieee754_rem_pio2>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	ed2d 8b02 	vpush	{d8}
 8004438:	ec55 4b10 	vmov	r4, r5, d0
 800443c:	4bca      	ldr	r3, [pc, #808]	; (8004768 <__ieee754_rem_pio2+0x338>)
 800443e:	b08b      	sub	sp, #44	; 0x2c
 8004440:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004444:	4598      	cmp	r8, r3
 8004446:	4682      	mov	sl, r0
 8004448:	9502      	str	r5, [sp, #8]
 800444a:	dc08      	bgt.n	800445e <__ieee754_rem_pio2+0x2e>
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	ed80 0b00 	vstr	d0, [r0]
 8004454:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004458:	f04f 0b00 	mov.w	fp, #0
 800445c:	e028      	b.n	80044b0 <__ieee754_rem_pio2+0x80>
 800445e:	4bc3      	ldr	r3, [pc, #780]	; (800476c <__ieee754_rem_pio2+0x33c>)
 8004460:	4598      	cmp	r8, r3
 8004462:	dc78      	bgt.n	8004556 <__ieee754_rem_pio2+0x126>
 8004464:	9b02      	ldr	r3, [sp, #8]
 8004466:	4ec2      	ldr	r6, [pc, #776]	; (8004770 <__ieee754_rem_pio2+0x340>)
 8004468:	2b00      	cmp	r3, #0
 800446a:	ee10 0a10 	vmov	r0, s0
 800446e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004730 <__ieee754_rem_pio2+0x300>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4629      	mov	r1, r5
 8004476:	dd39      	ble.n	80044ec <__ieee754_rem_pio2+0xbc>
 8004478:	f7fb feaa 	bl	80001d0 <__aeabi_dsub>
 800447c:	45b0      	cmp	r8, r6
 800447e:	4604      	mov	r4, r0
 8004480:	460d      	mov	r5, r1
 8004482:	d01b      	beq.n	80044bc <__ieee754_rem_pio2+0x8c>
 8004484:	a3ac      	add	r3, pc, #688	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fb fea1 	bl	80001d0 <__aeabi_dsub>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	e9ca 2300 	strd	r2, r3, [sl]
 8004496:	4620      	mov	r0, r4
 8004498:	4629      	mov	r1, r5
 800449a:	f7fb fe99 	bl	80001d0 <__aeabi_dsub>
 800449e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fb fe94 	bl	80001d0 <__aeabi_dsub>
 80044a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80044ac:	f04f 0b01 	mov.w	fp, #1
 80044b0:	4658      	mov	r0, fp
 80044b2:	b00b      	add	sp, #44	; 0x2c
 80044b4:	ecbd 8b02 	vpop	{d8}
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004740 <__ieee754_rem_pio2+0x310>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fb fe85 	bl	80001d0 <__aeabi_dsub>
 80044c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004748 <__ieee754_rem_pio2+0x318>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	f7fb fe7e 	bl	80001d0 <__aeabi_dsub>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	e9ca 2300 	strd	r2, r3, [sl]
 80044dc:	4620      	mov	r0, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fb fe76 	bl	80001d0 <__aeabi_dsub>
 80044e4:	a398      	add	r3, pc, #608	; (adr r3, 8004748 <__ieee754_rem_pio2+0x318>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	e7db      	b.n	80044a4 <__ieee754_rem_pio2+0x74>
 80044ec:	f7fb fe72 	bl	80001d4 <__adddf3>
 80044f0:	45b0      	cmp	r8, r6
 80044f2:	4604      	mov	r4, r0
 80044f4:	460d      	mov	r5, r1
 80044f6:	d016      	beq.n	8004526 <__ieee754_rem_pio2+0xf6>
 80044f8:	a38f      	add	r3, pc, #572	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f7fb fe69 	bl	80001d4 <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	e9ca 2300 	strd	r2, r3, [sl]
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fb fe5f 	bl	80001d0 <__aeabi_dsub>
 8004512:	a389      	add	r3, pc, #548	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fb fe5c 	bl	80001d4 <__adddf3>
 800451c:	f04f 3bff 	mov.w	fp, #4294967295
 8004520:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004524:	e7c4      	b.n	80044b0 <__ieee754_rem_pio2+0x80>
 8004526:	a386      	add	r3, pc, #536	; (adr r3, 8004740 <__ieee754_rem_pio2+0x310>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fb fe52 	bl	80001d4 <__adddf3>
 8004530:	a385      	add	r3, pc, #532	; (adr r3, 8004748 <__ieee754_rem_pio2+0x318>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	4604      	mov	r4, r0
 8004538:	460d      	mov	r5, r1
 800453a:	f7fb fe4b 	bl	80001d4 <__adddf3>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9ca 2300 	strd	r2, r3, [sl]
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f7fb fe41 	bl	80001d0 <__aeabi_dsub>
 800454e:	a37e      	add	r3, pc, #504	; (adr r3, 8004748 <__ieee754_rem_pio2+0x318>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	e7e0      	b.n	8004518 <__ieee754_rem_pio2+0xe8>
 8004556:	4b87      	ldr	r3, [pc, #540]	; (8004774 <__ieee754_rem_pio2+0x344>)
 8004558:	4598      	cmp	r8, r3
 800455a:	f300 80d9 	bgt.w	8004710 <__ieee754_rem_pio2+0x2e0>
 800455e:	f000 fe79 	bl	8005254 <fabs>
 8004562:	ec55 4b10 	vmov	r4, r5, d0
 8004566:	ee10 0a10 	vmov	r0, s0
 800456a:	a379      	add	r3, pc, #484	; (adr r3, 8004750 <__ieee754_rem_pio2+0x320>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	4629      	mov	r1, r5
 8004572:	f7fb ffe5 	bl	8000540 <__aeabi_dmul>
 8004576:	4b80      	ldr	r3, [pc, #512]	; (8004778 <__ieee754_rem_pio2+0x348>)
 8004578:	2200      	movs	r2, #0
 800457a:	f7fb fe2b 	bl	80001d4 <__adddf3>
 800457e:	f7fc fa79 	bl	8000a74 <__aeabi_d2iz>
 8004582:	4683      	mov	fp, r0
 8004584:	f7fb ff72 	bl	800046c <__aeabi_i2d>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	ec43 2b18 	vmov	d8, r2, r3
 8004590:	a367      	add	r3, pc, #412	; (adr r3, 8004730 <__ieee754_rem_pio2+0x300>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fb ffd3 	bl	8000540 <__aeabi_dmul>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb fe15 	bl	80001d0 <__aeabi_dsub>
 80045a6:	a364      	add	r3, pc, #400	; (adr r3, 8004738 <__ieee754_rem_pio2+0x308>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	ec51 0b18 	vmov	r0, r1, d8
 80045b4:	f7fb ffc4 	bl	8000540 <__aeabi_dmul>
 80045b8:	f1bb 0f1f 	cmp.w	fp, #31
 80045bc:	4604      	mov	r4, r0
 80045be:	460d      	mov	r5, r1
 80045c0:	dc0d      	bgt.n	80045de <__ieee754_rem_pio2+0x1ae>
 80045c2:	4b6e      	ldr	r3, [pc, #440]	; (800477c <__ieee754_rem_pio2+0x34c>)
 80045c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80045c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045cc:	4543      	cmp	r3, r8
 80045ce:	d006      	beq.n	80045de <__ieee754_rem_pio2+0x1ae>
 80045d0:	4622      	mov	r2, r4
 80045d2:	462b      	mov	r3, r5
 80045d4:	4630      	mov	r0, r6
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fb fdfa 	bl	80001d0 <__aeabi_dsub>
 80045dc:	e00f      	b.n	80045fe <__ieee754_rem_pio2+0x1ce>
 80045de:	462b      	mov	r3, r5
 80045e0:	4622      	mov	r2, r4
 80045e2:	4630      	mov	r0, r6
 80045e4:	4639      	mov	r1, r7
 80045e6:	f7fb fdf3 	bl	80001d0 <__aeabi_dsub>
 80045ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80045ee:	9303      	str	r3, [sp, #12]
 80045f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80045f8:	f1b8 0f10 	cmp.w	r8, #16
 80045fc:	dc02      	bgt.n	8004604 <__ieee754_rem_pio2+0x1d4>
 80045fe:	e9ca 0100 	strd	r0, r1, [sl]
 8004602:	e039      	b.n	8004678 <__ieee754_rem_pio2+0x248>
 8004604:	a34e      	add	r3, pc, #312	; (adr r3, 8004740 <__ieee754_rem_pio2+0x310>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	ec51 0b18 	vmov	r0, r1, d8
 800460e:	f7fb ff97 	bl	8000540 <__aeabi_dmul>
 8004612:	4604      	mov	r4, r0
 8004614:	460d      	mov	r5, r1
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	f7fb fdd7 	bl	80001d0 <__aeabi_dsub>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4680      	mov	r8, r0
 8004628:	4689      	mov	r9, r1
 800462a:	4630      	mov	r0, r6
 800462c:	4639      	mov	r1, r7
 800462e:	f7fb fdcf 	bl	80001d0 <__aeabi_dsub>
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	f7fb fdcb 	bl	80001d0 <__aeabi_dsub>
 800463a:	a343      	add	r3, pc, #268	; (adr r3, 8004748 <__ieee754_rem_pio2+0x318>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	ec51 0b18 	vmov	r0, r1, d8
 8004648:	f7fb ff7a 	bl	8000540 <__aeabi_dmul>
 800464c:	4622      	mov	r2, r4
 800464e:	462b      	mov	r3, r5
 8004650:	f7fb fdbe 	bl	80001d0 <__aeabi_dsub>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fb fdb6 	bl	80001d0 <__aeabi_dsub>
 8004664:	9a03      	ldr	r2, [sp, #12]
 8004666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b31      	cmp	r3, #49	; 0x31
 800466e:	dc24      	bgt.n	80046ba <__ieee754_rem_pio2+0x28a>
 8004670:	e9ca 0100 	strd	r0, r1, [sl]
 8004674:	4646      	mov	r6, r8
 8004676:	464f      	mov	r7, r9
 8004678:	e9da 8900 	ldrd	r8, r9, [sl]
 800467c:	4630      	mov	r0, r6
 800467e:	4642      	mov	r2, r8
 8004680:	464b      	mov	r3, r9
 8004682:	4639      	mov	r1, r7
 8004684:	f7fb fda4 	bl	80001d0 <__aeabi_dsub>
 8004688:	462b      	mov	r3, r5
 800468a:	4622      	mov	r2, r4
 800468c:	f7fb fda0 	bl	80001d0 <__aeabi_dsub>
 8004690:	9b02      	ldr	r3, [sp, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004698:	f6bf af0a 	bge.w	80044b0 <__ieee754_rem_pio2+0x80>
 800469c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80046a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80046a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046a8:	f8ca 8000 	str.w	r8, [sl]
 80046ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80046b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80046b4:	f1cb 0b00 	rsb	fp, fp, #0
 80046b8:	e6fa      	b.n	80044b0 <__ieee754_rem_pio2+0x80>
 80046ba:	a327      	add	r3, pc, #156	; (adr r3, 8004758 <__ieee754_rem_pio2+0x328>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	ec51 0b18 	vmov	r0, r1, d8
 80046c4:	f7fb ff3c 	bl	8000540 <__aeabi_dmul>
 80046c8:	4604      	mov	r4, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4640      	mov	r0, r8
 80046d2:	4649      	mov	r1, r9
 80046d4:	f7fb fd7c 	bl	80001d0 <__aeabi_dsub>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4606      	mov	r6, r0
 80046de:	460f      	mov	r7, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fb fd74 	bl	80001d0 <__aeabi_dsub>
 80046e8:	4622      	mov	r2, r4
 80046ea:	462b      	mov	r3, r5
 80046ec:	f7fb fd70 	bl	80001d0 <__aeabi_dsub>
 80046f0:	a31b      	add	r3, pc, #108	; (adr r3, 8004760 <__ieee754_rem_pio2+0x330>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	4604      	mov	r4, r0
 80046f8:	460d      	mov	r5, r1
 80046fa:	ec51 0b18 	vmov	r0, r1, d8
 80046fe:	f7fb ff1f 	bl	8000540 <__aeabi_dmul>
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	f7fb fd63 	bl	80001d0 <__aeabi_dsub>
 800470a:	4604      	mov	r4, r0
 800470c:	460d      	mov	r5, r1
 800470e:	e75f      	b.n	80045d0 <__ieee754_rem_pio2+0x1a0>
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <__ieee754_rem_pio2+0x350>)
 8004712:	4598      	cmp	r8, r3
 8004714:	dd36      	ble.n	8004784 <__ieee754_rem_pio2+0x354>
 8004716:	ee10 2a10 	vmov	r2, s0
 800471a:	462b      	mov	r3, r5
 800471c:	4620      	mov	r0, r4
 800471e:	4629      	mov	r1, r5
 8004720:	f7fb fd56 	bl	80001d0 <__aeabi_dsub>
 8004724:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004728:	e9ca 0100 	strd	r0, r1, [sl]
 800472c:	e694      	b.n	8004458 <__ieee754_rem_pio2+0x28>
 800472e:	bf00      	nop
 8004730:	54400000 	.word	0x54400000
 8004734:	3ff921fb 	.word	0x3ff921fb
 8004738:	1a626331 	.word	0x1a626331
 800473c:	3dd0b461 	.word	0x3dd0b461
 8004740:	1a600000 	.word	0x1a600000
 8004744:	3dd0b461 	.word	0x3dd0b461
 8004748:	2e037073 	.word	0x2e037073
 800474c:	3ba3198a 	.word	0x3ba3198a
 8004750:	6dc9c883 	.word	0x6dc9c883
 8004754:	3fe45f30 	.word	0x3fe45f30
 8004758:	2e000000 	.word	0x2e000000
 800475c:	3ba3198a 	.word	0x3ba3198a
 8004760:	252049c1 	.word	0x252049c1
 8004764:	397b839a 	.word	0x397b839a
 8004768:	3fe921fb 	.word	0x3fe921fb
 800476c:	4002d97b 	.word	0x4002d97b
 8004770:	3ff921fb 	.word	0x3ff921fb
 8004774:	413921fb 	.word	0x413921fb
 8004778:	3fe00000 	.word	0x3fe00000
 800477c:	08005518 	.word	0x08005518
 8004780:	7fefffff 	.word	0x7fefffff
 8004784:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004788:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800478c:	ee10 0a10 	vmov	r0, s0
 8004790:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004794:	ee10 6a10 	vmov	r6, s0
 8004798:	460f      	mov	r7, r1
 800479a:	f7fc f96b 	bl	8000a74 <__aeabi_d2iz>
 800479e:	f7fb fe65 	bl	800046c <__aeabi_i2d>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4630      	mov	r0, r6
 80047a8:	4639      	mov	r1, r7
 80047aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ae:	f7fb fd0f 	bl	80001d0 <__aeabi_dsub>
 80047b2:	4b23      	ldr	r3, [pc, #140]	; (8004840 <__ieee754_rem_pio2+0x410>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	f7fb fec3 	bl	8000540 <__aeabi_dmul>
 80047ba:	460f      	mov	r7, r1
 80047bc:	4606      	mov	r6, r0
 80047be:	f7fc f959 	bl	8000a74 <__aeabi_d2iz>
 80047c2:	f7fb fe53 	bl	800046c <__aeabi_i2d>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4630      	mov	r0, r6
 80047cc:	4639      	mov	r1, r7
 80047ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047d2:	f7fb fcfd 	bl	80001d0 <__aeabi_dsub>
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <__ieee754_rem_pio2+0x410>)
 80047d8:	2200      	movs	r2, #0
 80047da:	f7fb feb1 	bl	8000540 <__aeabi_dmul>
 80047de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80047e2:	ad04      	add	r5, sp, #16
 80047e4:	f04f 0803 	mov.w	r8, #3
 80047e8:	46a9      	mov	r9, r5
 80047ea:	2600      	movs	r6, #0
 80047ec:	2700      	movs	r7, #0
 80047ee:	4632      	mov	r2, r6
 80047f0:	463b      	mov	r3, r7
 80047f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047f6:	46c3      	mov	fp, r8
 80047f8:	3d08      	subs	r5, #8
 80047fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80047fe:	f7fc f907 	bl	8000a10 <__aeabi_dcmpeq>
 8004802:	2800      	cmp	r0, #0
 8004804:	d1f3      	bne.n	80047ee <__ieee754_rem_pio2+0x3be>
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <__ieee754_rem_pio2+0x414>)
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	2302      	movs	r3, #2
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4622      	mov	r2, r4
 8004810:	465b      	mov	r3, fp
 8004812:	4651      	mov	r1, sl
 8004814:	4648      	mov	r0, r9
 8004816:	f000 f8df 	bl	80049d8 <__kernel_rem_pio2>
 800481a:	9b02      	ldr	r3, [sp, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	4683      	mov	fp, r0
 8004820:	f6bf ae46 	bge.w	80044b0 <__ieee754_rem_pio2+0x80>
 8004824:	e9da 2100 	ldrd	r2, r1, [sl]
 8004828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482c:	e9ca 2300 	strd	r2, r3, [sl]
 8004830:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004838:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800483c:	e73a      	b.n	80046b4 <__ieee754_rem_pio2+0x284>
 800483e:	bf00      	nop
 8004840:	41700000 	.word	0x41700000
 8004844:	08005598 	.word	0x08005598

08004848 <__kernel_cos>:
 8004848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	ec57 6b10 	vmov	r6, r7, d0
 8004850:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004854:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004858:	ed8d 1b00 	vstr	d1, [sp]
 800485c:	da07      	bge.n	800486e <__kernel_cos+0x26>
 800485e:	ee10 0a10 	vmov	r0, s0
 8004862:	4639      	mov	r1, r7
 8004864:	f7fc f906 	bl	8000a74 <__aeabi_d2iz>
 8004868:	2800      	cmp	r0, #0
 800486a:	f000 8088 	beq.w	800497e <__kernel_cos+0x136>
 800486e:	4632      	mov	r2, r6
 8004870:	463b      	mov	r3, r7
 8004872:	4630      	mov	r0, r6
 8004874:	4639      	mov	r1, r7
 8004876:	f7fb fe63 	bl	8000540 <__aeabi_dmul>
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <__kernel_cos+0x178>)
 800487c:	2200      	movs	r2, #0
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	f7fb fe5d 	bl	8000540 <__aeabi_dmul>
 8004886:	a340      	add	r3, pc, #256	; (adr r3, 8004988 <__kernel_cos+0x140>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	4682      	mov	sl, r0
 800488e:	468b      	mov	fp, r1
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fe54 	bl	8000540 <__aeabi_dmul>
 8004898:	a33d      	add	r3, pc, #244	; (adr r3, 8004990 <__kernel_cos+0x148>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fc99 	bl	80001d4 <__adddf3>
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f7fb fe4b 	bl	8000540 <__aeabi_dmul>
 80048aa:	a33b      	add	r3, pc, #236	; (adr r3, 8004998 <__kernel_cos+0x150>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fc8e 	bl	80001d0 <__aeabi_dsub>
 80048b4:	4622      	mov	r2, r4
 80048b6:	462b      	mov	r3, r5
 80048b8:	f7fb fe42 	bl	8000540 <__aeabi_dmul>
 80048bc:	a338      	add	r3, pc, #224	; (adr r3, 80049a0 <__kernel_cos+0x158>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fc87 	bl	80001d4 <__adddf3>
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f7fb fe39 	bl	8000540 <__aeabi_dmul>
 80048ce:	a336      	add	r3, pc, #216	; (adr r3, 80049a8 <__kernel_cos+0x160>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc7c 	bl	80001d0 <__aeabi_dsub>
 80048d8:	4622      	mov	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	f7fb fe30 	bl	8000540 <__aeabi_dmul>
 80048e0:	a333      	add	r3, pc, #204	; (adr r3, 80049b0 <__kernel_cos+0x168>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f7fb fc75 	bl	80001d4 <__adddf3>
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f7fb fe27 	bl	8000540 <__aeabi_dmul>
 80048f2:	4622      	mov	r2, r4
 80048f4:	462b      	mov	r3, r5
 80048f6:	f7fb fe23 	bl	8000540 <__aeabi_dmul>
 80048fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048fe:	4604      	mov	r4, r0
 8004900:	460d      	mov	r5, r1
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	f7fb fe1b 	bl	8000540 <__aeabi_dmul>
 800490a:	460b      	mov	r3, r1
 800490c:	4602      	mov	r2, r0
 800490e:	4629      	mov	r1, r5
 8004910:	4620      	mov	r0, r4
 8004912:	f7fb fc5d 	bl	80001d0 <__aeabi_dsub>
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <__kernel_cos+0x17c>)
 8004918:	4598      	cmp	r8, r3
 800491a:	4606      	mov	r6, r0
 800491c:	460f      	mov	r7, r1
 800491e:	dc10      	bgt.n	8004942 <__kernel_cos+0xfa>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4650      	mov	r0, sl
 8004926:	4659      	mov	r1, fp
 8004928:	f7fb fc52 	bl	80001d0 <__aeabi_dsub>
 800492c:	460b      	mov	r3, r1
 800492e:	4926      	ldr	r1, [pc, #152]	; (80049c8 <__kernel_cos+0x180>)
 8004930:	4602      	mov	r2, r0
 8004932:	2000      	movs	r0, #0
 8004934:	f7fb fc4c 	bl	80001d0 <__aeabi_dsub>
 8004938:	ec41 0b10 	vmov	d0, r0, r1
 800493c:	b003      	add	sp, #12
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <__kernel_cos+0x184>)
 8004944:	4920      	ldr	r1, [pc, #128]	; (80049c8 <__kernel_cos+0x180>)
 8004946:	4598      	cmp	r8, r3
 8004948:	bfcc      	ite	gt
 800494a:	4d21      	ldrgt	r5, [pc, #132]	; (80049d0 <__kernel_cos+0x188>)
 800494c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004950:	2400      	movs	r4, #0
 8004952:	4622      	mov	r2, r4
 8004954:	462b      	mov	r3, r5
 8004956:	2000      	movs	r0, #0
 8004958:	f7fb fc3a 	bl	80001d0 <__aeabi_dsub>
 800495c:	4622      	mov	r2, r4
 800495e:	4680      	mov	r8, r0
 8004960:	4689      	mov	r9, r1
 8004962:	462b      	mov	r3, r5
 8004964:	4650      	mov	r0, sl
 8004966:	4659      	mov	r1, fp
 8004968:	f7fb fc32 	bl	80001d0 <__aeabi_dsub>
 800496c:	4632      	mov	r2, r6
 800496e:	463b      	mov	r3, r7
 8004970:	f7fb fc2e 	bl	80001d0 <__aeabi_dsub>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4640      	mov	r0, r8
 800497a:	4649      	mov	r1, r9
 800497c:	e7da      	b.n	8004934 <__kernel_cos+0xec>
 800497e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80049b8 <__kernel_cos+0x170>
 8004982:	e7db      	b.n	800493c <__kernel_cos+0xf4>
 8004984:	f3af 8000 	nop.w
 8004988:	be8838d4 	.word	0xbe8838d4
 800498c:	bda8fae9 	.word	0xbda8fae9
 8004990:	bdb4b1c4 	.word	0xbdb4b1c4
 8004994:	3e21ee9e 	.word	0x3e21ee9e
 8004998:	809c52ad 	.word	0x809c52ad
 800499c:	3e927e4f 	.word	0x3e927e4f
 80049a0:	19cb1590 	.word	0x19cb1590
 80049a4:	3efa01a0 	.word	0x3efa01a0
 80049a8:	16c15177 	.word	0x16c15177
 80049ac:	3f56c16c 	.word	0x3f56c16c
 80049b0:	5555554c 	.word	0x5555554c
 80049b4:	3fa55555 	.word	0x3fa55555
 80049b8:	00000000 	.word	0x00000000
 80049bc:	3ff00000 	.word	0x3ff00000
 80049c0:	3fe00000 	.word	0x3fe00000
 80049c4:	3fd33332 	.word	0x3fd33332
 80049c8:	3ff00000 	.word	0x3ff00000
 80049cc:	3fe90000 	.word	0x3fe90000
 80049d0:	3fd20000 	.word	0x3fd20000
 80049d4:	00000000 	.word	0x00000000

080049d8 <__kernel_rem_pio2>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	ed2d 8b02 	vpush	{d8}
 80049e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80049e4:	f112 0f14 	cmn.w	r2, #20
 80049e8:	9308      	str	r3, [sp, #32]
 80049ea:	9101      	str	r1, [sp, #4]
 80049ec:	4bc4      	ldr	r3, [pc, #784]	; (8004d00 <__kernel_rem_pio2+0x328>)
 80049ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80049f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80049f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049f6:	9302      	str	r3, [sp, #8]
 80049f8:	9b08      	ldr	r3, [sp, #32]
 80049fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80049fe:	bfa8      	it	ge
 8004a00:	1ed4      	subge	r4, r2, #3
 8004a02:	9306      	str	r3, [sp, #24]
 8004a04:	bfb2      	itee	lt
 8004a06:	2400      	movlt	r4, #0
 8004a08:	2318      	movge	r3, #24
 8004a0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004a0e:	f06f 0317 	mvn.w	r3, #23
 8004a12:	fb04 3303 	mla	r3, r4, r3, r3
 8004a16:	eb03 0a02 	add.w	sl, r3, r2
 8004a1a:	9b02      	ldr	r3, [sp, #8]
 8004a1c:	9a06      	ldr	r2, [sp, #24]
 8004a1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004cf0 <__kernel_rem_pio2+0x318>
 8004a22:	eb03 0802 	add.w	r8, r3, r2
 8004a26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004a28:	1aa7      	subs	r7, r4, r2
 8004a2a:	ae22      	add	r6, sp, #136	; 0x88
 8004a2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004a30:	2500      	movs	r5, #0
 8004a32:	4545      	cmp	r5, r8
 8004a34:	dd13      	ble.n	8004a5e <__kernel_rem_pio2+0x86>
 8004a36:	9b08      	ldr	r3, [sp, #32]
 8004a38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004cf0 <__kernel_rem_pio2+0x318>
 8004a3c:	aa22      	add	r2, sp, #136	; 0x88
 8004a3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004a42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004a46:	f04f 0800 	mov.w	r8, #0
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	4598      	cmp	r8, r3
 8004a4e:	dc2f      	bgt.n	8004ab0 <__kernel_rem_pio2+0xd8>
 8004a50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004a54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004a58:	462f      	mov	r7, r5
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	e01b      	b.n	8004a96 <__kernel_rem_pio2+0xbe>
 8004a5e:	42ef      	cmn	r7, r5
 8004a60:	d407      	bmi.n	8004a72 <__kernel_rem_pio2+0x9a>
 8004a62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a66:	f7fb fd01 	bl	800046c <__aeabi_i2d>
 8004a6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004a6e:	3501      	adds	r5, #1
 8004a70:	e7df      	b.n	8004a32 <__kernel_rem_pio2+0x5a>
 8004a72:	ec51 0b18 	vmov	r0, r1, d8
 8004a76:	e7f8      	b.n	8004a6a <__kernel_rem_pio2+0x92>
 8004a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004a80:	f7fb fd5e 	bl	8000540 <__aeabi_dmul>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a8c:	f7fb fba2 	bl	80001d4 <__adddf3>
 8004a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a94:	3601      	adds	r6, #1
 8004a96:	9b06      	ldr	r3, [sp, #24]
 8004a98:	429e      	cmp	r6, r3
 8004a9a:	f1a7 0708 	sub.w	r7, r7, #8
 8004a9e:	ddeb      	ble.n	8004a78 <__kernel_rem_pio2+0xa0>
 8004aa0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004aa4:	f108 0801 	add.w	r8, r8, #1
 8004aa8:	ecab 7b02 	vstmia	fp!, {d7}
 8004aac:	3508      	adds	r5, #8
 8004aae:	e7cc      	b.n	8004a4a <__kernel_rem_pio2+0x72>
 8004ab0:	9b02      	ldr	r3, [sp, #8]
 8004ab2:	aa0e      	add	r2, sp, #56	; 0x38
 8004ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ab8:	930d      	str	r3, [sp, #52]	; 0x34
 8004aba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004abc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004ac0:	9c02      	ldr	r4, [sp, #8]
 8004ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac4:	00e3      	lsls	r3, r4, #3
 8004ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac8:	ab9a      	add	r3, sp, #616	; 0x268
 8004aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ace:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004ad2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004ad6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004ad8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004adc:	46c3      	mov	fp, r8
 8004ade:	46a1      	mov	r9, r4
 8004ae0:	f1b9 0f00 	cmp.w	r9, #0
 8004ae4:	f1a5 0508 	sub.w	r5, r5, #8
 8004ae8:	dc77      	bgt.n	8004bda <__kernel_rem_pio2+0x202>
 8004aea:	ec47 6b10 	vmov	d0, r6, r7
 8004aee:	4650      	mov	r0, sl
 8004af0:	f000 fc46 	bl	8005380 <scalbn>
 8004af4:	ec57 6b10 	vmov	r6, r7, d0
 8004af8:	2200      	movs	r2, #0
 8004afa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004afe:	ee10 0a10 	vmov	r0, s0
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fd1c 	bl	8000540 <__aeabi_dmul>
 8004b08:	ec41 0b10 	vmov	d0, r0, r1
 8004b0c:	f000 fbb8 	bl	8005280 <floor>
 8004b10:	4b7c      	ldr	r3, [pc, #496]	; (8004d04 <__kernel_rem_pio2+0x32c>)
 8004b12:	ec51 0b10 	vmov	r0, r1, d0
 8004b16:	2200      	movs	r2, #0
 8004b18:	f7fb fd12 	bl	8000540 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	f7fb fb54 	bl	80001d0 <__aeabi_dsub>
 8004b28:	460f      	mov	r7, r1
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	f7fb ffa2 	bl	8000a74 <__aeabi_d2iz>
 8004b30:	9004      	str	r0, [sp, #16]
 8004b32:	f7fb fc9b 	bl	800046c <__aeabi_i2d>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	f7fb fb47 	bl	80001d0 <__aeabi_dsub>
 8004b42:	f1ba 0f00 	cmp.w	sl, #0
 8004b46:	4606      	mov	r6, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	dd6d      	ble.n	8004c28 <__kernel_rem_pio2+0x250>
 8004b4c:	1e62      	subs	r2, r4, #1
 8004b4e:	ab0e      	add	r3, sp, #56	; 0x38
 8004b50:	9d04      	ldr	r5, [sp, #16]
 8004b52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b56:	f1ca 0118 	rsb	r1, sl, #24
 8004b5a:	fa40 f301 	asr.w	r3, r0, r1
 8004b5e:	441d      	add	r5, r3
 8004b60:	408b      	lsls	r3, r1
 8004b62:	1ac0      	subs	r0, r0, r3
 8004b64:	ab0e      	add	r3, sp, #56	; 0x38
 8004b66:	9504      	str	r5, [sp, #16]
 8004b68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b6c:	f1ca 0317 	rsb	r3, sl, #23
 8004b70:	fa40 fb03 	asr.w	fp, r0, r3
 8004b74:	f1bb 0f00 	cmp.w	fp, #0
 8004b78:	dd65      	ble.n	8004c46 <__kernel_rem_pio2+0x26e>
 8004b7a:	9b04      	ldr	r3, [sp, #16]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	3301      	adds	r3, #1
 8004b80:	9304      	str	r3, [sp, #16]
 8004b82:	4615      	mov	r5, r2
 8004b84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b88:	4294      	cmp	r4, r2
 8004b8a:	f300 809c 	bgt.w	8004cc6 <__kernel_rem_pio2+0x2ee>
 8004b8e:	f1ba 0f00 	cmp.w	sl, #0
 8004b92:	dd07      	ble.n	8004ba4 <__kernel_rem_pio2+0x1cc>
 8004b94:	f1ba 0f01 	cmp.w	sl, #1
 8004b98:	f000 80c0 	beq.w	8004d1c <__kernel_rem_pio2+0x344>
 8004b9c:	f1ba 0f02 	cmp.w	sl, #2
 8004ba0:	f000 80c6 	beq.w	8004d30 <__kernel_rem_pio2+0x358>
 8004ba4:	f1bb 0f02 	cmp.w	fp, #2
 8004ba8:	d14d      	bne.n	8004c46 <__kernel_rem_pio2+0x26e>
 8004baa:	4632      	mov	r2, r6
 8004bac:	463b      	mov	r3, r7
 8004bae:	4956      	ldr	r1, [pc, #344]	; (8004d08 <__kernel_rem_pio2+0x330>)
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7fb fb0d 	bl	80001d0 <__aeabi_dsub>
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	460f      	mov	r7, r1
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	d043      	beq.n	8004c46 <__kernel_rem_pio2+0x26e>
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004cf8 <__kernel_rem_pio2+0x320>
 8004bc4:	f000 fbdc 	bl	8005380 <scalbn>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	ec53 2b10 	vmov	r2, r3, d0
 8004bd0:	f7fb fafe 	bl	80001d0 <__aeabi_dsub>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	460f      	mov	r7, r1
 8004bd8:	e035      	b.n	8004c46 <__kernel_rem_pio2+0x26e>
 8004bda:	4b4c      	ldr	r3, [pc, #304]	; (8004d0c <__kernel_rem_pio2+0x334>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb fcad 	bl	8000540 <__aeabi_dmul>
 8004be6:	f7fb ff45 	bl	8000a74 <__aeabi_d2iz>
 8004bea:	f7fb fc3f 	bl	800046c <__aeabi_i2d>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	ec43 2b18 	vmov	d8, r2, r3
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <__kernel_rem_pio2+0x338>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f7fb fca1 	bl	8000540 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4630      	mov	r0, r6
 8004c04:	4639      	mov	r1, r7
 8004c06:	f7fb fae3 	bl	80001d0 <__aeabi_dsub>
 8004c0a:	f7fb ff33 	bl	8000a74 <__aeabi_d2iz>
 8004c0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c12:	f84b 0b04 	str.w	r0, [fp], #4
 8004c16:	ec51 0b18 	vmov	r0, r1, d8
 8004c1a:	f7fb fadb 	bl	80001d4 <__adddf3>
 8004c1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c22:	4606      	mov	r6, r0
 8004c24:	460f      	mov	r7, r1
 8004c26:	e75b      	b.n	8004ae0 <__kernel_rem_pio2+0x108>
 8004c28:	d106      	bne.n	8004c38 <__kernel_rem_pio2+0x260>
 8004c2a:	1e63      	subs	r3, r4, #1
 8004c2c:	aa0e      	add	r2, sp, #56	; 0x38
 8004c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004c36:	e79d      	b.n	8004b74 <__kernel_rem_pio2+0x19c>
 8004c38:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <__kernel_rem_pio2+0x33c>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f7fb ff06 	bl	8000a4c <__aeabi_dcmpge>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d13d      	bne.n	8004cc0 <__kernel_rem_pio2+0x2e8>
 8004c44:	4683      	mov	fp, r0
 8004c46:	2200      	movs	r2, #0
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	f7fb fedf 	bl	8000a10 <__aeabi_dcmpeq>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f000 80c0 	beq.w	8004dd8 <__kernel_rem_pio2+0x400>
 8004c58:	1e65      	subs	r5, r4, #1
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	9902      	ldr	r1, [sp, #8]
 8004c60:	428b      	cmp	r3, r1
 8004c62:	da6c      	bge.n	8004d3e <__kernel_rem_pio2+0x366>
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	f000 8089 	beq.w	8004d7c <__kernel_rem_pio2+0x3a4>
 8004c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8004c6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004c70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80ad 	beq.w	8004dd4 <__kernel_rem_pio2+0x3fc>
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004cf8 <__kernel_rem_pio2+0x320>
 8004c80:	f000 fb7e 	bl	8005380 <scalbn>
 8004c84:	ab9a      	add	r3, sp, #616	; 0x268
 8004c86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c8a:	ec57 6b10 	vmov	r6, r7, d0
 8004c8e:	00ec      	lsls	r4, r5, #3
 8004c90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004c94:	46aa      	mov	sl, r5
 8004c96:	f1ba 0f00 	cmp.w	sl, #0
 8004c9a:	f280 80d6 	bge.w	8004e4a <__kernel_rem_pio2+0x472>
 8004c9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004cf0 <__kernel_rem_pio2+0x318>
 8004ca2:	462e      	mov	r6, r5
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	f2c0 8104 	blt.w	8004eb2 <__kernel_rem_pio2+0x4da>
 8004caa:	ab72      	add	r3, sp, #456	; 0x1c8
 8004cac:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004cb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004d18 <__kernel_rem_pio2+0x340>
 8004cb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004cb8:	f04f 0800 	mov.w	r8, #0
 8004cbc:	1baf      	subs	r7, r5, r6
 8004cbe:	e0ea      	b.n	8004e96 <__kernel_rem_pio2+0x4be>
 8004cc0:	f04f 0b02 	mov.w	fp, #2
 8004cc4:	e759      	b.n	8004b7a <__kernel_rem_pio2+0x1a2>
 8004cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cca:	b955      	cbnz	r5, 8004ce2 <__kernel_rem_pio2+0x30a>
 8004ccc:	b123      	cbz	r3, 8004cd8 <__kernel_rem_pio2+0x300>
 8004cce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004cd2:	f8c8 3000 	str.w	r3, [r8]
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	3201      	adds	r2, #1
 8004cda:	f108 0804 	add.w	r8, r8, #4
 8004cde:	461d      	mov	r5, r3
 8004ce0:	e752      	b.n	8004b88 <__kernel_rem_pio2+0x1b0>
 8004ce2:	1acb      	subs	r3, r1, r3
 8004ce4:	f8c8 3000 	str.w	r3, [r8]
 8004ce8:	462b      	mov	r3, r5
 8004cea:	e7f5      	b.n	8004cd8 <__kernel_rem_pio2+0x300>
 8004cec:	f3af 8000 	nop.w
	...
 8004cfc:	3ff00000 	.word	0x3ff00000
 8004d00:	080056e0 	.word	0x080056e0
 8004d04:	40200000 	.word	0x40200000
 8004d08:	3ff00000 	.word	0x3ff00000
 8004d0c:	3e700000 	.word	0x3e700000
 8004d10:	41700000 	.word	0x41700000
 8004d14:	3fe00000 	.word	0x3fe00000
 8004d18:	080056a0 	.word	0x080056a0
 8004d1c:	1e62      	subs	r2, r4, #1
 8004d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8004d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d28:	a90e      	add	r1, sp, #56	; 0x38
 8004d2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004d2e:	e739      	b.n	8004ba4 <__kernel_rem_pio2+0x1cc>
 8004d30:	1e62      	subs	r2, r4, #1
 8004d32:	ab0e      	add	r3, sp, #56	; 0x38
 8004d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004d3c:	e7f4      	b.n	8004d28 <__kernel_rem_pio2+0x350>
 8004d3e:	a90e      	add	r1, sp, #56	; 0x38
 8004d40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	430a      	orrs	r2, r1
 8004d48:	e789      	b.n	8004c5e <__kernel_rem_pio2+0x286>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004d50:	2900      	cmp	r1, #0
 8004d52:	d0fa      	beq.n	8004d4a <__kernel_rem_pio2+0x372>
 8004d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004d5a:	446a      	add	r2, sp
 8004d5c:	3a98      	subs	r2, #152	; 0x98
 8004d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8004d60:	9a08      	ldr	r2, [sp, #32]
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	18a5      	adds	r5, r4, r2
 8004d66:	aa22      	add	r2, sp, #136	; 0x88
 8004d68:	f104 0801 	add.w	r8, r4, #1
 8004d6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	4543      	cmp	r3, r8
 8004d76:	da04      	bge.n	8004d82 <__kernel_rem_pio2+0x3aa>
 8004d78:	461c      	mov	r4, r3
 8004d7a:	e6a3      	b.n	8004ac4 <__kernel_rem_pio2+0xec>
 8004d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7e4      	b.n	8004d4c <__kernel_rem_pio2+0x374>
 8004d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d88:	f7fb fb70 	bl	800046c <__aeabi_i2d>
 8004d8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d92:	46ab      	mov	fp, r5
 8004d94:	461c      	mov	r4, r3
 8004d96:	f04f 0900 	mov.w	r9, #0
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	2700      	movs	r7, #0
 8004d9e:	9b06      	ldr	r3, [sp, #24]
 8004da0:	4599      	cmp	r9, r3
 8004da2:	dd06      	ble.n	8004db2 <__kernel_rem_pio2+0x3da>
 8004da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	930a      	str	r3, [sp, #40]	; 0x28
 8004db0:	e7df      	b.n	8004d72 <__kernel_rem_pio2+0x39a>
 8004db2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004db6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004dba:	f7fb fbc1 	bl	8000540 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	f7fb fa05 	bl	80001d4 <__adddf3>
 8004dca:	f109 0901 	add.w	r9, r9, #1
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	e7e4      	b.n	8004d9e <__kernel_rem_pio2+0x3c6>
 8004dd4:	3d01      	subs	r5, #1
 8004dd6:	e748      	b.n	8004c6a <__kernel_rem_pio2+0x292>
 8004dd8:	ec47 6b10 	vmov	d0, r6, r7
 8004ddc:	f1ca 0000 	rsb	r0, sl, #0
 8004de0:	f000 face 	bl	8005380 <scalbn>
 8004de4:	ec57 6b10 	vmov	r6, r7, d0
 8004de8:	4ba0      	ldr	r3, [pc, #640]	; (800506c <__kernel_rem_pio2+0x694>)
 8004dea:	ee10 0a10 	vmov	r0, s0
 8004dee:	2200      	movs	r2, #0
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fe2b 	bl	8000a4c <__aeabi_dcmpge>
 8004df6:	b1f8      	cbz	r0, 8004e38 <__kernel_rem_pio2+0x460>
 8004df8:	4b9d      	ldr	r3, [pc, #628]	; (8005070 <__kernel_rem_pio2+0x698>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb fb9e 	bl	8000540 <__aeabi_dmul>
 8004e04:	f7fb fe36 	bl	8000a74 <__aeabi_d2iz>
 8004e08:	4680      	mov	r8, r0
 8004e0a:	f7fb fb2f 	bl	800046c <__aeabi_i2d>
 8004e0e:	4b97      	ldr	r3, [pc, #604]	; (800506c <__kernel_rem_pio2+0x694>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	f7fb fb95 	bl	8000540 <__aeabi_dmul>
 8004e16:	460b      	mov	r3, r1
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f7fb f9d7 	bl	80001d0 <__aeabi_dsub>
 8004e22:	f7fb fe27 	bl	8000a74 <__aeabi_d2iz>
 8004e26:	1c65      	adds	r5, r4, #1
 8004e28:	ab0e      	add	r3, sp, #56	; 0x38
 8004e2a:	f10a 0a18 	add.w	sl, sl, #24
 8004e2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004e32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004e36:	e720      	b.n	8004c7a <__kernel_rem_pio2+0x2a2>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe1a 	bl	8000a74 <__aeabi_d2iz>
 8004e40:	ab0e      	add	r3, sp, #56	; 0x38
 8004e42:	4625      	mov	r5, r4
 8004e44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004e48:	e717      	b.n	8004c7a <__kernel_rem_pio2+0x2a2>
 8004e4a:	ab0e      	add	r3, sp, #56	; 0x38
 8004e4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004e50:	f7fb fb0c 	bl	800046c <__aeabi_i2d>
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	f7fb fb72 	bl	8000540 <__aeabi_dmul>
 8004e5c:	4b84      	ldr	r3, [pc, #528]	; (8005070 <__kernel_rem_pio2+0x698>)
 8004e5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004e62:	2200      	movs	r2, #0
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb fb6a 	bl	8000540 <__aeabi_dmul>
 8004e6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e70:	4606      	mov	r6, r0
 8004e72:	460f      	mov	r7, r1
 8004e74:	e70f      	b.n	8004c96 <__kernel_rem_pio2+0x2be>
 8004e76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004e7e:	f7fb fb5f 	bl	8000540 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e8a:	f7fb f9a3 	bl	80001d4 <__adddf3>
 8004e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	9b02      	ldr	r3, [sp, #8]
 8004e98:	4598      	cmp	r8, r3
 8004e9a:	dc01      	bgt.n	8004ea0 <__kernel_rem_pio2+0x4c8>
 8004e9c:	45b8      	cmp	r8, r7
 8004e9e:	ddea      	ble.n	8004e76 <__kernel_rem_pio2+0x49e>
 8004ea0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004ea4:	ab4a      	add	r3, sp, #296	; 0x128
 8004ea6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004eaa:	ed87 7b00 	vstr	d7, [r7]
 8004eae:	3e01      	subs	r6, #1
 8004eb0:	e6f8      	b.n	8004ca4 <__kernel_rem_pio2+0x2cc>
 8004eb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	dc0b      	bgt.n	8004ed0 <__kernel_rem_pio2+0x4f8>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dc35      	bgt.n	8004f28 <__kernel_rem_pio2+0x550>
 8004ebc:	d059      	beq.n	8004f72 <__kernel_rem_pio2+0x59a>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	f003 0007 	and.w	r0, r3, #7
 8004ec4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004ec8:	ecbd 8b02 	vpop	{d8}
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d1f3      	bne.n	8004ebe <__kernel_rem_pio2+0x4e6>
 8004ed6:	ab4a      	add	r3, sp, #296	; 0x128
 8004ed8:	4423      	add	r3, r4
 8004eda:	9306      	str	r3, [sp, #24]
 8004edc:	461c      	mov	r4, r3
 8004ede:	469a      	mov	sl, r3
 8004ee0:	9502      	str	r5, [sp, #8]
 8004ee2:	9b02      	ldr	r3, [sp, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f1aa 0a08 	sub.w	sl, sl, #8
 8004eea:	dc6b      	bgt.n	8004fc4 <__kernel_rem_pio2+0x5ec>
 8004eec:	46aa      	mov	sl, r5
 8004eee:	f1ba 0f01 	cmp.w	sl, #1
 8004ef2:	f1a4 0408 	sub.w	r4, r4, #8
 8004ef6:	f300 8085 	bgt.w	8005004 <__kernel_rem_pio2+0x62c>
 8004efa:	9c06      	ldr	r4, [sp, #24]
 8004efc:	2000      	movs	r0, #0
 8004efe:	3408      	adds	r4, #8
 8004f00:	2100      	movs	r1, #0
 8004f02:	2d01      	cmp	r5, #1
 8004f04:	f300 809d 	bgt.w	8005042 <__kernel_rem_pio2+0x66a>
 8004f08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004f0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004f10:	f1bb 0f00 	cmp.w	fp, #0
 8004f14:	f040 809b 	bne.w	800504e <__kernel_rem_pio2+0x676>
 8004f18:	9b01      	ldr	r3, [sp, #4]
 8004f1a:	e9c3 5600 	strd	r5, r6, [r3]
 8004f1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004f22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004f26:	e7ca      	b.n	8004ebe <__kernel_rem_pio2+0x4e6>
 8004f28:	3408      	adds	r4, #8
 8004f2a:	ab4a      	add	r3, sp, #296	; 0x128
 8004f2c:	441c      	add	r4, r3
 8004f2e:	462e      	mov	r6, r5
 8004f30:	2000      	movs	r0, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	da36      	bge.n	8004fa6 <__kernel_rem_pio2+0x5ce>
 8004f38:	f1bb 0f00 	cmp.w	fp, #0
 8004f3c:	d039      	beq.n	8004fb2 <__kernel_rem_pio2+0x5da>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f44:	9c01      	ldr	r4, [sp, #4]
 8004f46:	e9c4 2300 	strd	r2, r3, [r4]
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004f52:	f7fb f93d 	bl	80001d0 <__aeabi_dsub>
 8004f56:	ae4c      	add	r6, sp, #304	; 0x130
 8004f58:	2401      	movs	r4, #1
 8004f5a:	42a5      	cmp	r5, r4
 8004f5c:	da2c      	bge.n	8004fb8 <__kernel_rem_pio2+0x5e0>
 8004f5e:	f1bb 0f00 	cmp.w	fp, #0
 8004f62:	d002      	beq.n	8004f6a <__kernel_rem_pio2+0x592>
 8004f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f68:	4619      	mov	r1, r3
 8004f6a:	9b01      	ldr	r3, [sp, #4]
 8004f6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004f70:	e7a5      	b.n	8004ebe <__kernel_rem_pio2+0x4e6>
 8004f72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004f76:	eb0d 0403 	add.w	r4, sp, r3
 8004f7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004f7e:	2000      	movs	r0, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	da09      	bge.n	8004f9a <__kernel_rem_pio2+0x5c2>
 8004f86:	f1bb 0f00 	cmp.w	fp, #0
 8004f8a:	d002      	beq.n	8004f92 <__kernel_rem_pio2+0x5ba>
 8004f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f90:	4619      	mov	r1, r3
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	e9c3 0100 	strd	r0, r1, [r3]
 8004f98:	e791      	b.n	8004ebe <__kernel_rem_pio2+0x4e6>
 8004f9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f9e:	f7fb f919 	bl	80001d4 <__adddf3>
 8004fa2:	3d01      	subs	r5, #1
 8004fa4:	e7ed      	b.n	8004f82 <__kernel_rem_pio2+0x5aa>
 8004fa6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004faa:	f7fb f913 	bl	80001d4 <__adddf3>
 8004fae:	3e01      	subs	r6, #1
 8004fb0:	e7c0      	b.n	8004f34 <__kernel_rem_pio2+0x55c>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	e7c5      	b.n	8004f44 <__kernel_rem_pio2+0x56c>
 8004fb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004fbc:	f7fb f90a 	bl	80001d4 <__adddf3>
 8004fc0:	3401      	adds	r4, #1
 8004fc2:	e7ca      	b.n	8004f5a <__kernel_rem_pio2+0x582>
 8004fc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004fcc:	9b02      	ldr	r3, [sp, #8]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	f7fb f8fb 	bl	80001d4 <__adddf3>
 8004fde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4649      	mov	r1, r9
 8004fea:	f7fb f8f1 	bl	80001d0 <__aeabi_dsub>
 8004fee:	4632      	mov	r2, r6
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	f7fb f8ef 	bl	80001d4 <__adddf3>
 8004ff6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004ffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ffe:	ed8a 7b00 	vstr	d7, [sl]
 8005002:	e76e      	b.n	8004ee2 <__kernel_rem_pio2+0x50a>
 8005004:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005008:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800500c:	4640      	mov	r0, r8
 800500e:	4632      	mov	r2, r6
 8005010:	463b      	mov	r3, r7
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb f8de 	bl	80001d4 <__adddf3>
 8005018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4640      	mov	r0, r8
 8005022:	4649      	mov	r1, r9
 8005024:	f7fb f8d4 	bl	80001d0 <__aeabi_dsub>
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	f7fb f8d2 	bl	80001d4 <__adddf3>
 8005030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005038:	ed84 7b00 	vstr	d7, [r4]
 800503c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005040:	e755      	b.n	8004eee <__kernel_rem_pio2+0x516>
 8005042:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005046:	f7fb f8c5 	bl	80001d4 <__adddf3>
 800504a:	3d01      	subs	r5, #1
 800504c:	e759      	b.n	8004f02 <__kernel_rem_pio2+0x52a>
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	9a01      	ldr	r2, [sp, #4]
 8005052:	601d      	str	r5, [r3, #0]
 8005054:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005058:	605c      	str	r4, [r3, #4]
 800505a:	609f      	str	r7, [r3, #8]
 800505c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005060:	60d3      	str	r3, [r2, #12]
 8005062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005066:	6110      	str	r0, [r2, #16]
 8005068:	6153      	str	r3, [r2, #20]
 800506a:	e728      	b.n	8004ebe <__kernel_rem_pio2+0x4e6>
 800506c:	41700000 	.word	0x41700000
 8005070:	3e700000 	.word	0x3e700000
 8005074:	00000000 	.word	0x00000000

08005078 <__kernel_sin>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	ed2d 8b04 	vpush	{d8-d9}
 8005080:	eeb0 8a41 	vmov.f32	s16, s2
 8005084:	eef0 8a61 	vmov.f32	s17, s3
 8005088:	ec55 4b10 	vmov	r4, r5, d0
 800508c:	b083      	sub	sp, #12
 800508e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005092:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005096:	9001      	str	r0, [sp, #4]
 8005098:	da06      	bge.n	80050a8 <__kernel_sin+0x30>
 800509a:	ee10 0a10 	vmov	r0, s0
 800509e:	4629      	mov	r1, r5
 80050a0:	f7fb fce8 	bl	8000a74 <__aeabi_d2iz>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d051      	beq.n	800514c <__kernel_sin+0xd4>
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb fa46 	bl	8000540 <__aeabi_dmul>
 80050b4:	4682      	mov	sl, r0
 80050b6:	468b      	mov	fp, r1
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4620      	mov	r0, r4
 80050be:	4629      	mov	r1, r5
 80050c0:	f7fb fa3e 	bl	8000540 <__aeabi_dmul>
 80050c4:	a341      	add	r3, pc, #260	; (adr r3, 80051cc <__kernel_sin+0x154>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	4680      	mov	r8, r0
 80050cc:	4689      	mov	r9, r1
 80050ce:	4650      	mov	r0, sl
 80050d0:	4659      	mov	r1, fp
 80050d2:	f7fb fa35 	bl	8000540 <__aeabi_dmul>
 80050d6:	a33f      	add	r3, pc, #252	; (adr r3, 80051d4 <__kernel_sin+0x15c>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7fb f878 	bl	80001d0 <__aeabi_dsub>
 80050e0:	4652      	mov	r2, sl
 80050e2:	465b      	mov	r3, fp
 80050e4:	f7fb fa2c 	bl	8000540 <__aeabi_dmul>
 80050e8:	a33c      	add	r3, pc, #240	; (adr r3, 80051dc <__kernel_sin+0x164>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f7fb f871 	bl	80001d4 <__adddf3>
 80050f2:	4652      	mov	r2, sl
 80050f4:	465b      	mov	r3, fp
 80050f6:	f7fb fa23 	bl	8000540 <__aeabi_dmul>
 80050fa:	a33a      	add	r3, pc, #232	; (adr r3, 80051e4 <__kernel_sin+0x16c>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f7fb f866 	bl	80001d0 <__aeabi_dsub>
 8005104:	4652      	mov	r2, sl
 8005106:	465b      	mov	r3, fp
 8005108:	f7fb fa1a 	bl	8000540 <__aeabi_dmul>
 800510c:	a337      	add	r3, pc, #220	; (adr r3, 80051ec <__kernel_sin+0x174>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f85f 	bl	80001d4 <__adddf3>
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	b9eb      	cbnz	r3, 800515a <__kernel_sin+0xe2>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4650      	mov	r0, sl
 8005124:	4659      	mov	r1, fp
 8005126:	f7fb fa0b 	bl	8000540 <__aeabi_dmul>
 800512a:	a325      	add	r3, pc, #148	; (adr r3, 80051c0 <__kernel_sin+0x148>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f84e 	bl	80001d0 <__aeabi_dsub>
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	f7fb fa02 	bl	8000540 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb f846 	bl	80001d4 <__adddf3>
 8005148:	4604      	mov	r4, r0
 800514a:	460d      	mov	r5, r1
 800514c:	ec45 4b10 	vmov	d0, r4, r5
 8005150:	b003      	add	sp, #12
 8005152:	ecbd 8b04 	vpop	{d8-d9}
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <__kernel_sin+0x150>)
 800515c:	ec51 0b18 	vmov	r0, r1, d8
 8005160:	2200      	movs	r2, #0
 8005162:	f7fb f9ed 	bl	8000540 <__aeabi_dmul>
 8005166:	4632      	mov	r2, r6
 8005168:	ec41 0b19 	vmov	d9, r0, r1
 800516c:	463b      	mov	r3, r7
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb f9e5 	bl	8000540 <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	ec51 0b19 	vmov	r0, r1, d9
 800517e:	f7fb f827 	bl	80001d0 <__aeabi_dsub>
 8005182:	4652      	mov	r2, sl
 8005184:	465b      	mov	r3, fp
 8005186:	f7fb f9db 	bl	8000540 <__aeabi_dmul>
 800518a:	ec53 2b18 	vmov	r2, r3, d8
 800518e:	f7fb f81f 	bl	80001d0 <__aeabi_dsub>
 8005192:	a30b      	add	r3, pc, #44	; (adr r3, 80051c0 <__kernel_sin+0x148>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	4606      	mov	r6, r0
 800519a:	460f      	mov	r7, r1
 800519c:	4640      	mov	r0, r8
 800519e:	4649      	mov	r1, r9
 80051a0:	f7fb f9ce 	bl	8000540 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb f812 	bl	80001d4 <__adddf3>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fb f80a 	bl	80001d0 <__aeabi_dsub>
 80051bc:	e7c4      	b.n	8005148 <__kernel_sin+0xd0>
 80051be:	bf00      	nop
 80051c0:	55555549 	.word	0x55555549
 80051c4:	3fc55555 	.word	0x3fc55555
 80051c8:	3fe00000 	.word	0x3fe00000
 80051cc:	5acfd57c 	.word	0x5acfd57c
 80051d0:	3de5d93a 	.word	0x3de5d93a
 80051d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80051d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80051dc:	57b1fe7d 	.word	0x57b1fe7d
 80051e0:	3ec71de3 	.word	0x3ec71de3
 80051e4:	19c161d5 	.word	0x19c161d5
 80051e8:	3f2a01a0 	.word	0x3f2a01a0
 80051ec:	1110f8a6 	.word	0x1110f8a6
 80051f0:	3f811111 	.word	0x3f811111

080051f4 <with_errno>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	4616      	mov	r6, r2
 80051fc:	f7fe fec2 	bl	8003f84 <__errno>
 8005200:	4629      	mov	r1, r5
 8005202:	6006      	str	r6, [r0, #0]
 8005204:	4620      	mov	r0, r4
 8005206:	bd70      	pop	{r4, r5, r6, pc}

08005208 <xflow>:
 8005208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800520a:	4614      	mov	r4, r2
 800520c:	461d      	mov	r5, r3
 800520e:	b108      	cbz	r0, 8005214 <xflow+0xc>
 8005210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005214:	e9cd 2300 	strd	r2, r3, [sp]
 8005218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800521c:	4620      	mov	r0, r4
 800521e:	4629      	mov	r1, r5
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	2222      	movs	r2, #34	; 0x22
 8005226:	b003      	add	sp, #12
 8005228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800522c:	f7ff bfe2 	b.w	80051f4 <with_errno>

08005230 <__math_uflow>:
 8005230:	b508      	push	{r3, lr}
 8005232:	2200      	movs	r2, #0
 8005234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005238:	f7ff ffe6 	bl	8005208 <xflow>
 800523c:	ec41 0b10 	vmov	d0, r0, r1
 8005240:	bd08      	pop	{r3, pc}

08005242 <__math_oflow>:
 8005242:	b508      	push	{r3, lr}
 8005244:	2200      	movs	r2, #0
 8005246:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800524a:	f7ff ffdd 	bl	8005208 <xflow>
 800524e:	ec41 0b10 	vmov	d0, r0, r1
 8005252:	bd08      	pop	{r3, pc}

08005254 <fabs>:
 8005254:	ec51 0b10 	vmov	r0, r1, d0
 8005258:	ee10 2a10 	vmov	r2, s0
 800525c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005260:	ec43 2b10 	vmov	d0, r2, r3
 8005264:	4770      	bx	lr

08005266 <finite>:
 8005266:	b082      	sub	sp, #8
 8005268:	ed8d 0b00 	vstr	d0, [sp]
 800526c:	9801      	ldr	r0, [sp, #4]
 800526e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005272:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005276:	0fc0      	lsrs	r0, r0, #31
 8005278:	b002      	add	sp, #8
 800527a:	4770      	bx	lr
 800527c:	0000      	movs	r0, r0
	...

08005280 <floor>:
 8005280:	ec51 0b10 	vmov	r0, r1, d0
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800528c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005290:	2e13      	cmp	r6, #19
 8005292:	ee10 5a10 	vmov	r5, s0
 8005296:	ee10 8a10 	vmov	r8, s0
 800529a:	460c      	mov	r4, r1
 800529c:	dc32      	bgt.n	8005304 <floor+0x84>
 800529e:	2e00      	cmp	r6, #0
 80052a0:	da14      	bge.n	80052cc <floor+0x4c>
 80052a2:	a333      	add	r3, pc, #204	; (adr r3, 8005370 <floor+0xf0>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fa ff94 	bl	80001d4 <__adddf3>
 80052ac:	2200      	movs	r2, #0
 80052ae:	2300      	movs	r3, #0
 80052b0:	f7fb fbd6 	bl	8000a60 <__aeabi_dcmpgt>
 80052b4:	b138      	cbz	r0, 80052c6 <floor+0x46>
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	da57      	bge.n	800536a <floor+0xea>
 80052ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80052be:	431d      	orrs	r5, r3
 80052c0:	d001      	beq.n	80052c6 <floor+0x46>
 80052c2:	4c2d      	ldr	r4, [pc, #180]	; (8005378 <floor+0xf8>)
 80052c4:	2500      	movs	r5, #0
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	e025      	b.n	8005318 <floor+0x98>
 80052cc:	4f2b      	ldr	r7, [pc, #172]	; (800537c <floor+0xfc>)
 80052ce:	4137      	asrs	r7, r6
 80052d0:	ea01 0307 	and.w	r3, r1, r7
 80052d4:	4303      	orrs	r3, r0
 80052d6:	d01f      	beq.n	8005318 <floor+0x98>
 80052d8:	a325      	add	r3, pc, #148	; (adr r3, 8005370 <floor+0xf0>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fa ff79 	bl	80001d4 <__adddf3>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	f7fb fbbb 	bl	8000a60 <__aeabi_dcmpgt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0eb      	beq.n	80052c6 <floor+0x46>
 80052ee:	2c00      	cmp	r4, #0
 80052f0:	bfbe      	ittt	lt
 80052f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80052f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80052fa:	19a4      	addlt	r4, r4, r6
 80052fc:	ea24 0407 	bic.w	r4, r4, r7
 8005300:	2500      	movs	r5, #0
 8005302:	e7e0      	b.n	80052c6 <floor+0x46>
 8005304:	2e33      	cmp	r6, #51	; 0x33
 8005306:	dd0b      	ble.n	8005320 <floor+0xa0>
 8005308:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800530c:	d104      	bne.n	8005318 <floor+0x98>
 800530e:	ee10 2a10 	vmov	r2, s0
 8005312:	460b      	mov	r3, r1
 8005314:	f7fa ff5e 	bl	80001d4 <__adddf3>
 8005318:	ec41 0b10 	vmov	d0, r0, r1
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	fa23 f707 	lsr.w	r7, r3, r7
 800532c:	4207      	tst	r7, r0
 800532e:	d0f3      	beq.n	8005318 <floor+0x98>
 8005330:	a30f      	add	r3, pc, #60	; (adr r3, 8005370 <floor+0xf0>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ff4d 	bl	80001d4 <__adddf3>
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	f7fb fb8f 	bl	8000a60 <__aeabi_dcmpgt>
 8005342:	2800      	cmp	r0, #0
 8005344:	d0bf      	beq.n	80052c6 <floor+0x46>
 8005346:	2c00      	cmp	r4, #0
 8005348:	da02      	bge.n	8005350 <floor+0xd0>
 800534a:	2e14      	cmp	r6, #20
 800534c:	d103      	bne.n	8005356 <floor+0xd6>
 800534e:	3401      	adds	r4, #1
 8005350:	ea25 0507 	bic.w	r5, r5, r7
 8005354:	e7b7      	b.n	80052c6 <floor+0x46>
 8005356:	2301      	movs	r3, #1
 8005358:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800535c:	fa03 f606 	lsl.w	r6, r3, r6
 8005360:	4435      	add	r5, r6
 8005362:	4545      	cmp	r5, r8
 8005364:	bf38      	it	cc
 8005366:	18e4      	addcc	r4, r4, r3
 8005368:	e7f2      	b.n	8005350 <floor+0xd0>
 800536a:	2500      	movs	r5, #0
 800536c:	462c      	mov	r4, r5
 800536e:	e7aa      	b.n	80052c6 <floor+0x46>
 8005370:	8800759c 	.word	0x8800759c
 8005374:	7e37e43c 	.word	0x7e37e43c
 8005378:	bff00000 	.word	0xbff00000
 800537c:	000fffff 	.word	0x000fffff

08005380 <scalbn>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	ec55 4b10 	vmov	r4, r5, d0
 8005386:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800538a:	4606      	mov	r6, r0
 800538c:	462b      	mov	r3, r5
 800538e:	b99a      	cbnz	r2, 80053b8 <scalbn+0x38>
 8005390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005394:	4323      	orrs	r3, r4
 8005396:	d036      	beq.n	8005406 <scalbn+0x86>
 8005398:	4b39      	ldr	r3, [pc, #228]	; (8005480 <scalbn+0x100>)
 800539a:	4629      	mov	r1, r5
 800539c:	ee10 0a10 	vmov	r0, s0
 80053a0:	2200      	movs	r2, #0
 80053a2:	f7fb f8cd 	bl	8000540 <__aeabi_dmul>
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <scalbn+0x104>)
 80053a8:	429e      	cmp	r6, r3
 80053aa:	4604      	mov	r4, r0
 80053ac:	460d      	mov	r5, r1
 80053ae:	da10      	bge.n	80053d2 <scalbn+0x52>
 80053b0:	a32b      	add	r3, pc, #172	; (adr r3, 8005460 <scalbn+0xe0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	e03a      	b.n	800542e <scalbn+0xae>
 80053b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80053bc:	428a      	cmp	r2, r1
 80053be:	d10c      	bne.n	80053da <scalbn+0x5a>
 80053c0:	ee10 2a10 	vmov	r2, s0
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fa ff04 	bl	80001d4 <__adddf3>
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	e019      	b.n	8005406 <scalbn+0x86>
 80053d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053d6:	460b      	mov	r3, r1
 80053d8:	3a36      	subs	r2, #54	; 0x36
 80053da:	4432      	add	r2, r6
 80053dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80053e0:	428a      	cmp	r2, r1
 80053e2:	dd08      	ble.n	80053f6 <scalbn+0x76>
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	a120      	add	r1, pc, #128	; (adr r1, 8005468 <scalbn+0xe8>)
 80053e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ec:	da1c      	bge.n	8005428 <scalbn+0xa8>
 80053ee:	a120      	add	r1, pc, #128	; (adr r1, 8005470 <scalbn+0xf0>)
 80053f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f4:	e018      	b.n	8005428 <scalbn+0xa8>
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	dd08      	ble.n	800540c <scalbn+0x8c>
 80053fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005406:	ec45 4b10 	vmov	d0, r4, r5
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005410:	da19      	bge.n	8005446 <scalbn+0xc6>
 8005412:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005416:	429e      	cmp	r6, r3
 8005418:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800541c:	dd0a      	ble.n	8005434 <scalbn+0xb4>
 800541e:	a112      	add	r1, pc, #72	; (adr r1, 8005468 <scalbn+0xe8>)
 8005420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e2      	bne.n	80053ee <scalbn+0x6e>
 8005428:	a30f      	add	r3, pc, #60	; (adr r3, 8005468 <scalbn+0xe8>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f887 	bl	8000540 <__aeabi_dmul>
 8005432:	e7cb      	b.n	80053cc <scalbn+0x4c>
 8005434:	a10a      	add	r1, pc, #40	; (adr r1, 8005460 <scalbn+0xe0>)
 8005436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0b8      	beq.n	80053b0 <scalbn+0x30>
 800543e:	a10e      	add	r1, pc, #56	; (adr r1, 8005478 <scalbn+0xf8>)
 8005440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005444:	e7b4      	b.n	80053b0 <scalbn+0x30>
 8005446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800544a:	3236      	adds	r2, #54	; 0x36
 800544c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005454:	4620      	mov	r0, r4
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <scalbn+0x108>)
 8005458:	2200      	movs	r2, #0
 800545a:	e7e8      	b.n	800542e <scalbn+0xae>
 800545c:	f3af 8000 	nop.w
 8005460:	c2f8f359 	.word	0xc2f8f359
 8005464:	01a56e1f 	.word	0x01a56e1f
 8005468:	8800759c 	.word	0x8800759c
 800546c:	7e37e43c 	.word	0x7e37e43c
 8005470:	8800759c 	.word	0x8800759c
 8005474:	fe37e43c 	.word	0xfe37e43c
 8005478:	c2f8f359 	.word	0xc2f8f359
 800547c:	81a56e1f 	.word	0x81a56e1f
 8005480:	43500000 	.word	0x43500000
 8005484:	ffff3cb0 	.word	0xffff3cb0
 8005488:	3c900000 	.word	0x3c900000

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
