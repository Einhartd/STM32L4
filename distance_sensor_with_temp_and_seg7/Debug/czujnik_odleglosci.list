
czujnik_odleglosci.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800a298  0800a298  0001a298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a65c  0800a65c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a664  0800a664  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001d4  0800a840  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a840  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016325  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e1  00000000  00000000  0003656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f95  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6d7  00000000  00000000  0003ba05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f21  00000000  00000000  000660dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010838b  00000000  00000000  0007effd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006450  00000000  00000000  00187388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a280 	.word	0x0800a280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a280 	.word	0x0800a280

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ec8:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <MX_ADC1_Init+0xe8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f2a:	f001 f97d 	bl	8002228 <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f34:	f000 fa3e 	bl	80013b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f44:	f002 f912 	bl	800316c <HAL_ADCEx_MultiModeConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4e:	f000 fa31 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_ADC1_Init+0xec>)
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	237f      	movs	r3, #127	; 0x7f
 8000f60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2304      	movs	r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f70:	f001 fb72 	bl	8002658 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f7a:	f000 fa1b 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001f0 	.word	0x200001f0
 8000f8c:	50040000 	.word	0x50040000
 8000f90:	3ef08000 	.word	0x3ef08000

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ac      	sub	sp, #176	; 0xb0
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2288      	movs	r2, #136	; 0x88
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fa12 	bl	80083de <memset>
  if(adcHandle->Instance==ADC1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d146      	bne.n	8001052 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fcc7 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001000:	f000 f9d8 	bl	80013b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001034:	2301      	movs	r3, #1
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800103a:	230b      	movs	r3, #11
 800103c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_ADC_MspInit+0xd0>)
 800104e:	f002 fa4f 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	37b0      	adds	r7, #176	; 0xb0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	50040000 	.word	0x50040000
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400

08001068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <MX_GPIO_Init+0x110>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <MX_GPIO_Init+0x110>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <MX_GPIO_Init+0x110>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <MX_GPIO_Init+0x110>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <MX_GPIO_Init+0x110>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <MX_GPIO_Init+0x110>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0x110>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <MX_GPIO_Init+0x110>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_GPIO_Init+0x110>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	482c      	ldr	r0, [pc, #176]	; (800117c <MX_GPIO_Init+0x114>)
 80010cc:	f002 fbba 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80010d0:	2200      	movs	r2, #0
 80010d2:	f64e 0106 	movw	r1, #59398	; 0xe806
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <MX_GPIO_Init+0x118>)
 80010d8:	f002 fbb4 	bl	8003844 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4827      	ldr	r0, [pc, #156]	; (8001180 <MX_GPIO_Init+0x118>)
 80010e4:	f002 fbae 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f002 fba7 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_G_Pin;
 80010f6:	2310      	movs	r3, #16
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_G_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	481b      	ldr	r0, [pc, #108]	; (800117c <MX_GPIO_Init+0x114>)
 800110e:	f002 f9ef 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 8001112:	f64e 0306 	movw	r3, #59398	; 0xe806
 8001116:	60fb      	str	r3, [r7, #12]
                          |SEG_F_Pin|SEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4815      	ldr	r0, [pc, #84]	; (8001180 <MX_GPIO_Init+0x118>)
 800112c:	f002 f9e0 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001136:	2311      	movs	r3, #17
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_GPIO_Init+0x118>)
 800114a:	f002 f9d1 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 800114e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001154:	2311      	movs	r3, #17
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f002 f9c1 	bl	80034f0 <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	48000800 	.word	0x48000800
 8001180:	48000400 	.word	0x48000400

08001184 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(ch=='\n'){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d102      	bne.n	8001198 <__io_putchar+0x14>
		__io_putchar('\r');
 8001192:	200d      	movs	r0, #13
 8001194:	f7ff fff6 	bl	8001184 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001198:	1d39      	adds	r1, r7, #4
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	2201      	movs	r2, #1
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <__io_putchar+0x2c>)
 80011a2:	f005 fe6b 	bl	8006e7c <HAL_UART_Transmit>
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000032c 	.word	0x2000032c

080011b4 <calc_sound_speed>:

static float calc_sound_speed(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <calc_sound_speed+0x54>)
 80011bc:	f001 fa3e 	bl	800263c <HAL_ADC_GetValue>
 80011c0:	6078      	str	r0, [r7, #4]
	float temp = adc_value * 330.0f / 4096.0f / 4.0f;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800120c <calc_sound_speed+0x58>
 80011d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001210 <calc_sound_speed+0x5c>
 80011d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	edc7 7a00 	vstr	s15, [r7]
	return 331.8f + 0.6f * temp;
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001214 <calc_sound_speed+0x60>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001218 <calc_sound_speed+0x64>
 80011f8:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f0 	.word	0x200001f0
 800120c:	43a50000 	.word	0x43a50000
 8001210:	45800000 	.word	0x45800000
 8001214:	3f19999a 	.word	0x3f19999a
 8001218:	43a5e666 	.word	0x43a5e666

0800121c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800121c:	b580      	push	{r7, lr}
 800121e:	ed2d 8b02 	vpush	{d8}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(htim==&htim6){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d102      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x1a>
		seg7_update();
 8001230:	f000 f9cc 	bl	80015cc <seg7_update>
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
		uint32_t calculated_value = (stop-start) * calc_sound_speed() / 20000.0f;
		seg7_show((uint32_t)calculated_value);
		//seg7_show((stop - start) / 58);
	}
}
 8001234:	e026      	b.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x68>
	else if(htim==&htim2){
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d122      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x68>
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800123e:	2100      	movs	r1, #0
 8001240:	4814      	ldr	r0, [pc, #80]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001242:	f004 ff67 	bl	8006114 <HAL_TIM_ReadCapturedValue>
 8001246:	6178      	str	r0, [r7, #20]
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001248:	2104      	movs	r1, #4
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800124c:	f004 ff62 	bl	8006114 <HAL_TIM_ReadCapturedValue>
 8001250:	6138      	str	r0, [r7, #16]
		uint32_t calculated_value = (stop-start) * calc_sound_speed() / 20000.0f;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001260:	f7ff ffa8 	bl	80011b4 <calc_sound_speed>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	ee28 7a27 	vmul.f32	s14, s16, s15
 800126c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001298 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001278:	ee17 3a90 	vmov	r3, s15
 800127c:	60fb      	str	r3, [r7, #12]
		seg7_show((uint32_t)calculated_value);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f920 	bl	80014c4 <seg7_show>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	ecbd 8b02 	vpop	{d8}
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200002e0 	.word	0x200002e0
 8001294:	20000294 	.word	0x20000294
 8001298:	469c4000 	.word	0x469c4000

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fd41 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f834 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f7ff fede 	bl	8001068 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ac:	f000 fc86 	bl	8001bbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012b0:	f000 fb0a 	bl	80018c8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80012b4:	f000 fbb2 	bl	8001a1c <MX_TIM6_Init>
  MX_OPAMP2_Init();
 80012b8:	f000 f882 	bl	80013c0 <MX_OPAMP2_Init>
  MX_ADC1_Init();
 80012bc:	f7ff fdf2 	bl	8000ea4 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //	SETTING UP TIMERS

  HAL_TIM_Base_Start_IT(&htim6);
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <main+0x64>)
 80012c2:	f004 f875 	bl	80053b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <main+0x68>)
 80012c8:	f004 f872 	bl	80053b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <main+0x68>)
 80012d0:	f004 faa8 	bl	8005824 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80012d4:	2104      	movs	r1, #4
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <main+0x68>)
 80012d8:	f004 faa4 	bl	8005824 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012dc:	2108      	movs	r1, #8
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <main+0x68>)
 80012e0:	f004 f938 	bl	8005554 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012e4:	217f      	movs	r1, #127	; 0x7f
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <main+0x6c>)
 80012e8:	f001 fee0 	bl	80030ac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <main+0x6c>)
 80012ee:	f001 f8eb 	bl	80024c8 <HAL_ADC_Start>

  HAL_OPAMP_SelfCalibrate(&hopamp2);
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <main+0x70>)
 80012f4:	f002 fbc5 	bl	8003a82 <HAL_OPAMP_SelfCalibrate>
  HAL_OPAMP_Start(&hopamp2);
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <main+0x70>)
 80012fa:	f002 fb91 	bl	8003a20 <HAL_OPAMP_Start>


  while (1)
 80012fe:	e7fe      	b.n	80012fe <main+0x62>
 8001300:	200002e0 	.word	0x200002e0
 8001304:	20000294 	.word	0x20000294
 8001308:	200001f0 	.word	0x200001f0
 800130c:	20000254 	.word	0x20000254

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b096      	sub	sp, #88	; 0x58
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2244      	movs	r2, #68	; 0x44
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f007 f85d 	bl	80083de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001332:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001336:	f002 fcd1 	bl	8003cdc <HAL_PWREx_ControlVoltageScaling>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001340:	f000 f838 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001344:	2310      	movs	r3, #16
 8001346:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001350:	2360      	movs	r3, #96	; 0x60
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001358:	2301      	movs	r3, #1
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001360:	2328      	movs	r3, #40	; 0x28
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001364:	2307      	movs	r3, #7
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fd07 	bl	8003d88 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001380:	f000 f818 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2303      	movs	r3, #3
 800138a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f8cf 	bl	8004540 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013a8:	f000 f804 	bl	80013b4 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3758      	adds	r7, #88	; 0x58
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_OPAMP2_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013d0:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_4;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013e6:	2210      	movs	r2, #16
 80013e8:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_OPAMP2_Init+0x4c>)
 80013f8:	f002 fa3c 	bl	8003874 <HAL_OPAMP_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_OPAMP2_Init+0x46>
  {
    Error_Handler();
 8001402:	f7ff ffd7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000254 	.word	0x20000254
 8001410:	40007810 	.word	0x40007810

08001414 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_OPAMP_MspInit+0xa4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d13c      	bne.n	80014b0 <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* OPAMP2 clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 800143c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_OPAMP_MspInit+0xa8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PA7     ------> OPAMP2_VINM
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147e:	23c0      	movs	r3, #192	; 0xc0
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f002 f82c 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800149c:	230b      	movs	r3, #11
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_OPAMP_MspInit+0xac>)
 80014ac:	f002 f820 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40007810 	.word	0x40007810
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400

080014c4 <seg7_show>:
#include "gpio.h"

static uint32_t actual_value;
static uint32_t active_digit;

void seg7_show(uint32_t value){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	actual_value = value;
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <seg7_show+0x1c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000288 	.word	0x20000288

080014e4 <set_output>:

static void set_output(uint8_t mask){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <set_output+0x98>)
 80014fe:	f002 f9a1 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <set_output+0x98>)
 8001512:	f002 f997 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	2102      	movs	r1, #2
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <set_output+0x98>)
 8001524:	f002 f98e 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <set_output+0x98>)
 8001538:	f002 f984 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	2104      	movs	r1, #4
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <set_output+0x98>)
 800154a:	f002 f97b 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <set_output+0x98>)
 800155e:	f002 f971 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	2110      	movs	r1, #16
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <set_output+0x9c>)
 8001570:	f002 f968 	bl	8003844 <HAL_GPIO_WritePin>

}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800

08001584 <seg7_show_digit>:

void seg7_show_digit(uint32_t value){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	const uint8_t digit[] = {
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <seg7_show_digit+0x40>)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	ca07      	ldmia	r2, {r0, r1, r2}
 8001594:	c303      	stmia	r3!, {r0, r1}
 8001596:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111,
	};

	set_output(digit[value % 10]);
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <seg7_show_digit+0x44>)
 800159c:	fba3 2301 	umull	r2, r3, r3, r1
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	1aca      	subs	r2, r1, r3
 80015ac:	f102 0318 	add.w	r3, r2, #24
 80015b0:	443b      	add	r3, r7
 80015b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff94 	bl	80014e4 <set_output>
}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	0800a298 	.word	0x0800a298
 80015c8:	cccccccd 	.word	0xcccccccd

080015cc <seg7_update>:

void seg7_update(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <seg7_update+0x78>)
 80015d8:	f002 f934 	bl	8003844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f002 f92d 	bl	8003844 <HAL_GPIO_WritePin>

	switch(active_digit){
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <seg7_update+0x7c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <seg7_update+0x2c>
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00f      	beq.n	8001616 <seg7_update+0x4a>
		seg7_show_digit(actual_value/10);
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
		active_digit = 0;
		break;
	}
}
 80015f6:	e022      	b.n	800163e <seg7_update+0x72>
		seg7_show_digit(actual_value);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <seg7_update+0x80>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ffc1 	bl	8001584 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <seg7_update+0x78>)
 800160a:	f002 f91b 	bl	8003844 <HAL_GPIO_WritePin>
		active_digit = 1;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <seg7_update+0x7c>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
		break;
 8001614:	e013      	b.n	800163e <seg7_update+0x72>
		seg7_show_digit(actual_value/10);
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <seg7_update+0x80>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <seg7_update+0x84>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffae 	bl	8001584 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f002 f907 	bl	8003844 <HAL_GPIO_WritePin>
		active_digit = 0;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <seg7_update+0x7c>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		break;
 800163c:	bf00      	nop
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000400 	.word	0x48000400
 8001648:	2000028c 	.word	0x2000028c
 800164c:	20000288 	.word	0x20000288
 8001650:	cccccccd 	.word	0xcccccccd

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x44>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x44>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x44>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x44>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f000 fb72 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM2_IRQHandler+0x10>)
 80016f6:	f004 f991 	bl	8005a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000294 	.word	0x20000294

08001704 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM6_DAC_IRQHandler+0x10>)
 800170a:	f004 f987 	bl	8005a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002e0 	.word	0x200002e0

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001732:	f006 fea7 	bl	8008484 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
  return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_exit>:

void _exit (int status)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_kill>
  while (1) {}    /* Make sure we hang here */
 800175a:	e7fe      	b.n	800175a <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
  }

  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fce7 	bl	8001184 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
  }
  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f006 fe0c 	bl	8008484 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20018000 	.word	0x20018000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000290 	.word	0x20000290
 80018a0:	20000508 	.word	0x20000508

080018a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b092      	sub	sp, #72	; 0x48
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_TIM2_Init+0x14c>)
 8001912:	224f      	movs	r2, #79	; 0x4f
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <MX_TIM2_Init+0x14c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <MX_TIM2_Init+0x150>)
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_TIM2_Init+0x14c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192e:	4839      	ldr	r0, [pc, #228]	; (8001a14 <MX_TIM2_Init+0x14c>)
 8001930:	f003 fce6 	bl	8005300 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800193a:	f7ff fd3b 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001948:	4619      	mov	r1, r3
 800194a:	4832      	ldr	r0, [pc, #200]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800194c:	f004 fb18 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001956:	f7ff fd2d 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800195a:	482e      	ldr	r0, [pc, #184]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800195c:	f003 ff00 	bl	8005760 <HAL_TIM_IC_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001966:	f7ff fd25 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800196a:	482a      	ldr	r0, [pc, #168]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800196c:	f003 fd90 	bl	8005490 <HAL_TIM_PWM_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001976:	f7ff fd1d 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	4822      	ldr	r0, [pc, #136]	; (8001a14 <MX_TIM2_Init+0x14c>)
 800198a:	f005 f983 	bl	8006c94 <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001994:	f7ff fd0e 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM2_Init+0x14c>)
 80019b2:	f004 f935 	bl	8005c20 <HAL_TIM_IC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80019bc:	f7ff fcfa 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4810      	ldr	r0, [pc, #64]	; (8001a14 <MX_TIM2_Init+0x14c>)
 80019d2:	f004 f925 	bl	8005c20 <HAL_TIM_IC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80019dc:	f7ff fcea 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	; 0x60
 80019e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80019e4:	230a      	movs	r3, #10
 80019e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	2208      	movs	r2, #8
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM2_Init+0x14c>)
 80019f8:	f004 f9ae 	bl	8005d58 <HAL_TIM_PWM_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001a02:	f7ff fcd7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM2_Init+0x14c>)
 8001a08:	f000 f8a2 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3748      	adds	r7, #72	; 0x48
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000294 	.word	0x20000294
 8001a18:	0001869f 	.word	0x0001869f

08001a1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <MX_TIM6_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a34:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a42:	2263      	movs	r2, #99	; 0x63
 8001a44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a4e:	f003 fc57 	bl	8005300 <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a58:	f7ff fcac 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM6_Init+0x64>)
 8001a6a:	f005 f913 	bl	8006c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a74:	f7ff fc9e 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200002e0 	.word	0x200002e0
 8001a84:	40001000 	.word	0x40001000

08001a88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d131      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aea:	2301      	movs	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f001 fcfa 	bl	80034f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2108      	movs	r1, #8
 8001b00:	201c      	movs	r0, #28
 8001b02:	f001 fcbe 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b06:	201c      	movs	r0, #28
 8001b08:	f001 fcd7 	bl	80034ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b0c:	e018      	b.n	8001b40 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_TIM_Base_MspInit+0xc4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d113      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_TIM_Base_MspInit+0xc0>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	210a      	movs	r1, #10
 8001b34:	2036      	movs	r0, #54	; 0x36
 8001b36:	f001 fca4 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b3a:	2036      	movs	r0, #54	; 0x36
 8001b3c:	f001 fcbd 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40001000 	.word	0x40001000

08001b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d11c      	bne.n	8001bac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_TIM_MspPostInit+0x64>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_TIM_MspPostInit+0x64>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_TIM_MspPostInit+0x64>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001ba8:	f001 fca2 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400

08001bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <MX_USART2_UART_Init+0x5c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001c00:	f005 f8ee 	bl	8006de0 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f7ff fbd3 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000032c 	.word	0x2000032c
 8001c18:	40004400 	.word	0x40004400

08001c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0ac      	sub	sp, #176	; 0xb0
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2288      	movs	r2, #136	; 0x88
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 fbce 	bl	80083de <memset>
  if(uartHandle->Instance==USART2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0xb0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d13b      	bne.n	8001cc4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fe95 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c64:	f7ff fba6 	bl	80013b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c72:	6593      	str	r3, [r2, #88]	; 0x58
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_UART_MspInit+0xb4>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c98:	230c      	movs	r3, #12
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f001 fc16 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	37b0      	adds	r7, #176	; 0xb0
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff fde4 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f006 fbc5 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7ff fac9 	bl	800129c <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d18:	0800a66c 	.word	0x0800a66c
  ldr r2, =_sbss
 8001d1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d20:	20000504 	.word	0x20000504

08001d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_2_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 fb9b 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	200f      	movs	r0, #15
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fc84 	bl	8001654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_InitTick+0x70>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fba7 	bl	80034d6 <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d809      	bhi.n	8001da8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f001 fb71 	bl	8003482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_InitTick+0x74>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e004      	b.n	8001db8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e001      	b.n	8001db8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008
 8001df4:	200003b4 	.word	0x200003b4

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200003b4 	.word	0x200003b4

08001e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff ffee 	bl	8001df8 <HAL_GetTick>
 8001e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d005      	beq.n	8001e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_Delay+0x44>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e36:	bf00      	nop
 8001e38:	f7ff ffde 	bl	8001df8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8f7      	bhi.n	8001e38 <HAL_Delay+0x28>
  {
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008

08001e58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3360      	adds	r3, #96	; 0x60
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <LL_ADC_SetOffset+0x44>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	03fff000 	.word	0x03fff000

08001f08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3360      	adds	r3, #96	; 0x60
 8001f16:	461a      	mov	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3360      	adds	r3, #96	; 0x60
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3330      	adds	r3, #48	; 0x30
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	211f      	movs	r1, #31
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	f003 011f 	and.w	r1, r3, #31
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3314      	adds	r3, #20
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0e5b      	lsrs	r3, r3, #25
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	0d1b      	lsrs	r3, r3, #20
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2107      	movs	r1, #7
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	0d1b      	lsrs	r3, r3, #20
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	431a      	orrs	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0318 	and.w	r3, r3, #24
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <LL_ADC_SetChannelSingleDiff+0x44>)
 800203c:	40d9      	lsrs	r1, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	400b      	ands	r3, r1
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	0007ffff 	.word	0x0007ffff

08002060 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 031f 	and.w	r3, r3, #31
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800208c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6093      	str	r3, [r2, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b4:	d101      	bne.n	80020ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002104:	d101      	bne.n	800210a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <LL_ADC_IsEnabled+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_ADC_IsEnabled+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_IsDisableOngoing+0x18>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_IsDisableOngoing+0x1a>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c8:	f043 0204 	orr.w	r2, r3, #4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d101      	bne.n	80021f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d101      	bne.n	800221a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e130      	b.n	80024a4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe fe9f 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff19 	bl	80020a0 <LL_ADC_IsDeepPowerDownEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff feff 	bl	800207c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff34 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d115      	bne.n	80022ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff18 	bl	80020c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002298:	4b84      	ldr	r3, [pc, #528]	; (80024ac <HAL_ADC_Init+0x284>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <HAL_ADC_Init+0x288>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff16 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff76 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80022f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80c9 	bne.w	8002492 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c5 	bne.w	8002492 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002310:	f043 0202 	orr.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff23 	bl	8002168 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d115      	bne.n	8002354 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002328:	4862      	ldr	r0, [pc, #392]	; (80024b4 <HAL_ADC_Init+0x28c>)
 800232a:	f7ff ff1d 	bl	8002168 <LL_ADC_IsEnabled>
 800232e:	4604      	mov	r4, r0
 8002330:	4861      	ldr	r0, [pc, #388]	; (80024b8 <HAL_ADC_Init+0x290>)
 8002332:	f7ff ff19 	bl	8002168 <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	431c      	orrs	r4, r3
 800233a:	4860      	ldr	r0, [pc, #384]	; (80024bc <HAL_ADC_Init+0x294>)
 800233c:	f7ff ff14 	bl	8002168 <LL_ADC_IsEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	4323      	orrs	r3, r4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4619      	mov	r1, r3
 800234e:	485c      	ldr	r0, [pc, #368]	; (80024c0 <HAL_ADC_Init+0x298>)
 8002350:	f7ff fd82 	bl	8001e58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7e5b      	ldrb	r3, [r3, #25]
 8002358:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800235e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002364:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800236a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d106      	bne.n	8002390 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	045b      	lsls	r3, r3, #17
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <HAL_ADC_Init+0x29c>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	430b      	orrs	r3, r1
 80023be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff1c 	bl	8002202 <LL_ADC_INJ_IsConversionOngoing>
 80023ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d13d      	bne.n	800244e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13a      	bne.n	800244e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023dc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	69b9      	ldr	r1, [r7, #24]
 80023fe:	430b      	orrs	r3, r1
 8002400:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d118      	bne.n	800243e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800242e:	430a      	orrs	r2, r1
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	e007      	b.n	800244e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10c      	bne.n	8002470 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f023 010f 	bic.w	r1, r3, #15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	e007      	b.n	8002480 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 020f 	bic.w	r2, r2, #15
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
 8002490:	e007      	b.n	80024a2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3724      	adds	r7, #36	; 0x24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}
 80024ac:	20000000 	.word	0x20000000
 80024b0:	053e2d63 	.word	0x053e2d63
 80024b4:	50040000 	.word	0x50040000
 80024b8:	50040100 	.word	0x50040100
 80024bc:	50040200 	.word	0x50040200
 80024c0:	50040300 	.word	0x50040300
 80024c4:	fff0c007 	.word	0xfff0c007

080024c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d0:	4857      	ldr	r0, [pc, #348]	; (8002630 <HAL_ADC_Start+0x168>)
 80024d2:	f7ff fdc5 	bl	8002060 <LL_ADC_GetMultimode>
 80024d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fe7d 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 809c 	bne.w	8002622 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_Start+0x30>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e097      	b.n	8002628 <HAL_ADC_Start+0x160>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fc9b 	bl	8002e3c <ADC_Enable>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 8083 	bne.w	8002618 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_ADC_Start+0x16c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d002      	beq.n	8002536 <HAL_ADC_Start+0x6e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e000      	b.n	8002538 <HAL_ADC_Start+0x70>
 8002536:	4b40      	ldr	r3, [pc, #256]	; (8002638 <HAL_ADC_Start+0x170>)
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	4293      	cmp	r3, r2
 800253e:	d002      	beq.n	8002546 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255e:	d106      	bne.n	800256e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f023 0206 	bic.w	r2, r3, #6
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	659a      	str	r2, [r3, #88]	; 0x58
 800256c:	e002      	b.n	8002574 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	221c      	movs	r2, #28
 800257a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_ADC_Start+0x16c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_Start+0xcc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e000      	b.n	8002596 <HAL_ADC_Start+0xce>
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_ADC_Start+0x170>)
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	4293      	cmp	r3, r2
 800259c:	d008      	beq.n	80025b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d002      	beq.n	80025b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d114      	bne.n	80025da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fdee 	bl	80021b4 <LL_ADC_REG_StartConversion>
 80025d8:	e025      	b.n	8002626 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_ADC_Start+0x16c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d002      	beq.n	80025f6 <HAL_ADC_Start+0x12e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	e000      	b.n	80025f8 <HAL_ADC_Start+0x130>
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_ADC_Start+0x170>)
 80025f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00f      	beq.n	8002626 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800260e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
 8002616:	e006      	b.n	8002626 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002620:	e001      	b.n	8002626 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	50040300 	.word	0x50040300
 8002634:	50040100 	.word	0x50040100
 8002638:	50040000 	.word	0x50040000

0800263c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0b6      	sub	sp, #216	; 0xd8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x22>
 8002676:	2302      	movs	r3, #2
 8002678:	e3c9      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x7b6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fda8 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 83aa 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b02      	subs	r3, #2
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d81b      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0x8e>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_ADC_ConfigChannel+0x5c>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026cd 	.word	0x080026cd
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026dd 	.word	0x080026dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80026c4:	230c      	movs	r3, #12
 80026c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026ca:	e010      	b.n	80026ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80026cc:	2312      	movs	r3, #18
 80026ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026d2:	e00c      	b.n	80026ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80026d4:	2318      	movs	r3, #24
 80026d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026da:	e008      	b.n	80026ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80026dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026e4:	e003      	b.n	80026ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80026e6:	2306      	movs	r3, #6
 80026e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80026fc:	f7ff fc35 	bl	8001f6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fd69 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 800270a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fd75 	bl	8002202 <LL_ADC_INJ_IsConversionOngoing>
 8002718:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 81a4 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 819f 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	461a      	mov	r2, r3
 800273e:	f7ff fc40 	bl	8001fc2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00a      	beq.n	800277a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002774:	f7ff fba4 	bl	8001ec0 <LL_ADC_SetOffset>
 8002778:	e179      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fbc1 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x14e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fbb6 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x18c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fbab 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80027d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1a4>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e018      	b.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e004      	b.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fb7a 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fb5e 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x214>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb53 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	e01e      	b.n	80028aa <HAL_ADC_ConfigChannel+0x252>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fb48 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800288a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800289e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x26a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	e018      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x29c>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e004      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80028ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb17 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fafb 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x2da>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff faf0 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	e01e      	b.n	8002970 <HAL_ADC_ConfigChannel+0x318>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fae5 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002960:	2320      	movs	r3, #32
 8002962:	e004      	b.n	800296e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x330>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	e014      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x35a>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800299c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e004      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80029a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2102      	movs	r1, #2
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fab8 	bl	8001f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa9c 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x398>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2103      	movs	r1, #3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fa91 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 021f 	and.w	r2, r3, #31
 80029ee:	e017      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x3c8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2103      	movs	r1, #3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fa86 	bl	8001f08 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e003      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x3e0>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	e011      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x404>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d106      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2103      	movs	r1, #3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fa63 	bl	8001f34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fb78 	bl	8002168 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8140 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fac3 	bl	8002018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a8f      	ldr	r2, [pc, #572]	; (8002cd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	f040 8131 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x46e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	bf94      	ite	ls
 8002abe:	2301      	movls	r3, #1
 8002ac0:	2300      	movhi	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e019      	b.n	8002afa <HAL_ADC_ConfigChannel+0x4a2>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e003      	b.n	8002aea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d079      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x4c2>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0e9b      	lsrs	r3, r3, #26
 8002b10:	3301      	adds	r3, #1
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b18:	e015      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x4ee>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x50e>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	e017      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x53e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e003      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	ea42 0103 	orr.w	r1, r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x564>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	051b      	lsls	r3, r3, #20
 8002bba:	e018      	b.n	8002bee <HAL_ADC_ConfigChannel+0x596>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f003 021f 	and.w	r2, r3, #31
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	e081      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x5b6>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	3301      	adds	r3, #1
 8002c06:	069b      	lsls	r3, r3, #26
 8002c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0c:	e015      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x5e2>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x602>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	e017      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x632>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	61bb      	str	r3, [r7, #24]
  return result;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e003      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x65e>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	051b      	lsls	r3, r3, #20
 8002cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	e01e      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x69c>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	60fb      	str	r3, [r7, #12]
  return result;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e006      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x688>
 8002cd2:	bf00      	nop
 8002cd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f003 021f 	and.w	r2, r3, #31
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	3b1e      	subs	r3, #30
 8002cee:	051b      	lsls	r3, r3, #20
 8002cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7ff f961 	bl	8001fc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d07a      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d0c:	4843      	ldr	r0, [pc, #268]	; (8002e1c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d0e:	f7ff f8c9 	bl	8001ea4 <LL_ADC_GetCommonPathInternalCh>
 8002d12:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d12c      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d126      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x6e8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d15d      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4834      	ldr	r0, [pc, #208]	; (8002e1c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d4c:	f7ff f897 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_ADC_ConfigChannel+0x7d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a36      	ldr	r2, [pc, #216]	; (8002e30 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f9      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d78:	e040      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d118      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x74c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_ADC_ConfigChannel+0x7d0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d12d      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dac:	4619      	mov	r1, r3
 8002dae:	481b      	ldr	r0, [pc, #108]	; (8002e1c <HAL_ADC_ConfigChannel+0x7c4>)
 8002db0:	f7ff f865 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	e024      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d120      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dde:	4619      	mov	r1, r3
 8002de0:	480e      	ldr	r0, [pc, #56]	; (8002e1c <HAL_ADC_ConfigChannel+0x7c4>)
 8002de2:	f7ff f84c 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
 8002de6:	e00c      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	37d8      	adds	r7, #216	; 0xd8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	80080000 	.word	0x80080000
 8002e1c:	50040300 	.word	0x50040300
 8002e20:	c7520000 	.word	0xc7520000
 8002e24:	50040000 	.word	0x50040000
 8002e28:	50040200 	.word	0x50040200
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	053e2d63 	.word	0x053e2d63
 8002e34:	cb840000 	.word	0xcb840000
 8002e38:	80000001 	.word	0x80000001

08002e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f98b 	bl	8002168 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d169      	bne.n	8002f2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <ADC_Enable+0xfc>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e055      	b.n	8002f2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f946 	bl	8002118 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e8c:	482b      	ldr	r0, [pc, #172]	; (8002f3c <ADC_Enable+0x100>)
 8002e8e:	f7ff f809 	bl	8001ea4 <LL_ADC_GetCommonPathInternalCh>
 8002e92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <ADC_Enable+0x104>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <ADC_Enable+0x108>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe ff98 	bl	8001df8 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eca:	e028      	b.n	8002f1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f949 	bl	8002168 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f919 	bl	8002118 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ee6:	f7fe ff87 	bl	8001df8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d914      	bls.n	8002f1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d00d      	beq.n	8002f1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e007      	b.n	8002f2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d1cf      	bne.n	8002ecc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	8000003f 	.word	0x8000003f
 8002f3c:	50040300 	.word	0x50040300
 8002f40:	20000000 	.word	0x20000000
 8002f44:	053e2d63 	.word	0x053e2d63

08002f48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f91a 	bl	800218e <LL_ADC_IsDisableOngoing>
 8002f5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f901 	bl	8002168 <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d047      	beq.n	8002ffc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d144      	bne.n	8002ffc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030d 	and.w	r3, r3, #13
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10c      	bne.n	8002f9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f8db 	bl	8002140 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f92:	f7fe ff31 	bl	8001df8 <HAL_GetTick>
 8002f96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f98:	e029      	b.n	8002fee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e023      	b.n	8002ffe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fb6:	f7fe ff1f 	bl	8001df8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d914      	bls.n	8002fee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0210 	orr.w	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1dc      	bne.n	8002fb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <LL_ADC_IsEnabled>:
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <LL_ADC_IsEnabled+0x18>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsEnabled+0x1a>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_StartCalibration>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800303e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003048:	4313      	orrs	r3, r2
 800304a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_ADC_IsCalibrationOnGoing>:
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800306e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003072:	d101      	bne.n	8003078 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_REG_IsConversionOngoing>:
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d101      	bne.n	800309e <LL_ADC_REG_IsConversionOngoing+0x18>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e04d      	b.n	8003164 <HAL_ADCEx_Calibration_Start+0xb8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff39 	bl	8002f48 <ADC_Disable>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d136      	bne.n	800314e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030e8:	f023 0302 	bic.w	r3, r3, #2
 80030ec:	f043 0202 	orr.w	r2, r3, #2
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff96 	bl	800302c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003100:	e014      	b.n	800312c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3301      	adds	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800310e:	d30d      	bcc.n	800312c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f023 0312 	bic.w	r3, r3, #18
 8003118:	f043 0210 	orr.w	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e01b      	b.n	8003164 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff94 	bl	800305e <LL_ADC_IsCalibrationOnGoing>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e2      	bne.n	8003102 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
 800314c:	e005      	b.n	800315a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b09f      	sub	sp, #124	; 0x7c
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003186:	2302      	movs	r3, #2
 8003188:	e093      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003192:	2300      	movs	r3, #0
 8003194:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003196:	2300      	movs	r3, #0
 8003198:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	e001      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e072      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff59 	bl	8003086 <LL_ADC_REG_IsConversionOngoing>
 80031d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff53 	bl	8003086 <LL_ADC_REG_IsConversionOngoing>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d154      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d151      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80031ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02c      	beq.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800320a:	035b      	lsls	r3, r3, #13
 800320c:	430b      	orrs	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003214:	4829      	ldr	r0, [pc, #164]	; (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003216:	f7ff fef6 	bl	8003006 <LL_ADC_IsEnabled>
 800321a:	4604      	mov	r4, r0
 800321c:	4828      	ldr	r0, [pc, #160]	; (80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800321e:	f7ff fef2 	bl	8003006 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	431c      	orrs	r4, r3
 8003226:	4828      	ldr	r0, [pc, #160]	; (80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003228:	f7ff feed 	bl	8003006 <LL_ADC_IsEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	4323      	orrs	r3, r4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d137      	bne.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800323c:	f023 030f 	bic.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	6892      	ldr	r2, [r2, #8]
 8003248:	430a      	orrs	r2, r1
 800324a:	431a      	orrs	r2, r3
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003250:	e028      	b.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325e:	4817      	ldr	r0, [pc, #92]	; (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003260:	f7ff fed1 	bl	8003006 <LL_ADC_IsEnabled>
 8003264:	4604      	mov	r4, r0
 8003266:	4816      	ldr	r0, [pc, #88]	; (80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003268:	f7ff fecd 	bl	8003006 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	431c      	orrs	r4, r3
 8003270:	4815      	ldr	r0, [pc, #84]	; (80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003272:	f7ff fec8 	bl	8003006 <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	4323      	orrs	r3, r4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d112      	bne.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003286:	f023 030f 	bic.w	r3, r3, #15
 800328a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800328c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800328e:	e009      	b.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032a2:	e000      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	377c      	adds	r7, #124	; 0x7c
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	50040000 	.word	0x50040000
 80032c0:	50040100 	.word	0x50040100
 80032c4:	50040300 	.word	0x50040300
 80032c8:	50040200 	.word	0x50040200

080032cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fe:	4a04      	ldr	r2, [pc, #16]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	60d3      	str	r3, [r2, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	; (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7ff ff8e 	bl	800336c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff29 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003494:	f7ff ff3e 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7ff ff8e 	bl	80033c0 <NVIC_EncodePriority>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff5d 	bl	800336c <__NVIC_SetPriority>
}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff31 	bl	8003330 <__NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffa2 	bl	8003428 <SysTick_Config>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fe:	e17f      	b.n	8003800 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8171 	beq.w	80037fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d005      	beq.n	8003530 <HAL_GPIO_Init+0x40>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d130      	bne.n	8003592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003566:	2201      	movs	r2, #1
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0201 	and.w	r2, r3, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b03      	cmp	r3, #3
 800359c:	d118      	bne.n	80035d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d017      	beq.n	800360c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	6939      	ldr	r1, [r7, #16]
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80ac 	beq.w	80037fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_GPIO_Init+0x330>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	4a5e      	ldr	r2, [pc, #376]	; (8003820 <HAL_GPIO_Init+0x330>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6613      	str	r3, [r2, #96]	; 0x60
 80036ae:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <HAL_GPIO_Init+0x330>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036ba:	4a5a      	ldr	r2, [pc, #360]	; (8003824 <HAL_GPIO_Init+0x334>)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036e4:	d025      	beq.n	8003732 <HAL_GPIO_Init+0x242>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4f      	ldr	r2, [pc, #316]	; (8003828 <HAL_GPIO_Init+0x338>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01f      	beq.n	800372e <HAL_GPIO_Init+0x23e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4e      	ldr	r2, [pc, #312]	; (800382c <HAL_GPIO_Init+0x33c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d019      	beq.n	800372a <HAL_GPIO_Init+0x23a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <HAL_GPIO_Init+0x340>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x236>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4c      	ldr	r2, [pc, #304]	; (8003834 <HAL_GPIO_Init+0x344>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x232>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_GPIO_Init+0x348>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x22e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_GPIO_Init+0x34c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x22a>
 8003716:	2306      	movs	r3, #6
 8003718:	e00c      	b.n	8003734 <HAL_GPIO_Init+0x244>
 800371a:	2307      	movs	r3, #7
 800371c:	e00a      	b.n	8003734 <HAL_GPIO_Init+0x244>
 800371e:	2305      	movs	r3, #5
 8003720:	e008      	b.n	8003734 <HAL_GPIO_Init+0x244>
 8003722:	2304      	movs	r3, #4
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x244>
 8003726:	2303      	movs	r3, #3
 8003728:	e004      	b.n	8003734 <HAL_GPIO_Init+0x244>
 800372a:	2302      	movs	r3, #2
 800372c:	e002      	b.n	8003734 <HAL_GPIO_Init+0x244>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_GPIO_Init+0x244>
 8003732:	2300      	movs	r3, #0
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	f002 0203 	and.w	r2, r2, #3
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	4093      	lsls	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003744:	4937      	ldr	r1, [pc, #220]	; (8003824 <HAL_GPIO_Init+0x334>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_GPIO_Init+0x350>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003776:	4a32      	ldr	r2, [pc, #200]	; (8003840 <HAL_GPIO_Init+0x350>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800377c:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_GPIO_Init+0x350>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <HAL_GPIO_Init+0x350>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_GPIO_Init+0x350>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_GPIO_Init+0x350>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_GPIO_Init+0x350>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f4:	4a12      	ldr	r2, [pc, #72]	; (8003840 <HAL_GPIO_Init+0x350>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3301      	adds	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	f47f ae78 	bne.w	8003500 <HAL_GPIO_Init+0x10>
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	40010000 	.word	0x40010000
 8003828:	48000400 	.word	0x48000400
 800382c:	48000800 	.word	0x48000800
 8003830:	48000c00 	.word	0x48000c00
 8003834:	48001000 	.word	0x48001000
 8003838:	48001400 	.word	0x48001400
 800383c:	48001800 	.word	0x48001800
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
 8003850:	4613      	mov	r3, r2
 8003852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003860:	e002      	b.n	8003868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0c3      	b.n	8003a12 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b05      	cmp	r3, #5
 8003894:	d101      	bne.n	800389a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0bb      	b.n	8003a12 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d101      	bne.n	80038aa <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0b3      	b.n	8003a12 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fda4 	bl	8001414 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038da:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d11b      	bne.n	800391c <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 80038ee:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6891      	ldr	r1, [r2, #8]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68d2      	ldr	r2, [r2, #12]
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6992      	ldr	r2, [r2, #24]
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6912      	ldr	r2, [r2, #16]
 8003906:	4311      	orrs	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6952      	ldr	r2, [r2, #20]
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	69d2      	ldr	r2, [r2, #28]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d115      	bne.n	8003950 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 800392e:	f023 030e 	bic.w	r3, r3, #14
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6891      	ldr	r1, [r2, #8]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6952      	ldr	r2, [r2, #20]
 8003940:	4311      	orrs	r1, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	69d2      	ldr	r2, [r2, #28]
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d118      	bne.n	800398a <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003962:	f023 030e 	bic.w	r3, r3, #14
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6891      	ldr	r1, [r2, #8]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6912      	ldr	r2, [r2, #16]
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6952      	ldr	r2, [r2, #20]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	69d2      	ldr	r2, [r2, #28]
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	430b      	orrs	r3, r1
 8003988:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003992:	d12a      	bne.n	80039ea <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d013      	beq.n	80039c4 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80039b4:	f023 031f 	bic.w	r3, r3, #31
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	430b      	orrs	r3, r1
 80039c0:	6053      	str	r3, [r2, #4]
 80039c2:	e012      	b.n	80039ea <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80039dc:	f023 031f 	bic.w	r3, r3, #31
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_OPAMP_Init+0x1a8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4909      	ldr	r1, [pc, #36]	; (8003a1c <HAL_OPAMP_Init+0x1a8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40007800 	.word	0x40007800

08003a20 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e01d      	b.n	8003a74 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d102      	bne.n	8003a4a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e014      	b.n	8003a74 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10c      	bne.n	8003a70 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003a6e:	e001      	b.n	8003a74 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b088      	sub	sp, #32
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e10d      	b.n	8003cb6 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d102      	bne.n	8003aac <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e104      	b.n	8003cb6 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	f040 80fc 	bne.w	8003cb2 <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 020c 	bic.w	r2, r2, #12
 8003ad4:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3304      	adds	r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e003      	b.n	8003b00 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b0e:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8003b30:	2310      	movs	r3, #16
 8003b32:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8003b34:	2308      	movs	r3, #8
 8003b36:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003b38:	e01d      	b.n	8003b76 <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 021f 	bic.w	r2, r3, #31
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f7fe f960 	bl	8001e10 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e003      	b.n	8003b70 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1de      	bne.n	8003b3a <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 021f 	bic.w	r2, r3, #31
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fe f93f 	bl	8001e10 <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 021f 	bic.w	r2, r3, #31
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8003bca:	2308      	movs	r3, #8
 8003bcc:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003bce:	e01e      	b.n	8003c0e <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fe f914 	bl	8001e10 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e003      	b.n	8003c08 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1dd      	bne.n	8003bd0 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003c26:	2001      	movs	r0, #1
 8003c28:	f7fe f8f2 	bl	8001e10 <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c70:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c78:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d006      	beq.n	8003c90 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
 8003c8e:	e005      	b.n	8003c9c <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 010c 	bic.w	r1, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e001      	b.n	8003cb6 <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cea:	d130      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cec:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d038      	beq.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2232      	movs	r2, #50	; 0x32
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0c9b      	lsrs	r3, r3, #18
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d20:	e002      	b.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d34:	d102      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f2      	bne.n	8003d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d48:	d110      	bne.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e00f      	b.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5a:	d007      	beq.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	20000000 	.word	0x20000000
 8003d84:	431bde83 	.word	0x431bde83

08003d88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e3ca      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b97      	ldr	r3, [pc, #604]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da4:	4b94      	ldr	r3, [pc, #592]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80e4 	beq.w	8003f84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4a>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	f040 808b 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 8087 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e3a2      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_RCC_OscConfig+0x7c>
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e02:	e005      	b.n	8003e10 <HAL_RCC_OscConfig+0x88>
 8003e04:	4b7c      	ldr	r3, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d223      	bcs.n	8003e5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fd55 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e383      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e28:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a72      	ldr	r2, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	f043 0308 	orr.w	r3, r3, #8
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	496d      	ldr	r1, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e46:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4968      	ldr	r1, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
 8003e5a:	e025      	b.n	8003ea8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4960      	ldr	r1, [pc, #384]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	495b      	ldr	r1, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fd15 	bl	80048c8 <RCC_SetFlashLatencyFromMSIRange>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e343      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ea8:	f000 fc4a 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	4950      	ldr	r1, [pc, #320]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	4a4e      	ldr	r2, [pc, #312]	; (8004000 <HAL_RCC_OscConfig+0x278>)
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ec8:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd ff43 	bl	8001d58 <HAL_InitTick>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d052      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	e327      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d032      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ee8:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a42      	ldr	r2, [pc, #264]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd ff80 	bl	8001df8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efc:	f7fd ff7c 	bl	8001df8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e310      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a36      	ldr	r2, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4931      	ldr	r1, [pc, #196]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	492c      	ldr	r1, [pc, #176]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	e01a      	b.n	8003f84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd ff4d 	bl	8001df8 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fd ff49 	bl	8001df8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e2dd      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x1da>
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d074      	beq.n	800407a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x21a>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d10e      	bne.n	8003fba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d064      	beq.n	8004078 <HAL_RCC_OscConfig+0x2f0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d160      	bne.n	8004078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e2ba      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x24a>
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e026      	b.n	8004020 <HAL_RCC_OscConfig+0x298>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fda:	d115      	bne.n	8004008 <HAL_RCC_OscConfig+0x280>
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a02      	ldr	r2, [pc, #8]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x298>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800a2a4 	.word	0x0800a2a4
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004
 8004008:	4ba0      	ldr	r3, [pc, #640]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a9f      	ldr	r2, [pc, #636]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b9d      	ldr	r3, [pc, #628]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a9c      	ldr	r2, [pc, #624]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fee6 	bl	8001df8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd fee2 	bl	8001df8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e276      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	4b92      	ldr	r3, [pc, #584]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x2a8>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd fed2 	bl	8001df8 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fd fece 	bl	8001df8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e262      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406a:	4b88      	ldr	r3, [pc, #544]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x2d0>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d060      	beq.n	8004148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d005      	beq.n	8004098 <HAL_RCC_OscConfig+0x310>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d119      	bne.n	80040c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d116      	bne.n	80040c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	4b7c      	ldr	r3, [pc, #496]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x328>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e23f      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	4973      	ldr	r1, [pc, #460]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c4:	e040      	b.n	8004148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d023      	beq.n	8004116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ce:	4b6f      	ldr	r3, [pc, #444]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6e      	ldr	r2, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fd fe8d 	bl	8001df8 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fd fe89 	bl	8001df8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e21d      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b62      	ldr	r3, [pc, #392]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	495f      	ldr	r1, [pc, #380]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	e018      	b.n	8004148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5c      	ldr	r2, [pc, #368]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fd fe69 	bl	8001df8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412a:	f7fd fe65 	bl	8001df8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1f9      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d03c      	beq.n	80041ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01c      	beq.n	8004196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	4a4a      	ldr	r2, [pc, #296]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd fe44 	bl	8001df8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fd fe40 	bl	8001df8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1d4      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004186:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <HAL_RCC_OscConfig+0x3ec>
 8004194:	e01b      	b.n	80041ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004196:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	4a3b      	ldr	r2, [pc, #236]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd fe27 	bl	8001df8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd fe23 	bl	8001df8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1b7      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ef      	bne.n	80041ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a6 	beq.w	8004328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041dc:	2300      	movs	r3, #0
 80041de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041e0:	4b2a      	ldr	r3, [pc, #168]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	4a26      	ldr	r2, [pc, #152]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x504>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004204:	2301      	movs	r3, #1
 8004206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCC_OscConfig+0x508>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d118      	bne.n	8004246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_OscConfig+0x508>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_RCC_OscConfig+0x508>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004220:	f7fd fdea 	bl	8001df8 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fde6 	bl	8001df8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e17a      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_RCC_OscConfig+0x508>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d108      	bne.n	8004260 <HAL_RCC_OscConfig+0x4d8>
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800425e:	e029      	b.n	80042b4 <HAL_RCC_OscConfig+0x52c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d115      	bne.n	8004294 <HAL_RCC_OscConfig+0x50c>
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCC_OscConfig+0x504>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a03      	ldr	r2, [pc, #12]	; (800428c <HAL_RCC_OscConfig+0x504>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004288:	e014      	b.n	80042b4 <HAL_RCC_OscConfig+0x52c>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
 8004294:	4b9c      	ldr	r3, [pc, #624]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	4a9b      	ldr	r2, [pc, #620]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a4:	4b98      	ldr	r3, [pc, #608]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	4a97      	ldr	r2, [pc, #604]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d016      	beq.n	80042ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd fd9c 	bl	8001df8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fd fd98 	bl	8001df8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e12a      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ed      	beq.n	80042c4 <HAL_RCC_OscConfig+0x53c>
 80042e8:	e015      	b.n	8004316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fd85 	bl	8001df8 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fd81 	bl	8001df8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e113      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004308:	4b7f      	ldr	r3, [pc, #508]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ed      	bne.n	80042f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	4a79      	ldr	r2, [pc, #484]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80fe 	beq.w	800452e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2b02      	cmp	r3, #2
 8004338:	f040 80d0 	bne.w	80044dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800433c:	4b72      	ldr	r3, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	429a      	cmp	r2, r3
 800434e:	d130      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	3b01      	subs	r3, #1
 800435c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d127      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d11f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800437c:	2a07      	cmp	r2, #7
 800437e:	bf14      	ite	ne
 8004380:	2201      	movne	r2, #1
 8004382:	2200      	moveq	r2, #0
 8004384:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004386:	4293      	cmp	r3, r2
 8004388:	d113      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d109      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d06e      	beq.n	8004490 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d069      	beq.n	800448c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043b8:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0ad      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043e0:	f7fd fd0a 	bl	8001df8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd fd06 	bl	8001df8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e09a      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004406:	4b40      	ldr	r3, [pc, #256]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_RCC_OscConfig+0x784>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004416:	3a01      	subs	r2, #1
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	4311      	orrs	r1, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004420:	0212      	lsls	r2, r2, #8
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004428:	0852      	lsrs	r2, r2, #1
 800442a:	3a01      	subs	r2, #1
 800442c:	0552      	lsls	r2, r2, #21
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0652      	lsls	r2, r2, #25
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004440:	0912      	lsrs	r2, r2, #4
 8004442:	0452      	lsls	r2, r2, #17
 8004444:	430a      	orrs	r2, r1
 8004446:	4930      	ldr	r1, [pc, #192]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004448:	4313      	orrs	r3, r2
 800444a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004462:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004464:	f7fd fcc8 	bl	8001df8 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fcc4 	bl	8001df8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e058      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800448a:	e050      	b.n	800452e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e04f      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d148      	bne.n	800452e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044b4:	f7fd fca0 	bl	8001df8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fc9c 	bl	8001df8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e030      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x734>
 80044da:	e028      	b.n	800452e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d023      	beq.n	800452a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a08      	ldr	r2, [pc, #32]	; (8004508 <HAL_RCC_OscConfig+0x780>)
 80044e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd fc83 	bl	8001df8 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f4:	e00c      	b.n	8004510 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fd fc7f 	bl	8001df8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d905      	bls.n	8004510 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e013      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
 8004508:	40021000 	.word	0x40021000
 800450c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_OscConfig+0x7b0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ec      	bne.n	80044f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x7b0>)
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4905      	ldr	r1, [pc, #20]	; (8004538 <HAL_RCC_OscConfig+0x7b0>)
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCC_OscConfig+0x7b4>)
 8004524:	4013      	ands	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
 8004528:	e001      	b.n	800452e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	feeefffc 	.word	0xfeeefffc

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0e7      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b75      	ldr	r3, [pc, #468]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4970      	ldr	r1, [pc, #448]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b6e      	ldr	r3, [pc, #440]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cf      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459c:	429a      	cmp	r2, r3
 800459e:	d908      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b63      	ldr	r3, [pc, #396]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4960      	ldr	r1, [pc, #384]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d04c      	beq.n	8004658 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	4b5a      	ldr	r3, [pc, #360]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d121      	bne.n	8004616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0a6      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045de:	4b54      	ldr	r3, [pc, #336]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e09a      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e08e      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004606:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e086      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b46      	ldr	r3, [pc, #280]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4943      	ldr	r1, [pc, #268]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd fbe6 	bl	8001df8 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fd fbe2 	bl	8001df8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e06e      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	429a      	cmp	r2, r3
 8004672:	d208      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	492b      	ldr	r1, [pc, #172]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d210      	bcs.n	80046b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 0207 	bic.w	r2, r3, #7
 800469c:	4923      	ldr	r1, [pc, #140]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <HAL_RCC_ClockConfig+0x1ec>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e036      	b.n	8004724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c2:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4918      	ldr	r1, [pc, #96]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4910      	ldr	r1, [pc, #64]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f4:	f000 f824 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	490b      	ldr	r1, [pc, #44]	; (8004734 <HAL_RCC_ClockConfig+0x1f4>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1f8>)
 8004712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCC_ClockConfig+0x1fc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fd fb1d 	bl	8001d58 <HAL_InitTick>
 800471e:	4603      	mov	r3, r0
 8004720:	72fb      	strb	r3, [r7, #11]

  return status;
 8004722:	7afb      	ldrb	r3, [r7, #11]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40022000 	.word	0x40022000
 8004730:	40021000 	.word	0x40021000
 8004734:	0800a2a4 	.word	0x0800a2a4
 8004738:	20000000 	.word	0x20000000
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474e:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x34>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d121      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d11e      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004780:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e005      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004790:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800479c:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_RCC_GetSysClockFreq+0x10c>)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d102      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e004      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047c4:	4b23      	ldr	r3, [pc, #140]	; (8004854 <HAL_RCC_GetSysClockFreq+0x114>)
 80047c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d134      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d003      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0xac>
 80047e4:	e005      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCC_GetSysClockFreq+0x110>)
 80047e8:	617b      	str	r3, [r7, #20]
      break;
 80047ea:	e005      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ee:	617b      	str	r3, [r7, #20]
      break;
 80047f0:	e002      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	617b      	str	r3, [r7, #20]
      break;
 80047f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	3301      	adds	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	fb03 f202 	mul.w	r2, r3, r2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	0e5b      	lsrs	r3, r3, #25
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	3301      	adds	r3, #1
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004838:	69bb      	ldr	r3, [r7, #24]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	0800a2bc 	.word	0x0800a2bc
 8004850:	00f42400 	.word	0x00f42400
 8004854:	007a1200 	.word	0x007a1200

08004858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_GetHCLKFreq+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000000 	.word	0x20000000

08004870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004874:	f7ff fff0 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4904      	ldr	r1, [pc, #16]	; (8004898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	0800a2b4 	.word	0x0800a2b4

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048a0:	f7ff ffda 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0adb      	lsrs	r3, r3, #11
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4904      	ldr	r1, [pc, #16]	; (80048c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	0800a2b4 	.word	0x0800a2b4

080048c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048d4:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048e0:	f7ff f9ee 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 80048e4:	6178      	str	r0, [r7, #20]
 80048e6:	e014      	b.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	4a24      	ldr	r2, [pc, #144]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6593      	str	r3, [r2, #88]	; 0x58
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004900:	f7ff f9de 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d10b      	bne.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d919      	bls.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2ba0      	cmp	r3, #160	; 0xa0
 8004924:	d902      	bls.n	800492c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004926:	2302      	movs	r3, #2
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e013      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800492c:	2301      	movs	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	e010      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d902      	bls.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004938:	2303      	movs	r3, #3
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e00a      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d102      	bne.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004944:	2302      	movs	r3, #2
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e004      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b70      	cmp	r3, #112	; 0x70
 800494e:	d101      	bne.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004950:	2301      	movs	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 0207 	bic.w	r2, r3, #7
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	40022000 	.word	0x40022000

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004990:	2300      	movs	r3, #0
 8004992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004994:	2300      	movs	r3, #0
 8004996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d041      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ac:	d02a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049b2:	d824      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049be:	d81e      	bhi.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	d010      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049ca:	e018      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049cc:	4b86      	ldr	r3, [pc, #536]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a85      	ldr	r2, [pc, #532]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d8:	e015      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fabb 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ea:	e00c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3320      	adds	r3, #32
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fba6 	bl	8005144 <RCCEx_PLLSAI2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	74fb      	strb	r3, [r7, #19]
      break;
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a0c:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1a:	4973      	ldr	r1, [pc, #460]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d041      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a3c:	d02a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a42:	d824      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a48:	d008      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4e:	d81e      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d010      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a5c:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a61      	ldr	r2, [pc, #388]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a68:	e015      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fa73 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7a:	e00c      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3320      	adds	r3, #32
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fb5e 	bl	8005144 <RCCEx_PLLSAI2_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8c:	e003      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	74fb      	strb	r3, [r7, #19]
      break;
 8004a92:	e000      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a9c:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aaa:	494f      	ldr	r1, [pc, #316]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ab2:	e001      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a0 	beq.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae0:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	4a40      	ldr	r2, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6593      	str	r3, [r2, #88]	; 0x58
 8004aec:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af8:	2301      	movs	r3, #1
 8004afa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004afc:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b08:	f7fd f976 	bl	8001df8 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b0e:	e009      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b10:	f7fd f972 	bl	8001df8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	74fb      	strb	r3, [r7, #19]
        break;
 8004b22:	e005      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b24:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0ef      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d15c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d019      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b54:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b60:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d016      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fd f931 	bl	8001df8 <HAL_GetTick>
 8004b96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b98:	e00b      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9a:	f7fd f92d 	bl	8001df8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d902      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ec      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd6:	4904      	ldr	r1, [pc, #16]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	74bb      	strb	r3, [r7, #18]
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	7c7b      	ldrb	r3, [r7, #17]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4b9e      	ldr	r3, [pc, #632]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4a9d      	ldr	r2, [pc, #628]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c12:	4b98      	ldr	r3, [pc, #608]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 0203 	bic.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	4994      	ldr	r1, [pc, #592]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c34:	4b8f      	ldr	r3, [pc, #572]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 020c 	bic.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	498c      	ldr	r1, [pc, #560]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c56:	4b87      	ldr	r3, [pc, #540]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	4983      	ldr	r1, [pc, #524]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c78:	4b7e      	ldr	r3, [pc, #504]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	497b      	ldr	r1, [pc, #492]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9a:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	4972      	ldr	r1, [pc, #456]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbc:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	496a      	ldr	r1, [pc, #424]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cde:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	4961      	ldr	r1, [pc, #388]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d00:	4b5c      	ldr	r3, [pc, #368]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	4959      	ldr	r1, [pc, #356]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d22:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	4950      	ldr	r1, [pc, #320]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d44:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	4948      	ldr	r1, [pc, #288]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	493f      	ldr	r1, [pc, #252]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d028      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d88:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d96:	4937      	ldr	r1, [pc, #220]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da6:	d106      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da8:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4a31      	ldr	r2, [pc, #196]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db2:	60d3      	str	r3, [r2, #12]
 8004db4:	e011      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f8c8 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dd6:	7cfb      	ldrb	r3, [r7, #19]
 8004dd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d028      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	491f      	ldr	r1, [pc, #124]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e04:	d106      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e10:	60d3      	str	r3, [r2, #12]
 8004e12:	e011      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f899 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d02b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	4908      	ldr	r1, [pc, #32]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e62:	d109      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a02      	ldr	r2, [pc, #8]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
 8004e70:	e014      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2101      	movs	r1, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f867 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e98:	7cfb      	ldrb	r3, [r7, #19]
 8004e9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02f      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb6:	4928      	ldr	r1, [pc, #160]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec6:	d10d      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2102      	movs	r1, #2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f844 	bl	8004f5c <RCCEx_PLLSAI1_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d014      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	74bb      	strb	r3, [r7, #18]
 8004ee2:	e011      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3320      	adds	r3, #32
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f925 	bl	8005144 <RCCEx_PLLSAI2_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f22:	490d      	ldr	r1, [pc, #52]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f36:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f46:	4904      	ldr	r1, [pc, #16]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000

08004f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6a:	4b75      	ldr	r3, [pc, #468]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f76:	4b72      	ldr	r3, [pc, #456]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d047      	beq.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e044      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d018      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0x86>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d825      	bhi.n	8005000 <RCCEx_PLLSAI1_Config+0xa4>
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d002      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x62>
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d009      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x74>
 8004fbc:	e020      	b.n	8005000 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fbe:	4b60      	ldr	r3, [pc, #384]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11d      	bne.n	8005006 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fce:	e01a      	b.n	8005006 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd0:	4b5b      	ldr	r3, [pc, #364]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe0:	e013      	b.n	800500a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe2:	4b57      	ldr	r3, [pc, #348]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fee:	4b54      	ldr	r3, [pc, #336]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ffe:	e006      	b.n	800500e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e004      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005016:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	430b      	orrs	r3, r1
 800502c:	4944      	ldr	r1, [pc, #272]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d17d      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a40      	ldr	r2, [pc, #256]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fc fed8 	bl	8001df8 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800504a:	e009      	b.n	8005060 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504c:	f7fc fed4 	bl	8001df8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d902      	bls.n	8005060 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
        break;
 800505e:	e005      	b.n	800506c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005060:	4b37      	ldr	r3, [pc, #220]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ef      	bne.n	800504c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d160      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d111      	bne.n	800509c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	0912      	lsrs	r2, r2, #4
 8005090:	0452      	lsls	r2, r2, #17
 8005092:	430a      	orrs	r2, r1
 8005094:	492a      	ldr	r1, [pc, #168]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	610b      	str	r3, [r1, #16]
 800509a:	e027      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d112      	bne.n	80050c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a2:	4b27      	ldr	r3, [pc, #156]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	0211      	lsls	r1, r2, #8
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6912      	ldr	r2, [r2, #16]
 80050b8:	0852      	lsrs	r2, r2, #1
 80050ba:	3a01      	subs	r2, #1
 80050bc:	0552      	lsls	r2, r2, #21
 80050be:	430a      	orrs	r2, r1
 80050c0:	491f      	ldr	r1, [pc, #124]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
 80050c6:	e011      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6892      	ldr	r2, [r2, #8]
 80050d8:	0211      	lsls	r1, r2, #8
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6952      	ldr	r2, [r2, #20]
 80050de:	0852      	lsrs	r2, r2, #1
 80050e0:	3a01      	subs	r2, #1
 80050e2:	0652      	lsls	r2, r2, #25
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4916      	ldr	r1, [pc, #88]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fc fe7e 	bl	8001df8 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005100:	f7fc fe7a 	bl	8001df8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
          break;
 8005112:	e005      	b.n	8005120 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ef      	beq.n	8005100 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	4904      	ldr	r1, [pc, #16]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000

08005144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005152:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d018      	beq.n	8005190 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0203 	and.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d10d      	bne.n	800518a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
       ||
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005176:	4b61      	ldr	r3, [pc, #388]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
       ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d047      	beq.n	800521a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e044      	b.n	800521a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d018      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0x86>
 8005198:	2b03      	cmp	r3, #3
 800519a:	d825      	bhi.n	80051e8 <RCCEx_PLLSAI2_Config+0xa4>
 800519c:	2b01      	cmp	r3, #1
 800519e:	d002      	beq.n	80051a6 <RCCEx_PLLSAI2_Config+0x62>
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d009      	beq.n	80051b8 <RCCEx_PLLSAI2_Config+0x74>
 80051a4:	e020      	b.n	80051e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a6:	4b55      	ldr	r3, [pc, #340]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11d      	bne.n	80051ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b6:	e01a      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051b8:	4b50      	ldr	r3, [pc, #320]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d116      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c8:	e013      	b.n	80051f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051ca:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051d6:	4b49      	ldr	r3, [pc, #292]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051e6:	e006      	b.n	80051f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e004      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051fe:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	3b01      	subs	r3, #1
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	430b      	orrs	r3, r1
 8005214:	4939      	ldr	r1, [pc, #228]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d167      	bne.n	80052f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a35      	ldr	r2, [pc, #212]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fc fde4 	bl	8001df8 <HAL_GetTick>
 8005230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005232:	e009      	b.n	8005248 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005234:	f7fc fde0 	bl	8001df8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d902      	bls.n	8005248 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	73fb      	strb	r3, [r7, #15]
        break;
 8005246:	e005      	b.n	8005254 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005248:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ef      	bne.n	8005234 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d14a      	bne.n	80052f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d111      	bne.n	8005284 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005260:	4b26      	ldr	r3, [pc, #152]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6892      	ldr	r2, [r2, #8]
 8005270:	0211      	lsls	r1, r2, #8
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68d2      	ldr	r2, [r2, #12]
 8005276:	0912      	lsrs	r2, r2, #4
 8005278:	0452      	lsls	r2, r2, #17
 800527a:	430a      	orrs	r2, r1
 800527c:	491f      	ldr	r1, [pc, #124]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	614b      	str	r3, [r1, #20]
 8005282:	e011      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800528c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	0211      	lsls	r1, r2, #8
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6912      	ldr	r2, [r2, #16]
 800529a:	0852      	lsrs	r2, r2, #1
 800529c:	3a01      	subs	r2, #1
 800529e:	0652      	lsls	r2, r2, #25
 80052a0:	430a      	orrs	r2, r1
 80052a2:	4916      	ldr	r1, [pc, #88]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fc fda0 	bl	8001df8 <HAL_GetTick>
 80052b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ba:	e009      	b.n	80052d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052bc:	f7fc fd9c 	bl	8001df8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d902      	bls.n	80052d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	73fb      	strb	r3, [r7, #15]
          break;
 80052ce:	e005      	b.n	80052dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ef      	beq.n	80052bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4904      	ldr	r1, [pc, #16]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000

08005300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e049      	b.n	80053a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fbae 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 ff54 	bl	80061ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e04f      	b.n	8005468 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <HAL_TIM_Base_Start_IT+0xc4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01d      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d018      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_TIM_Base_Start_IT+0xc8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_TIM_Base_Start_IT+0xcc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_TIM_Base_Start_IT+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_TIM_Base_Start_IT+0xd4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0x76>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_TIM_Base_Start_IT+0xd8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d115      	bne.n	8005452 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_TIM_Base_Start_IT+0xdc>)
 800542e:	4013      	ands	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d015      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0xb4>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543e:	d011      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	e008      	b.n	8005464 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e000      	b.n	8005466 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40013400 	.word	0x40013400
 8005488:	40014000 	.word	0x40014000
 800548c:	00010007 	.word	0x00010007

08005490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e049      	b.n	8005536 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f841 	bl	800553e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fe8c 	bl	80061ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_TIM_PWM_Start+0x24>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e03c      	b.n	80055f2 <HAL_TIM_PWM_Start+0x9e>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d109      	bne.n	8005592 <HAL_TIM_PWM_Start+0x3e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	bf14      	ite	ne
 800558a:	2301      	movne	r3, #1
 800558c:	2300      	moveq	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	e02f      	b.n	80055f2 <HAL_TIM_PWM_Start+0x9e>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d109      	bne.n	80055ac <HAL_TIM_PWM_Start+0x58>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e022      	b.n	80055f2 <HAL_TIM_PWM_Start+0x9e>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d109      	bne.n	80055c6 <HAL_TIM_PWM_Start+0x72>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e015      	b.n	80055f2 <HAL_TIM_PWM_Start+0x9e>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x8c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e008      	b.n	80055f2 <HAL_TIM_PWM_Start+0x9e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e09c      	b.n	8005734 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d104      	bne.n	800560a <HAL_TIM_PWM_Start+0xb6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	e023      	b.n	8005652 <HAL_TIM_PWM_Start+0xfe>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0xc6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005618:	e01b      	b.n	8005652 <HAL_TIM_PWM_Start+0xfe>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0xd6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005628:	e013      	b.n	8005652 <HAL_TIM_PWM_Start+0xfe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xe6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005638:	e00b      	b.n	8005652 <HAL_TIM_PWM_Start+0xfe>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b10      	cmp	r3, #16
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0xf6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005648:	e003      	b.n	8005652 <HAL_TIM_PWM_Start+0xfe>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f001 faf4 	bl	8006c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a35      	ldr	r2, [pc, #212]	; (800573c <HAL_TIM_PWM_Start+0x1e8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_TIM_PWM_Start+0x13e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a34      	ldr	r2, [pc, #208]	; (8005740 <HAL_TIM_PWM_Start+0x1ec>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_TIM_PWM_Start+0x13e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a32      	ldr	r2, [pc, #200]	; (8005744 <HAL_TIM_PWM_Start+0x1f0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_TIM_PWM_Start+0x13e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a31      	ldr	r2, [pc, #196]	; (8005748 <HAL_TIM_PWM_Start+0x1f4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIM_PWM_Start+0x13e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2f      	ldr	r2, [pc, #188]	; (800574c <HAL_TIM_PWM_Start+0x1f8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <HAL_TIM_PWM_Start+0x142>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_TIM_PWM_Start+0x144>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_TIM_PWM_Start+0x1e8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01d      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056be:	d018      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <HAL_TIM_PWM_Start+0x1fc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a21      	ldr	r2, [pc, #132]	; (8005754 <HAL_TIM_PWM_Start+0x200>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <HAL_TIM_PWM_Start+0x204>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a17      	ldr	r2, [pc, #92]	; (8005740 <HAL_TIM_PWM_Start+0x1ec>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x19e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <HAL_TIM_PWM_Start+0x1f0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d115      	bne.n	800571e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	4b18      	ldr	r3, [pc, #96]	; (800575c <HAL_TIM_PWM_Start+0x208>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d015      	beq.n	8005730 <HAL_TIM_PWM_Start+0x1dc>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570a:	d011      	beq.n	8005730 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	e008      	b.n	8005730 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e000      	b.n	8005732 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	00010007 	.word	0x00010007

08005760 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e049      	b.n	8005806 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f841 	bl	800580e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f000 fd24 	bl	80061ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_TIM_IC_Start+0x1a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e023      	b.n	8005886 <HAL_TIM_IC_Start+0x62>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d104      	bne.n	800584e <HAL_TIM_IC_Start+0x2a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e01b      	b.n	8005886 <HAL_TIM_IC_Start+0x62>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d104      	bne.n	800585e <HAL_TIM_IC_Start+0x3a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e013      	b.n	8005886 <HAL_TIM_IC_Start+0x62>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d104      	bne.n	800586e <HAL_TIM_IC_Start+0x4a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586a:	b2db      	uxtb	r3, r3
 800586c:	e00b      	b.n	8005886 <HAL_TIM_IC_Start+0x62>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b10      	cmp	r3, #16
 8005872:	d104      	bne.n	800587e <HAL_TIM_IC_Start+0x5a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e003      	b.n	8005886 <HAL_TIM_IC_Start+0x62>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005884:	b2db      	uxtb	r3, r3
 8005886:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_TIM_IC_Start+0x74>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e013      	b.n	80058c0 <HAL_TIM_IC_Start+0x9c>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b04      	cmp	r3, #4
 800589c:	d104      	bne.n	80058a8 <HAL_TIM_IC_Start+0x84>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e00b      	b.n	80058c0 <HAL_TIM_IC_Start+0x9c>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d104      	bne.n	80058b8 <HAL_TIM_IC_Start+0x94>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e003      	b.n	80058c0 <HAL_TIM_IC_Start+0x9c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e092      	b.n	80059f8 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_IC_Start+0xbe>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e0:	e023      	b.n	800592a <HAL_TIM_IC_Start+0x106>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_IC_Start+0xce>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f0:	e01b      	b.n	800592a <HAL_TIM_IC_Start+0x106>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_IC_Start+0xde>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005900:	e013      	b.n	800592a <HAL_TIM_IC_Start+0x106>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d104      	bne.n	8005912 <HAL_TIM_IC_Start+0xee>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005910:	e00b      	b.n	800592a <HAL_TIM_IC_Start+0x106>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b10      	cmp	r3, #16
 8005916:	d104      	bne.n	8005922 <HAL_TIM_IC_Start+0xfe>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005920:	e003      	b.n	800592a <HAL_TIM_IC_Start+0x106>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <HAL_TIM_IC_Start+0x116>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005938:	e013      	b.n	8005962 <HAL_TIM_IC_Start+0x13e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d104      	bne.n	800594a <HAL_TIM_IC_Start+0x126>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005948:	e00b      	b.n	8005962 <HAL_TIM_IC_Start+0x13e>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d104      	bne.n	800595a <HAL_TIM_IC_Start+0x136>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005958:	e003      	b.n	8005962 <HAL_TIM_IC_Start+0x13e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2201      	movs	r2, #1
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f96c 	bl	8006c48 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_TIM_IC_Start+0x1dc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d018      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_TIM_IC_Start+0x1e0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <HAL_TIM_IC_Start+0x1e4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <HAL_TIM_IC_Start+0x1e8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <HAL_TIM_IC_Start+0x1ec>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_IC_Start+0x192>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_TIM_IC_Start+0x1f0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d115      	bne.n	80059e2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <HAL_TIM_IC_Start+0x1f4>)
 80059be:	4013      	ands	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d015      	beq.n	80059f4 <HAL_TIM_IC_Start+0x1d0>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ce:	d011      	beq.n	80059f4 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	e008      	b.n	80059f4 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	00010007 	.word	0x00010007

08005a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0202 	mvn.w	r2, #2
 8005a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fba2 	bl	80061b0 <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fb94 	bl	800619c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fba5 	bl	80061c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d020      	beq.n	8005acc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0204 	mvn.w	r2, #4
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fb7c 	bl	80061b0 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb6e 	bl	800619c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb7f 	bl	80061c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d020      	beq.n	8005b18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0208 	mvn.w	r2, #8
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2204      	movs	r2, #4
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fb56 	bl	80061b0 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fb48 	bl	800619c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb59 	bl	80061c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d020      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0210 	mvn.w	r2, #16
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fb30 	bl	80061b0 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fb22 	bl	800619c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb33 	bl	80061c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0201 	mvn.w	r2, #1
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fb4a 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 f906 	bl	8006db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f8fe 	bl	8006dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 faf2 	bl	80061d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0220 	mvn.w	r2, #32
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f8c6 	bl	8006da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e088      	b.n	8005d50 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c5c:	f000 fe36 	bl	80068cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 020c 	bic.w	r2, r2, #12
 8005c6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6999      	ldr	r1, [r3, #24]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	619a      	str	r2, [r3, #24]
 8005c82:	e060      	b.n	8005d46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d11c      	bne.n	8005cc4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c9a:	f000 feb4 	bl	8006a06 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6999      	ldr	r1, [r3, #24]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	021a      	lsls	r2, r3, #8
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	619a      	str	r2, [r3, #24]
 8005cc2:	e040      	b.n	8005d46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d11b      	bne.n	8005d02 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005cda:	f000 ff01 	bl	8006ae0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 020c 	bic.w	r2, r2, #12
 8005cec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	61da      	str	r2, [r3, #28]
 8005d00:	e021      	b.n	8005d46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	d11c      	bne.n	8005d42 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d18:	f000 ff1e 	bl	8006b58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d2a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69d9      	ldr	r1, [r3, #28]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	61da      	str	r2, [r3, #28]
 8005d40:	e001      	b.n	8005d46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0ff      	b.n	8005f76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b14      	cmp	r3, #20
 8005d82:	f200 80f0 	bhi.w	8005f66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005f67 	.word	0x08005f67
 8005d94:	08005f67 	.word	0x08005f67
 8005d98:	08005f67 	.word	0x08005f67
 8005d9c:	08005e21 	.word	0x08005e21
 8005da0:	08005f67 	.word	0x08005f67
 8005da4:	08005f67 	.word	0x08005f67
 8005da8:	08005f67 	.word	0x08005f67
 8005dac:	08005e63 	.word	0x08005e63
 8005db0:	08005f67 	.word	0x08005f67
 8005db4:	08005f67 	.word	0x08005f67
 8005db8:	08005f67 	.word	0x08005f67
 8005dbc:	08005ea3 	.word	0x08005ea3
 8005dc0:	08005f67 	.word	0x08005f67
 8005dc4:	08005f67 	.word	0x08005f67
 8005dc8:	08005f67 	.word	0x08005f67
 8005dcc:	08005ee5 	.word	0x08005ee5
 8005dd0:	08005f67 	.word	0x08005f67
 8005dd4:	08005f67 	.word	0x08005f67
 8005dd8:	08005f67 	.word	0x08005f67
 8005ddc:	08005f25 	.word	0x08005f25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fa9a 	bl	8006320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0208 	orr.w	r2, r2, #8
 8005dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0204 	bic.w	r2, r2, #4
 8005e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6999      	ldr	r1, [r3, #24]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	619a      	str	r2, [r3, #24]
      break;
 8005e1e:	e0a5      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fb0a 	bl	8006440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6999      	ldr	r1, [r3, #24]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	021a      	lsls	r2, r3, #8
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	619a      	str	r2, [r3, #24]
      break;
 8005e60:	e084      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fb73 	bl	8006554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0208 	orr.w	r2, r2, #8
 8005e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0204 	bic.w	r2, r2, #4
 8005e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69d9      	ldr	r1, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	61da      	str	r2, [r3, #28]
      break;
 8005ea0:	e064      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fbdb 	bl	8006664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69d9      	ldr	r1, [r3, #28]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	021a      	lsls	r2, r3, #8
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	61da      	str	r2, [r3, #28]
      break;
 8005ee2:	e043      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fc24 	bl	8006738 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0208 	orr.w	r2, r2, #8
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0204 	bic.w	r2, r2, #4
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f22:	e023      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fc68 	bl	8006800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	021a      	lsls	r2, r3, #8
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f64:	e002      	b.n	8005f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0b6      	b.n	800610a <HAL_TIM_ConfigClockSource+0x18a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd8:	d03e      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0xd8>
 8005fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fde:	f200 8087 	bhi.w	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	f000 8086 	beq.w	80060f6 <HAL_TIM_ConfigClockSource+0x176>
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	d87f      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8005ff0:	2b70      	cmp	r3, #112	; 0x70
 8005ff2:	d01a      	beq.n	800602a <HAL_TIM_ConfigClockSource+0xaa>
 8005ff4:	2b70      	cmp	r3, #112	; 0x70
 8005ff6:	d87b      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8005ff8:	2b60      	cmp	r3, #96	; 0x60
 8005ffa:	d050      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x11e>
 8005ffc:	2b60      	cmp	r3, #96	; 0x60
 8005ffe:	d877      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8006000:	2b50      	cmp	r3, #80	; 0x50
 8006002:	d03c      	beq.n	800607e <HAL_TIM_ConfigClockSource+0xfe>
 8006004:	2b50      	cmp	r3, #80	; 0x50
 8006006:	d873      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d058      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x13e>
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d86f      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8006010:	2b30      	cmp	r3, #48	; 0x30
 8006012:	d064      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x15e>
 8006014:	2b30      	cmp	r3, #48	; 0x30
 8006016:	d86b      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8006018:	2b20      	cmp	r3, #32
 800601a:	d060      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x15e>
 800601c:	2b20      	cmp	r3, #32
 800601e:	d867      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05c      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x15e>
 8006024:	2b10      	cmp	r3, #16
 8006026:	d05a      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x15e>
 8006028:	e062      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800603a:	f000 fde5 	bl	8006c08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800604c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	609a      	str	r2, [r3, #8]
      break;
 8006056:	e04f      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006068:	f000 fdce 	bl	8006c08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607a:	609a      	str	r2, [r3, #8]
      break;
 800607c:	e03c      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	461a      	mov	r2, r3
 800608c:	f000 fc8c 	bl	80069a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2150      	movs	r1, #80	; 0x50
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fd9b 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 800609c:	e02c      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 fce8 	bl	8006a80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2160      	movs	r1, #96	; 0x60
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fd8b 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 80060bc:	e01c      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	461a      	mov	r2, r3
 80060cc:	f000 fc6c 	bl	80069a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd7b 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 80060dc:	e00c      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f000 fd72 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 80060ee:	e003      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	e000      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b0c      	cmp	r3, #12
 8006126:	d831      	bhi.n	800618c <HAL_TIM_ReadCapturedValue+0x78>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_TIM_ReadCapturedValue+0x1c>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006165 	.word	0x08006165
 8006134:	0800618d 	.word	0x0800618d
 8006138:	0800618d 	.word	0x0800618d
 800613c:	0800618d 	.word	0x0800618d
 8006140:	0800616f 	.word	0x0800616f
 8006144:	0800618d 	.word	0x0800618d
 8006148:	0800618d 	.word	0x0800618d
 800614c:	0800618d 	.word	0x0800618d
 8006150:	08006179 	.word	0x08006179
 8006154:	0800618d 	.word	0x0800618d
 8006158:	0800618d 	.word	0x0800618d
 800615c:	0800618d 	.word	0x0800618d
 8006160:	08006183 	.word	0x08006183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616a:	60fb      	str	r3, [r7, #12]

      break;
 800616c:	e00f      	b.n	800618e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	60fb      	str	r3, [r7, #12]

      break;
 8006176:	e00a      	b.n	800618e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	60fb      	str	r3, [r7, #12]

      break;
 8006180:	e005      	b.n	800618e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	60fb      	str	r3, [r7, #12]

      break;
 800618a:	e000      	b.n	800618e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800618c:	bf00      	nop
  }

  return tmpreg;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <TIM_Base_SetConfig+0x114>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d00f      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3d      	ldr	r2, [pc, #244]	; (8006304 <TIM_Base_SetConfig+0x118>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00b      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <TIM_Base_SetConfig+0x11c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3b      	ldr	r2, [pc, #236]	; (800630c <TIM_Base_SetConfig+0x120>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <TIM_Base_SetConfig+0x124>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2f      	ldr	r2, [pc, #188]	; (8006300 <TIM_Base_SetConfig+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <TIM_Base_SetConfig+0x118>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <TIM_Base_SetConfig+0x11c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <TIM_Base_SetConfig+0x120>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a29      	ldr	r2, [pc, #164]	; (8006310 <TIM_Base_SetConfig+0x124>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <TIM_Base_SetConfig+0x128>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a27      	ldr	r2, [pc, #156]	; (8006318 <TIM_Base_SetConfig+0x12c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a26      	ldr	r2, [pc, #152]	; (800631c <TIM_Base_SetConfig+0x130>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <TIM_Base_SetConfig+0x114>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_Base_SetConfig+0xf8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a12      	ldr	r2, [pc, #72]	; (8006310 <TIM_Base_SetConfig+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_Base_SetConfig+0xf8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a11      	ldr	r2, [pc, #68]	; (8006314 <TIM_Base_SetConfig+0x128>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_Base_SetConfig+0xf8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <TIM_Base_SetConfig+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0xf8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0f      	ldr	r2, [pc, #60]	; (800631c <TIM_Base_SetConfig+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d103      	bne.n	80062ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	615a      	str	r2, [r3, #20]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800

08006320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 0201 	bic.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0302 	bic.w	r3, r3, #2
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a2c      	ldr	r2, [pc, #176]	; (800642c <TIM_OC1_SetConfig+0x10c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00f      	beq.n	80063a0 <TIM_OC1_SetConfig+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <TIM_OC1_SetConfig+0x110>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_OC1_SetConfig+0x80>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <TIM_OC1_SetConfig+0x114>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_OC1_SetConfig+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a29      	ldr	r2, [pc, #164]	; (8006438 <TIM_OC1_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_OC1_SetConfig+0x80>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a28      	ldr	r2, [pc, #160]	; (800643c <TIM_OC1_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10c      	bne.n	80063ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0308 	bic.w	r3, r3, #8
 80063a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f023 0304 	bic.w	r3, r3, #4
 80063b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <TIM_OC1_SetConfig+0x10c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_OC1_SetConfig+0xc2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1a      	ldr	r2, [pc, #104]	; (8006430 <TIM_OC1_SetConfig+0x110>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_OC1_SetConfig+0xc2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a19      	ldr	r2, [pc, #100]	; (8006434 <TIM_OC1_SetConfig+0x114>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_OC1_SetConfig+0xc2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <TIM_OC1_SetConfig+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC1_SetConfig+0xc2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a17      	ldr	r2, [pc, #92]	; (800643c <TIM_OC1_SetConfig+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d111      	bne.n	8006406 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800

08006440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f023 0210 	bic.w	r2, r3, #16
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0320 	bic.w	r3, r3, #32
 800648e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a28      	ldr	r2, [pc, #160]	; (8006540 <TIM_OC2_SetConfig+0x100>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC2_SetConfig+0x6c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a27      	ldr	r2, [pc, #156]	; (8006544 <TIM_OC2_SetConfig+0x104>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d10d      	bne.n	80064c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <TIM_OC2_SetConfig+0x100>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00f      	beq.n	80064f0 <TIM_OC2_SetConfig+0xb0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <TIM_OC2_SetConfig+0x104>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <TIM_OC2_SetConfig+0xb0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM_OC2_SetConfig+0x108>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <TIM_OC2_SetConfig+0xb0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1a      	ldr	r2, [pc, #104]	; (800654c <TIM_OC2_SetConfig+0x10c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC2_SetConfig+0xb0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <TIM_OC2_SetConfig+0x110>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d113      	bne.n	8006518 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800

08006554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a27      	ldr	r2, [pc, #156]	; (8006650 <TIM_OC3_SetConfig+0xfc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC3_SetConfig+0x6a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a26      	ldr	r2, [pc, #152]	; (8006654 <TIM_OC3_SetConfig+0x100>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10d      	bne.n	80065da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <TIM_OC3_SetConfig+0xfc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_OC3_SetConfig+0xae>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <TIM_OC3_SetConfig+0x100>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00b      	beq.n	8006602 <TIM_OC3_SetConfig+0xae>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1a      	ldr	r2, [pc, #104]	; (8006658 <TIM_OC3_SetConfig+0x104>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_OC3_SetConfig+0xae>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <TIM_OC3_SetConfig+0x108>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC3_SetConfig+0xae>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a18      	ldr	r2, [pc, #96]	; (8006660 <TIM_OC3_SetConfig+0x10c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d113      	bne.n	800662a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	621a      	str	r2, [r3, #32]
}
 8006644:	bf00      	nop
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800

08006664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	031b      	lsls	r3, r3, #12
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a18      	ldr	r2, [pc, #96]	; (8006724 <TIM_OC4_SetConfig+0xc0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00f      	beq.n	80066e8 <TIM_OC4_SetConfig+0x84>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a17      	ldr	r2, [pc, #92]	; (8006728 <TIM_OC4_SetConfig+0xc4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_OC4_SetConfig+0x84>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <TIM_OC4_SetConfig+0xc8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_OC4_SetConfig+0x84>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <TIM_OC4_SetConfig+0xcc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC4_SetConfig+0x84>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a14      	ldr	r2, [pc, #80]	; (8006734 <TIM_OC4_SetConfig+0xd0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d109      	bne.n	80066fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	019b      	lsls	r3, r3, #6
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40012c00 	.word	0x40012c00
 8006728:	40013400 	.word	0x40013400
 800672c:	40014000 	.word	0x40014000
 8006730:	40014400 	.word	0x40014400
 8006734:	40014800 	.word	0x40014800

08006738 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800677c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a17      	ldr	r2, [pc, #92]	; (80067ec <TIM_OC5_SetConfig+0xb4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_OC5_SetConfig+0x7a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <TIM_OC5_SetConfig+0xb8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC5_SetConfig+0x7a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC5_SetConfig+0xbc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC5_SetConfig+0x7a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC5_SetConfig+0xc0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC5_SetConfig+0x7a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a13      	ldr	r2, [pc, #76]	; (80067fc <TIM_OC5_SetConfig+0xc4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d109      	bne.n	80067c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	051b      	lsls	r3, r3, #20
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <TIM_OC6_SetConfig+0xb8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00f      	beq.n	800687c <TIM_OC6_SetConfig+0x7c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a17      	ldr	r2, [pc, #92]	; (80068bc <TIM_OC6_SetConfig+0xbc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00b      	beq.n	800687c <TIM_OC6_SetConfig+0x7c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC6_SetConfig+0xc0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d007      	beq.n	800687c <TIM_OC6_SetConfig+0x7c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <TIM_OC6_SetConfig+0xc4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC6_SetConfig+0x7c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <TIM_OC6_SetConfig+0xc8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d109      	bne.n	8006890 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f023 0201 	bic.w	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a26      	ldr	r2, [pc, #152]	; (8006990 <TIM_TI1_SetConfig+0xc4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006900:	d013      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <TIM_TI1_SetConfig+0xc8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a22      	ldr	r2, [pc, #136]	; (8006998 <TIM_TI1_SetConfig+0xcc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a21      	ldr	r2, [pc, #132]	; (800699c <TIM_TI1_SetConfig+0xd0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <TIM_TI1_SetConfig+0xd4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_TI1_SetConfig+0x5e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <TIM_TI1_SetConfig+0xd8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <TIM_TI1_SetConfig+0x62>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <TIM_TI1_SetConfig+0x64>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e003      	b.n	800694e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	b2db      	uxtb	r3, r3
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f003 030a 	and.w	r3, r3, #10
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000

080069a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f023 0201 	bic.w	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 030a 	bic.w	r3, r3, #10
 80069e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0210 	bic.w	r2, r3, #16
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0210 	bic.w	r2, r3, #16
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b30:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	621a      	str	r2, [r3, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	031b      	lsls	r3, r3, #12
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f043 0307 	orr.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	609a      	str	r2, [r3, #8]
}
 8006bfc:	bf00      	nop
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	021a      	lsls	r2, r3, #8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1a      	ldr	r2, [r3, #32]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e068      	b.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2e      	ldr	r2, [pc, #184]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2d      	ldr	r2, [pc, #180]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ce6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01d      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d018      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1a      	ldr	r2, [pc, #104]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a14      	ldr	r2, [pc, #80]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10c      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e040      	b.n	8006e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7fa ff0a 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2224      	movs	r2, #36	; 0x24
 8006e0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0201 	bic.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb6a 	bl	8007500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8af 	bl	8006f90 <UART_SetConfig>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e01b      	b.n	8006e74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fbe9 	bl	8007644 <UART_CheckIdleState>
 8006e72:	4603      	mov	r3, r0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d178      	bne.n	8006f86 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Transmit+0x24>
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e071      	b.n	8006f88 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2221      	movs	r2, #33	; 0x21
 8006eb0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb2:	f7fa ffa1 	bl	8001df8 <HAL_GetTick>
 8006eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed0:	d108      	bne.n	8006ee4 <HAL_UART_Transmit+0x68>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e003      	b.n	8006eec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006eec:	e030      	b.n	8006f50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fc4b 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e03c      	b.n	8006f88 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	881a      	ldrh	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f20:	b292      	uxth	r2, r2
 8006f22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	3302      	adds	r3, #2
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e008      	b.n	8006f3e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	781a      	ldrb	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b292      	uxth	r2, r2
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1c8      	bne.n	8006eee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2200      	movs	r2, #0
 8006f64:	2140      	movs	r1, #64	; 0x40
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fc14 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e005      	b.n	8006f88 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e000      	b.n	8006f88 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f94:	b08a      	sub	sp, #40	; 0x28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4ba4      	ldr	r3, [pc, #656]	; (8007250 <UART_SetConfig+0x2c0>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a99      	ldr	r2, [pc, #612]	; (8007254 <UART_SetConfig+0x2c4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700c:	430a      	orrs	r2, r1
 800700e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a90      	ldr	r2, [pc, #576]	; (8007258 <UART_SetConfig+0x2c8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d126      	bne.n	8007068 <UART_SetConfig+0xd8>
 800701a:	4b90      	ldr	r3, [pc, #576]	; (800725c <UART_SetConfig+0x2cc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b03      	cmp	r3, #3
 8007026:	d81b      	bhi.n	8007060 <UART_SetConfig+0xd0>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0xa0>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007041 	.word	0x08007041
 8007034:	08007051 	.word	0x08007051
 8007038:	08007049 	.word	0x08007049
 800703c:	08007059 	.word	0x08007059
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e116      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007048:	2302      	movs	r3, #2
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e112      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007056:	e10e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e10a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007066:	e106      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a7c      	ldr	r2, [pc, #496]	; (8007260 <UART_SetConfig+0x2d0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d138      	bne.n	80070e4 <UART_SetConfig+0x154>
 8007072:	4b7a      	ldr	r3, [pc, #488]	; (800725c <UART_SetConfig+0x2cc>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b0c      	cmp	r3, #12
 800707e:	d82d      	bhi.n	80070dc <UART_SetConfig+0x14c>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0xf8>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070bd 	.word	0x080070bd
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080070dd 	.word	0x080070dd
 8007094:	080070dd 	.word	0x080070dd
 8007098:	080070cd 	.word	0x080070cd
 800709c:	080070dd 	.word	0x080070dd
 80070a0:	080070dd 	.word	0x080070dd
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e0d8      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ca:	e0d4      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e0d0      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e0cc      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e2:	e0c8      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5e      	ldr	r2, [pc, #376]	; (8007264 <UART_SetConfig+0x2d4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d125      	bne.n	800713a <UART_SetConfig+0x1aa>
 80070ee:	4b5b      	ldr	r3, [pc, #364]	; (800725c <UART_SetConfig+0x2cc>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d016      	beq.n	800712a <UART_SetConfig+0x19a>
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	d818      	bhi.n	8007132 <UART_SetConfig+0x1a2>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d00a      	beq.n	800711a <UART_SetConfig+0x18a>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d814      	bhi.n	8007132 <UART_SetConfig+0x1a2>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <UART_SetConfig+0x182>
 800710c:	2b10      	cmp	r3, #16
 800710e:	d008      	beq.n	8007122 <UART_SetConfig+0x192>
 8007110:	e00f      	b.n	8007132 <UART_SetConfig+0x1a2>
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007118:	e0ad      	b.n	8007276 <UART_SetConfig+0x2e6>
 800711a:	2302      	movs	r3, #2
 800711c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007120:	e0a9      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007122:	2304      	movs	r3, #4
 8007124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007128:	e0a5      	b.n	8007276 <UART_SetConfig+0x2e6>
 800712a:	2308      	movs	r3, #8
 800712c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007130:	e0a1      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007132:	2310      	movs	r3, #16
 8007134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007138:	e09d      	b.n	8007276 <UART_SetConfig+0x2e6>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a4a      	ldr	r2, [pc, #296]	; (8007268 <UART_SetConfig+0x2d8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d125      	bne.n	8007190 <UART_SetConfig+0x200>
 8007144:	4b45      	ldr	r3, [pc, #276]	; (800725c <UART_SetConfig+0x2cc>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d016      	beq.n	8007180 <UART_SetConfig+0x1f0>
 8007152:	2bc0      	cmp	r3, #192	; 0xc0
 8007154:	d818      	bhi.n	8007188 <UART_SetConfig+0x1f8>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d00a      	beq.n	8007170 <UART_SetConfig+0x1e0>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d814      	bhi.n	8007188 <UART_SetConfig+0x1f8>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0x1d8>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d008      	beq.n	8007178 <UART_SetConfig+0x1e8>
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x1f8>
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e082      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007176:	e07e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717e:	e07a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e076      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e072      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a35      	ldr	r2, [pc, #212]	; (800726c <UART_SetConfig+0x2dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d12a      	bne.n	80071f0 <UART_SetConfig+0x260>
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <UART_SetConfig+0x2cc>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a8:	d01a      	beq.n	80071e0 <UART_SetConfig+0x250>
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d81b      	bhi.n	80071e8 <UART_SetConfig+0x258>
 80071b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b4:	d00c      	beq.n	80071d0 <UART_SetConfig+0x240>
 80071b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ba:	d815      	bhi.n	80071e8 <UART_SetConfig+0x258>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <UART_SetConfig+0x238>
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c4:	d008      	beq.n	80071d8 <UART_SetConfig+0x248>
 80071c6:	e00f      	b.n	80071e8 <UART_SetConfig+0x258>
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e052      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e04e      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e04a      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e046      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e042      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a17      	ldr	r2, [pc, #92]	; (8007254 <UART_SetConfig+0x2c4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d13a      	bne.n	8007270 <UART_SetConfig+0x2e0>
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <UART_SetConfig+0x2cc>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007200:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007208:	d01a      	beq.n	8007240 <UART_SetConfig+0x2b0>
 800720a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800720e:	d81b      	bhi.n	8007248 <UART_SetConfig+0x2b8>
 8007210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007214:	d00c      	beq.n	8007230 <UART_SetConfig+0x2a0>
 8007216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721a:	d815      	bhi.n	8007248 <UART_SetConfig+0x2b8>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <UART_SetConfig+0x298>
 8007220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007224:	d008      	beq.n	8007238 <UART_SetConfig+0x2a8>
 8007226:	e00f      	b.n	8007248 <UART_SetConfig+0x2b8>
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722e:	e022      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007230:	2302      	movs	r3, #2
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007236:	e01e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723e:	e01a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007246:	e016      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724e:	e012      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007250:	efff69f3 	.word	0xefff69f3
 8007254:	40008000 	.word	0x40008000
 8007258:	40013800 	.word	0x40013800
 800725c:	40021000 	.word	0x40021000
 8007260:	40004400 	.word	0x40004400
 8007264:	40004800 	.word	0x40004800
 8007268:	40004c00 	.word	0x40004c00
 800726c:	40005000 	.word	0x40005000
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a9f      	ldr	r2, [pc, #636]	; (80074f8 <UART_SetConfig+0x568>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d17a      	bne.n	8007376 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007284:	2b08      	cmp	r3, #8
 8007286:	d824      	bhi.n	80072d2 <UART_SetConfig+0x342>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <UART_SetConfig+0x300>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072bd 	.word	0x080072bd
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072c3 	.word	0x080072c3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072d3 	.word	0x080072d3
 80072ac:	080072d3 	.word	0x080072d3
 80072b0:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b4:	f7fd fadc 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 80072b8:	61f8      	str	r0, [r7, #28]
        break;
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b8f      	ldr	r3, [pc, #572]	; (80074fc <UART_SetConfig+0x56c>)
 80072be:	61fb      	str	r3, [r7, #28]
        break;
 80072c0:	e00d      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd fa3d 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80072c6:	61f8      	str	r0, [r7, #28]
        break;
 80072c8:	e009      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	61fb      	str	r3, [r7, #28]
        break;
 80072d0:	e005      	b.n	80072de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80fb 	beq.w	80074dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d305      	bcc.n	8007302 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d903      	bls.n	800730a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007308:	e0e8      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2200      	movs	r2, #0
 800730e:	461c      	mov	r4, r3
 8007310:	4615      	mov	r5, r2
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	022b      	lsls	r3, r5, #8
 800731c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007320:	0222      	lsls	r2, r4, #8
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6849      	ldr	r1, [r1, #4]
 8007326:	0849      	lsrs	r1, r1, #1
 8007328:	2000      	movs	r0, #0
 800732a:	4688      	mov	r8, r1
 800732c:	4681      	mov	r9, r0
 800732e:	eb12 0a08 	adds.w	sl, r2, r8
 8007332:	eb43 0b09 	adc.w	fp, r3, r9
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	603b      	str	r3, [r7, #0]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007344:	4650      	mov	r0, sl
 8007346:	4659      	mov	r1, fp
 8007348:	f7f9 fc2e 	bl	8000ba8 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800735a:	d308      	bcc.n	800736e <UART_SetConfig+0x3de>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d204      	bcs.n	800736e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	e0b6      	b.n	80074dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007374:	e0b2      	b.n	80074dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737e:	d15e      	bne.n	800743e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007384:	2b08      	cmp	r3, #8
 8007386:	d828      	bhi.n	80073da <UART_SetConfig+0x44a>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x400>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073c5 	.word	0x080073c5
 800739c:	080073db 	.word	0x080073db
 80073a0:	080073cb 	.word	0x080073cb
 80073a4:	080073db 	.word	0x080073db
 80073a8:	080073db 	.word	0x080073db
 80073ac:	080073db 	.word	0x080073db
 80073b0:	080073d3 	.word	0x080073d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b4:	f7fd fa5c 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 80073b8:	61f8      	str	r0, [r7, #28]
        break;
 80073ba:	e014      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073bc:	f7fd fa6e 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 80073c0:	61f8      	str	r0, [r7, #28]
        break;
 80073c2:	e010      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c4:	4b4d      	ldr	r3, [pc, #308]	; (80074fc <UART_SetConfig+0x56c>)
 80073c6:	61fb      	str	r3, [r7, #28]
        break;
 80073c8:	e00d      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ca:	f7fd f9b9 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80073ce:	61f8      	str	r0, [r7, #28]
        break;
 80073d0:	e009      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d6:	61fb      	str	r3, [r7, #28]
        break;
 80073d8:	e005      	b.n	80073e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d077      	beq.n	80074dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	005a      	lsls	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	441a      	add	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b0f      	cmp	r3, #15
 8007406:	d916      	bls.n	8007436 <UART_SetConfig+0x4a6>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740e:	d212      	bcs.n	8007436 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f023 030f 	bic.w	r3, r3, #15
 8007418:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	b29b      	uxth	r3, r3
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	b29a      	uxth	r2, r3
 8007426:	8afb      	ldrh	r3, [r7, #22]
 8007428:	4313      	orrs	r3, r2
 800742a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	8afa      	ldrh	r2, [r7, #22]
 8007432:	60da      	str	r2, [r3, #12]
 8007434:	e052      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800743c:	e04e      	b.n	80074dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007442:	2b08      	cmp	r3, #8
 8007444:	d827      	bhi.n	8007496 <UART_SetConfig+0x506>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <UART_SetConfig+0x4bc>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	08007497 	.word	0x08007497
 800745c:	08007487 	.word	0x08007487
 8007460:	08007497 	.word	0x08007497
 8007464:	08007497 	.word	0x08007497
 8007468:	08007497 	.word	0x08007497
 800746c:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007470:	f7fd f9fe 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8007474:	61f8      	str	r0, [r7, #28]
        break;
 8007476:	e014      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fd fa10 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 800747c:	61f8      	str	r0, [r7, #28]
        break;
 800747e:	e010      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <UART_SetConfig+0x56c>)
 8007482:	61fb      	str	r3, [r7, #28]
        break;
 8007484:	e00d      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fd f95b 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 800748a:	61f8      	str	r0, [r7, #28]
        break;
 800748c:	e009      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007492:	61fb      	str	r3, [r7, #28]
        break;
 8007494:	e005      	b.n	80074a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074a0:	bf00      	nop
    }

    if (pclk != 0U)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d019      	beq.n	80074dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	085a      	lsrs	r2, r3, #1
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	441a      	add	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d909      	bls.n	80074d6 <UART_SetConfig+0x546>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d205      	bcs.n	80074d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	e002      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	; 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f6:	bf00      	nop
 80074f8:	40008000 	.word	0x40008000
 80074fc:	00f42400 	.word	0x00f42400

08007500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fe:	d10a      	bne.n	8007616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b098      	sub	sp, #96	; 0x60
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007654:	f7fa fbd0 	bl	8001df8 <HAL_GetTick>
 8007658:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d12e      	bne.n	80076c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007670:	2200      	movs	r2, #0
 8007672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f88c 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d021      	beq.n	80076c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007696:	653b      	str	r3, [r7, #80]	; 0x50
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	647b      	str	r3, [r7, #68]	; 0x44
 80076a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e062      	b.n	800778c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d149      	bne.n	8007768 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076dc:	2200      	movs	r2, #0
 80076de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f856 	bl	8007794 <UART_WaitOnFlagUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d03c      	beq.n	8007768 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	623b      	str	r3, [r7, #32]
   return(result);
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
 800770e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e6      	bne.n	80076ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007740:	61fa      	str	r2, [r7, #28]
 8007742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	69b9      	ldr	r1, [r7, #24]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	617b      	str	r3, [r7, #20]
   return(result);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e011      	b.n	800778c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3758      	adds	r7, #88	; 0x58
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	e049      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d045      	beq.n	800783a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ae:	f7fa fb23 	bl	8001df8 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d302      	bcc.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e048      	b.n	800785a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d031      	beq.n	800783a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d110      	bne.n	8007806 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2208      	movs	r2, #8
 80077ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f838 	bl	8007862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2208      	movs	r2, #8
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e029      	b.n	800785a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007814:	d111      	bne.n	800783a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f81e 	bl	8007862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e00f      	b.n	800785a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4013      	ands	r3, r2
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	bf0c      	ite	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	2300      	movne	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	429a      	cmp	r2, r3
 8007856:	d0a6      	beq.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007862:	b480      	push	{r7}
 8007864:	b095      	sub	sp, #84	; 0x54
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007888:	643b      	str	r3, [r7, #64]	; 0x40
 800788a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800788e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e6      	bne.n	800786a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d118      	bne.n	800790a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f023 0310 	bic.w	r3, r3, #16
 80078ec:	647b      	str	r3, [r7, #68]	; 0x44
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	613b      	str	r3, [r7, #16]
   return(result);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e6      	bne.n	80078d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800791e:	bf00      	nop
 8007920:	3754      	adds	r7, #84	; 0x54
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <__cvt>:
 800792a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800792e:	ec55 4b10 	vmov	r4, r5, d0
 8007932:	2d00      	cmp	r5, #0
 8007934:	460e      	mov	r6, r1
 8007936:	4619      	mov	r1, r3
 8007938:	462b      	mov	r3, r5
 800793a:	bfbb      	ittet	lt
 800793c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007940:	461d      	movlt	r5, r3
 8007942:	2300      	movge	r3, #0
 8007944:	232d      	movlt	r3, #45	; 0x2d
 8007946:	700b      	strb	r3, [r1, #0]
 8007948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800794a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800794e:	4691      	mov	r9, r2
 8007950:	f023 0820 	bic.w	r8, r3, #32
 8007954:	bfbc      	itt	lt
 8007956:	4622      	movlt	r2, r4
 8007958:	4614      	movlt	r4, r2
 800795a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800795e:	d005      	beq.n	800796c <__cvt+0x42>
 8007960:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007964:	d100      	bne.n	8007968 <__cvt+0x3e>
 8007966:	3601      	adds	r6, #1
 8007968:	2102      	movs	r1, #2
 800796a:	e000      	b.n	800796e <__cvt+0x44>
 800796c:	2103      	movs	r1, #3
 800796e:	ab03      	add	r3, sp, #12
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	ab02      	add	r3, sp, #8
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	ec45 4b10 	vmov	d0, r4, r5
 800797a:	4653      	mov	r3, sl
 800797c:	4632      	mov	r2, r6
 800797e:	f000 fe37 	bl	80085f0 <_dtoa_r>
 8007982:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007986:	4607      	mov	r7, r0
 8007988:	d102      	bne.n	8007990 <__cvt+0x66>
 800798a:	f019 0f01 	tst.w	r9, #1
 800798e:	d022      	beq.n	80079d6 <__cvt+0xac>
 8007990:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007994:	eb07 0906 	add.w	r9, r7, r6
 8007998:	d110      	bne.n	80079bc <__cvt+0x92>
 800799a:	783b      	ldrb	r3, [r7, #0]
 800799c:	2b30      	cmp	r3, #48	; 0x30
 800799e:	d10a      	bne.n	80079b6 <__cvt+0x8c>
 80079a0:	2200      	movs	r2, #0
 80079a2:	2300      	movs	r3, #0
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f9 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ac:	b918      	cbnz	r0, 80079b6 <__cvt+0x8c>
 80079ae:	f1c6 0601 	rsb	r6, r6, #1
 80079b2:	f8ca 6000 	str.w	r6, [sl]
 80079b6:	f8da 3000 	ldr.w	r3, [sl]
 80079ba:	4499      	add	r9, r3
 80079bc:	2200      	movs	r2, #0
 80079be:	2300      	movs	r3, #0
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f9 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c8:	b108      	cbz	r0, 80079ce <__cvt+0xa4>
 80079ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80079ce:	2230      	movs	r2, #48	; 0x30
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	454b      	cmp	r3, r9
 80079d4:	d307      	bcc.n	80079e6 <__cvt+0xbc>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079da:	1bdb      	subs	r3, r3, r7
 80079dc:	4638      	mov	r0, r7
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	b004      	add	sp, #16
 80079e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e6:	1c59      	adds	r1, r3, #1
 80079e8:	9103      	str	r1, [sp, #12]
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e7f0      	b.n	80079d0 <__cvt+0xa6>

080079ee <__exponent>:
 80079ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f0:	4603      	mov	r3, r0
 80079f2:	2900      	cmp	r1, #0
 80079f4:	bfb8      	it	lt
 80079f6:	4249      	neglt	r1, r1
 80079f8:	f803 2b02 	strb.w	r2, [r3], #2
 80079fc:	bfb4      	ite	lt
 80079fe:	222d      	movlt	r2, #45	; 0x2d
 8007a00:	222b      	movge	r2, #43	; 0x2b
 8007a02:	2909      	cmp	r1, #9
 8007a04:	7042      	strb	r2, [r0, #1]
 8007a06:	dd2a      	ble.n	8007a5e <__exponent+0x70>
 8007a08:	f10d 0207 	add.w	r2, sp, #7
 8007a0c:	4617      	mov	r7, r2
 8007a0e:	260a      	movs	r6, #10
 8007a10:	4694      	mov	ip, r2
 8007a12:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a16:	fb06 1415 	mls	r4, r6, r5, r1
 8007a1a:	3430      	adds	r4, #48	; 0x30
 8007a1c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007a20:	460c      	mov	r4, r1
 8007a22:	2c63      	cmp	r4, #99	; 0x63
 8007a24:	f102 32ff 	add.w	r2, r2, #4294967295
 8007a28:	4629      	mov	r1, r5
 8007a2a:	dcf1      	bgt.n	8007a10 <__exponent+0x22>
 8007a2c:	3130      	adds	r1, #48	; 0x30
 8007a2e:	f1ac 0402 	sub.w	r4, ip, #2
 8007a32:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a36:	1c41      	adds	r1, r0, #1
 8007a38:	4622      	mov	r2, r4
 8007a3a:	42ba      	cmp	r2, r7
 8007a3c:	d30a      	bcc.n	8007a54 <__exponent+0x66>
 8007a3e:	f10d 0209 	add.w	r2, sp, #9
 8007a42:	eba2 020c 	sub.w	r2, r2, ip
 8007a46:	42bc      	cmp	r4, r7
 8007a48:	bf88      	it	hi
 8007a4a:	2200      	movhi	r2, #0
 8007a4c:	4413      	add	r3, r2
 8007a4e:	1a18      	subs	r0, r3, r0
 8007a50:	b003      	add	sp, #12
 8007a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a54:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a58:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007a5c:	e7ed      	b.n	8007a3a <__exponent+0x4c>
 8007a5e:	2330      	movs	r3, #48	; 0x30
 8007a60:	3130      	adds	r1, #48	; 0x30
 8007a62:	7083      	strb	r3, [r0, #2]
 8007a64:	70c1      	strb	r1, [r0, #3]
 8007a66:	1d03      	adds	r3, r0, #4
 8007a68:	e7f1      	b.n	8007a4e <__exponent+0x60>
	...

08007a6c <_printf_float>:
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	ed2d 8b02 	vpush	{d8}
 8007a74:	b08d      	sub	sp, #52	; 0x34
 8007a76:	460c      	mov	r4, r1
 8007a78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	461f      	mov	r7, r3
 8007a80:	4605      	mov	r5, r0
 8007a82:	f000 fcb5 	bl	80083f0 <_localeconv_r>
 8007a86:	f8d0 a000 	ldr.w	sl, [r0]
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	f7f8 fbf0 	bl	8000270 <strlen>
 8007a90:	2300      	movs	r3, #0
 8007a92:	930a      	str	r3, [sp, #40]	; 0x28
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	9305      	str	r3, [sp, #20]
 8007a98:	f8d8 3000 	ldr.w	r3, [r8]
 8007a9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	f103 0208 	add.w	r2, r3, #8
 8007aaa:	f8c8 2000 	str.w	r2, [r8]
 8007aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007abc:	ee08 0a10 	vmov	s16, r0
 8007ac0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac8:	4b9e      	ldr	r3, [pc, #632]	; (8007d44 <_printf_float+0x2d8>)
 8007aca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ace:	f7f9 f82d 	bl	8000b2c <__aeabi_dcmpun>
 8007ad2:	bb88      	cbnz	r0, 8007b38 <_printf_float+0xcc>
 8007ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ad8:	4b9a      	ldr	r3, [pc, #616]	; (8007d44 <_printf_float+0x2d8>)
 8007ada:	f04f 32ff 	mov.w	r2, #4294967295
 8007ade:	f7f9 f807 	bl	8000af0 <__aeabi_dcmple>
 8007ae2:	bb48      	cbnz	r0, 8007b38 <_printf_float+0xcc>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f8 fff6 	bl	8000adc <__aeabi_dcmplt>
 8007af0:	b110      	cbz	r0, 8007af8 <_printf_float+0x8c>
 8007af2:	232d      	movs	r3, #45	; 0x2d
 8007af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af8:	4a93      	ldr	r2, [pc, #588]	; (8007d48 <_printf_float+0x2dc>)
 8007afa:	4b94      	ldr	r3, [pc, #592]	; (8007d4c <_printf_float+0x2e0>)
 8007afc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b00:	bf94      	ite	ls
 8007b02:	4690      	movls	r8, r2
 8007b04:	4698      	movhi	r8, r3
 8007b06:	2303      	movs	r3, #3
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	f023 0304 	bic.w	r3, r3, #4
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	f04f 0900 	mov.w	r9, #0
 8007b16:	9700      	str	r7, [sp, #0]
 8007b18:	4633      	mov	r3, r6
 8007b1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 f9da 	bl	8007ed8 <_printf_common>
 8007b24:	3001      	adds	r0, #1
 8007b26:	f040 8090 	bne.w	8007c4a <_printf_float+0x1de>
 8007b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2e:	b00d      	add	sp, #52	; 0x34
 8007b30:	ecbd 8b02 	vpop	{d8}
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 fff4 	bl	8000b2c <__aeabi_dcmpun>
 8007b44:	b140      	cbz	r0, 8007b58 <_printf_float+0xec>
 8007b46:	464b      	mov	r3, r9
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfbc      	itt	lt
 8007b4c:	232d      	movlt	r3, #45	; 0x2d
 8007b4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b52:	4a7f      	ldr	r2, [pc, #508]	; (8007d50 <_printf_float+0x2e4>)
 8007b54:	4b7f      	ldr	r3, [pc, #508]	; (8007d54 <_printf_float+0x2e8>)
 8007b56:	e7d1      	b.n	8007afc <_printf_float+0x90>
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b5e:	9206      	str	r2, [sp, #24]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	d13f      	bne.n	8007be4 <_printf_float+0x178>
 8007b64:	2306      	movs	r3, #6
 8007b66:	6063      	str	r3, [r4, #4]
 8007b68:	9b05      	ldr	r3, [sp, #20]
 8007b6a:	6861      	ldr	r1, [r4, #4]
 8007b6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b70:	2300      	movs	r3, #0
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	ab0a      	add	r3, sp, #40	; 0x28
 8007b76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b7a:	ab09      	add	r3, sp, #36	; 0x24
 8007b7c:	ec49 8b10 	vmov	d0, r8, r9
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7ff fece 	bl	800792a <__cvt>
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b92:	2b47      	cmp	r3, #71	; 0x47
 8007b94:	4680      	mov	r8, r0
 8007b96:	d108      	bne.n	8007baa <_printf_float+0x13e>
 8007b98:	1cc8      	adds	r0, r1, #3
 8007b9a:	db02      	blt.n	8007ba2 <_printf_float+0x136>
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	dd41      	ble.n	8007c26 <_printf_float+0x1ba>
 8007ba2:	f1ab 0302 	sub.w	r3, fp, #2
 8007ba6:	fa5f fb83 	uxtb.w	fp, r3
 8007baa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bae:	d820      	bhi.n	8007bf2 <_printf_float+0x186>
 8007bb0:	3901      	subs	r1, #1
 8007bb2:	465a      	mov	r2, fp
 8007bb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8007bba:	f7ff ff18 	bl	80079ee <__exponent>
 8007bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bc0:	1813      	adds	r3, r2, r0
 8007bc2:	2a01      	cmp	r2, #1
 8007bc4:	4681      	mov	r9, r0
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	dc02      	bgt.n	8007bd0 <_printf_float+0x164>
 8007bca:	6822      	ldr	r2, [r4, #0]
 8007bcc:	07d2      	lsls	r2, r2, #31
 8007bce:	d501      	bpl.n	8007bd4 <_printf_float+0x168>
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d09c      	beq.n	8007b16 <_printf_float+0xaa>
 8007bdc:	232d      	movs	r3, #45	; 0x2d
 8007bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be2:	e798      	b.n	8007b16 <_printf_float+0xaa>
 8007be4:	9a06      	ldr	r2, [sp, #24]
 8007be6:	2a47      	cmp	r2, #71	; 0x47
 8007be8:	d1be      	bne.n	8007b68 <_printf_float+0xfc>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1bc      	bne.n	8007b68 <_printf_float+0xfc>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e7b9      	b.n	8007b66 <_printf_float+0xfa>
 8007bf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bf6:	d118      	bne.n	8007c2a <_printf_float+0x1be>
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	dd0b      	ble.n	8007c16 <_printf_float+0x1aa>
 8007bfe:	6121      	str	r1, [r4, #16]
 8007c00:	b913      	cbnz	r3, 8007c08 <_printf_float+0x19c>
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	07d0      	lsls	r0, r2, #31
 8007c06:	d502      	bpl.n	8007c0e <_printf_float+0x1a2>
 8007c08:	3301      	adds	r3, #1
 8007c0a:	440b      	add	r3, r1
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c10:	f04f 0900 	mov.w	r9, #0
 8007c14:	e7de      	b.n	8007bd4 <_printf_float+0x168>
 8007c16:	b913      	cbnz	r3, 8007c1e <_printf_float+0x1b2>
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	07d2      	lsls	r2, r2, #31
 8007c1c:	d501      	bpl.n	8007c22 <_printf_float+0x1b6>
 8007c1e:	3302      	adds	r3, #2
 8007c20:	e7f4      	b.n	8007c0c <_printf_float+0x1a0>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7f2      	b.n	8007c0c <_printf_float+0x1a0>
 8007c26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	db05      	blt.n	8007c3c <_printf_float+0x1d0>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	6121      	str	r1, [r4, #16]
 8007c34:	07d8      	lsls	r0, r3, #31
 8007c36:	d5ea      	bpl.n	8007c0e <_printf_float+0x1a2>
 8007c38:	1c4b      	adds	r3, r1, #1
 8007c3a:	e7e7      	b.n	8007c0c <_printf_float+0x1a0>
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	bfd4      	ite	le
 8007c40:	f1c1 0202 	rsble	r2, r1, #2
 8007c44:	2201      	movgt	r2, #1
 8007c46:	4413      	add	r3, r2
 8007c48:	e7e0      	b.n	8007c0c <_printf_float+0x1a0>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	055a      	lsls	r2, r3, #21
 8007c4e:	d407      	bmi.n	8007c60 <_printf_float+0x1f4>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	4642      	mov	r2, r8
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d12c      	bne.n	8007cb8 <_printf_float+0x24c>
 8007c5e:	e764      	b.n	8007b2a <_printf_float+0xbe>
 8007c60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c64:	f240 80e0 	bls.w	8007e28 <_printf_float+0x3bc>
 8007c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f7f8 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d034      	beq.n	8007ce2 <_printf_float+0x276>
 8007c78:	4a37      	ldr	r2, [pc, #220]	; (8007d58 <_printf_float+0x2ec>)
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af51 	beq.w	8007b2a <_printf_float+0xbe>
 8007c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	db02      	blt.n	8007c96 <_printf_float+0x22a>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	07d8      	lsls	r0, r3, #31
 8007c94:	d510      	bpl.n	8007cb8 <_printf_float+0x24c>
 8007c96:	ee18 3a10 	vmov	r3, s16
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	f43f af41 	beq.w	8007b2a <_printf_float+0xbe>
 8007ca8:	f04f 0800 	mov.w	r8, #0
 8007cac:	f104 091a 	add.w	r9, r4, #26
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	dc09      	bgt.n	8007ccc <_printf_float+0x260>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	079b      	lsls	r3, r3, #30
 8007cbc:	f100 8107 	bmi.w	8007ece <_printf_float+0x462>
 8007cc0:	68e0      	ldr	r0, [r4, #12]
 8007cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc4:	4298      	cmp	r0, r3
 8007cc6:	bfb8      	it	lt
 8007cc8:	4618      	movlt	r0, r3
 8007cca:	e730      	b.n	8007b2e <_printf_float+0xc2>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	464a      	mov	r2, r9
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	f43f af27 	beq.w	8007b2a <_printf_float+0xbe>
 8007cdc:	f108 0801 	add.w	r8, r8, #1
 8007ce0:	e7e6      	b.n	8007cb0 <_printf_float+0x244>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dc39      	bgt.n	8007d5c <_printf_float+0x2f0>
 8007ce8:	4a1b      	ldr	r2, [pc, #108]	; (8007d58 <_printf_float+0x2ec>)
 8007cea:	2301      	movs	r3, #1
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af19 	beq.w	8007b2a <_printf_float+0xbe>
 8007cf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	d102      	bne.n	8007d06 <_printf_float+0x29a>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	d5d8      	bpl.n	8007cb8 <_printf_float+0x24c>
 8007d06:	ee18 3a10 	vmov	r3, s16
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	f43f af09 	beq.w	8007b2a <_printf_float+0xbe>
 8007d18:	f04f 0900 	mov.w	r9, #0
 8007d1c:	f104 0a1a 	add.w	sl, r4, #26
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	425b      	negs	r3, r3
 8007d24:	454b      	cmp	r3, r9
 8007d26:	dc01      	bgt.n	8007d2c <_printf_float+0x2c0>
 8007d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2a:	e792      	b.n	8007c52 <_printf_float+0x1e6>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4652      	mov	r2, sl
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f aef7 	beq.w	8007b2a <_printf_float+0xbe>
 8007d3c:	f109 0901 	add.w	r9, r9, #1
 8007d40:	e7ee      	b.n	8007d20 <_printf_float+0x2b4>
 8007d42:	bf00      	nop
 8007d44:	7fefffff 	.word	0x7fefffff
 8007d48:	0800a2ec 	.word	0x0800a2ec
 8007d4c:	0800a2f0 	.word	0x0800a2f0
 8007d50:	0800a2f4 	.word	0x0800a2f4
 8007d54:	0800a2f8 	.word	0x0800a2f8
 8007d58:	0800a2fc 	.word	0x0800a2fc
 8007d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d60:	429a      	cmp	r2, r3
 8007d62:	bfa8      	it	ge
 8007d64:	461a      	movge	r2, r3
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	4691      	mov	r9, r2
 8007d6a:	dc37      	bgt.n	8007ddc <_printf_float+0x370>
 8007d6c:	f04f 0b00 	mov.w	fp, #0
 8007d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d74:	f104 021a 	add.w	r2, r4, #26
 8007d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d7a:	9305      	str	r3, [sp, #20]
 8007d7c:	eba3 0309 	sub.w	r3, r3, r9
 8007d80:	455b      	cmp	r3, fp
 8007d82:	dc33      	bgt.n	8007dec <_printf_float+0x380>
 8007d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	db3b      	blt.n	8007e04 <_printf_float+0x398>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	07da      	lsls	r2, r3, #31
 8007d90:	d438      	bmi.n	8007e04 <_printf_float+0x398>
 8007d92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d96:	eba2 0903 	sub.w	r9, r2, r3
 8007d9a:	9b05      	ldr	r3, [sp, #20]
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	4591      	cmp	r9, r2
 8007da0:	bfa8      	it	ge
 8007da2:	4691      	movge	r9, r2
 8007da4:	f1b9 0f00 	cmp.w	r9, #0
 8007da8:	dc35      	bgt.n	8007e16 <_printf_float+0x3aa>
 8007daa:	f04f 0800 	mov.w	r8, #0
 8007dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007db2:	f104 0a1a 	add.w	sl, r4, #26
 8007db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	eba3 0309 	sub.w	r3, r3, r9
 8007dc0:	4543      	cmp	r3, r8
 8007dc2:	f77f af79 	ble.w	8007cb8 <_printf_float+0x24c>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4652      	mov	r2, sl
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b8      	blx	r7
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f43f aeaa 	beq.w	8007b2a <_printf_float+0xbe>
 8007dd6:	f108 0801 	add.w	r8, r8, #1
 8007dda:	e7ec      	b.n	8007db6 <_printf_float+0x34a>
 8007ddc:	4613      	mov	r3, r2
 8007dde:	4631      	mov	r1, r6
 8007de0:	4642      	mov	r2, r8
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	d1c0      	bne.n	8007d6c <_printf_float+0x300>
 8007dea:	e69e      	b.n	8007b2a <_printf_float+0xbe>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	9205      	str	r2, [sp, #20]
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f ae97 	beq.w	8007b2a <_printf_float+0xbe>
 8007dfc:	9a05      	ldr	r2, [sp, #20]
 8007dfe:	f10b 0b01 	add.w	fp, fp, #1
 8007e02:	e7b9      	b.n	8007d78 <_printf_float+0x30c>
 8007e04:	ee18 3a10 	vmov	r3, s16
 8007e08:	4652      	mov	r2, sl
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	d1be      	bne.n	8007d92 <_printf_float+0x326>
 8007e14:	e689      	b.n	8007b2a <_printf_float+0xbe>
 8007e16:	9a05      	ldr	r2, [sp, #20]
 8007e18:	464b      	mov	r3, r9
 8007e1a:	4442      	add	r2, r8
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	d1c1      	bne.n	8007daa <_printf_float+0x33e>
 8007e26:	e680      	b.n	8007b2a <_printf_float+0xbe>
 8007e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2a:	2a01      	cmp	r2, #1
 8007e2c:	dc01      	bgt.n	8007e32 <_printf_float+0x3c6>
 8007e2e:	07db      	lsls	r3, r3, #31
 8007e30:	d53a      	bpl.n	8007ea8 <_printf_float+0x43c>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4642      	mov	r2, r8
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f ae74 	beq.w	8007b2a <_printf_float+0xbe>
 8007e42:	ee18 3a10 	vmov	r3, s16
 8007e46:	4652      	mov	r2, sl
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f43f ae6b 	beq.w	8007b2a <_printf_float+0xbe>
 8007e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007e60:	f7f8 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e64:	b9d8      	cbnz	r0, 8007e9e <_printf_float+0x432>
 8007e66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e6a:	f108 0201 	add.w	r2, r8, #1
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b8      	blx	r7
 8007e74:	3001      	adds	r0, #1
 8007e76:	d10e      	bne.n	8007e96 <_printf_float+0x42a>
 8007e78:	e657      	b.n	8007b2a <_printf_float+0xbe>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae50 	beq.w	8007b2a <_printf_float+0xbe>
 8007e8a:	f108 0801 	add.w	r8, r8, #1
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	3b01      	subs	r3, #1
 8007e92:	4543      	cmp	r3, r8
 8007e94:	dcf1      	bgt.n	8007e7a <_printf_float+0x40e>
 8007e96:	464b      	mov	r3, r9
 8007e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e9c:	e6da      	b.n	8007c54 <_printf_float+0x1e8>
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	f104 0a1a 	add.w	sl, r4, #26
 8007ea6:	e7f2      	b.n	8007e8e <_printf_float+0x422>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4642      	mov	r2, r8
 8007eac:	e7df      	b.n	8007e6e <_printf_float+0x402>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	464a      	mov	r2, r9
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f ae36 	beq.w	8007b2a <_printf_float+0xbe>
 8007ebe:	f108 0801 	add.w	r8, r8, #1
 8007ec2:	68e3      	ldr	r3, [r4, #12]
 8007ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ec6:	1a5b      	subs	r3, r3, r1
 8007ec8:	4543      	cmp	r3, r8
 8007eca:	dcf0      	bgt.n	8007eae <_printf_float+0x442>
 8007ecc:	e6f8      	b.n	8007cc0 <_printf_float+0x254>
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	f104 0919 	add.w	r9, r4, #25
 8007ed6:	e7f4      	b.n	8007ec2 <_printf_float+0x456>

08007ed8 <_printf_common>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	4616      	mov	r6, r2
 8007ede:	4699      	mov	r9, r3
 8007ee0:	688a      	ldr	r2, [r1, #8]
 8007ee2:	690b      	ldr	r3, [r1, #16]
 8007ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	bfb8      	it	lt
 8007eec:	4613      	movlt	r3, r2
 8007eee:	6033      	str	r3, [r6, #0]
 8007ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b10a      	cbz	r2, 8007efe <_printf_common+0x26>
 8007efa:	3301      	adds	r3, #1
 8007efc:	6033      	str	r3, [r6, #0]
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	0699      	lsls	r1, r3, #26
 8007f02:	bf42      	ittt	mi
 8007f04:	6833      	ldrmi	r3, [r6, #0]
 8007f06:	3302      	addmi	r3, #2
 8007f08:	6033      	strmi	r3, [r6, #0]
 8007f0a:	6825      	ldr	r5, [r4, #0]
 8007f0c:	f015 0506 	ands.w	r5, r5, #6
 8007f10:	d106      	bne.n	8007f20 <_printf_common+0x48>
 8007f12:	f104 0a19 	add.w	sl, r4, #25
 8007f16:	68e3      	ldr	r3, [r4, #12]
 8007f18:	6832      	ldr	r2, [r6, #0]
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	42ab      	cmp	r3, r5
 8007f1e:	dc26      	bgt.n	8007f6e <_printf_common+0x96>
 8007f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f24:	1e13      	subs	r3, r2, #0
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	bf18      	it	ne
 8007f2a:	2301      	movne	r3, #1
 8007f2c:	0692      	lsls	r2, r2, #26
 8007f2e:	d42b      	bmi.n	8007f88 <_printf_common+0xb0>
 8007f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f34:	4649      	mov	r1, r9
 8007f36:	4638      	mov	r0, r7
 8007f38:	47c0      	blx	r8
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	d01e      	beq.n	8007f7c <_printf_common+0xa4>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	6922      	ldr	r2, [r4, #16]
 8007f42:	f003 0306 	and.w	r3, r3, #6
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	bf02      	ittt	eq
 8007f4a:	68e5      	ldreq	r5, [r4, #12]
 8007f4c:	6833      	ldreq	r3, [r6, #0]
 8007f4e:	1aed      	subeq	r5, r5, r3
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	bf0c      	ite	eq
 8007f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f58:	2500      	movne	r5, #0
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	bfc4      	itt	gt
 8007f5e:	1a9b      	subgt	r3, r3, r2
 8007f60:	18ed      	addgt	r5, r5, r3
 8007f62:	2600      	movs	r6, #0
 8007f64:	341a      	adds	r4, #26
 8007f66:	42b5      	cmp	r5, r6
 8007f68:	d11a      	bne.n	8007fa0 <_printf_common+0xc8>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e008      	b.n	8007f80 <_printf_common+0xa8>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4652      	mov	r2, sl
 8007f72:	4649      	mov	r1, r9
 8007f74:	4638      	mov	r0, r7
 8007f76:	47c0      	blx	r8
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d103      	bne.n	8007f84 <_printf_common+0xac>
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	3501      	adds	r5, #1
 8007f86:	e7c6      	b.n	8007f16 <_printf_common+0x3e>
 8007f88:	18e1      	adds	r1, r4, r3
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	2030      	movs	r0, #48	; 0x30
 8007f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f92:	4422      	add	r2, r4
 8007f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	e7c7      	b.n	8007f30 <_printf_common+0x58>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c0      	blx	r8
 8007faa:	3001      	adds	r0, #1
 8007fac:	d0e6      	beq.n	8007f7c <_printf_common+0xa4>
 8007fae:	3601      	adds	r6, #1
 8007fb0:	e7d9      	b.n	8007f66 <_printf_common+0x8e>
	...

08007fb4 <_printf_i>:
 8007fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	7e0f      	ldrb	r7, [r1, #24]
 8007fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fbc:	2f78      	cmp	r7, #120	; 0x78
 8007fbe:	4691      	mov	r9, r2
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	469a      	mov	sl, r3
 8007fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fca:	d807      	bhi.n	8007fdc <_printf_i+0x28>
 8007fcc:	2f62      	cmp	r7, #98	; 0x62
 8007fce:	d80a      	bhi.n	8007fe6 <_printf_i+0x32>
 8007fd0:	2f00      	cmp	r7, #0
 8007fd2:	f000 80d4 	beq.w	800817e <_printf_i+0x1ca>
 8007fd6:	2f58      	cmp	r7, #88	; 0x58
 8007fd8:	f000 80c0 	beq.w	800815c <_printf_i+0x1a8>
 8007fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fe4:	e03a      	b.n	800805c <_printf_i+0xa8>
 8007fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fea:	2b15      	cmp	r3, #21
 8007fec:	d8f6      	bhi.n	8007fdc <_printf_i+0x28>
 8007fee:	a101      	add	r1, pc, #4	; (adr r1, 8007ff4 <_printf_i+0x40>)
 8007ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ff4:	0800804d 	.word	0x0800804d
 8007ff8:	08008061 	.word	0x08008061
 8007ffc:	08007fdd 	.word	0x08007fdd
 8008000:	08007fdd 	.word	0x08007fdd
 8008004:	08007fdd 	.word	0x08007fdd
 8008008:	08007fdd 	.word	0x08007fdd
 800800c:	08008061 	.word	0x08008061
 8008010:	08007fdd 	.word	0x08007fdd
 8008014:	08007fdd 	.word	0x08007fdd
 8008018:	08007fdd 	.word	0x08007fdd
 800801c:	08007fdd 	.word	0x08007fdd
 8008020:	08008165 	.word	0x08008165
 8008024:	0800808d 	.word	0x0800808d
 8008028:	0800811f 	.word	0x0800811f
 800802c:	08007fdd 	.word	0x08007fdd
 8008030:	08007fdd 	.word	0x08007fdd
 8008034:	08008187 	.word	0x08008187
 8008038:	08007fdd 	.word	0x08007fdd
 800803c:	0800808d 	.word	0x0800808d
 8008040:	08007fdd 	.word	0x08007fdd
 8008044:	08007fdd 	.word	0x08007fdd
 8008048:	08008127 	.word	0x08008127
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	1d1a      	adds	r2, r3, #4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	602a      	str	r2, [r5, #0]
 8008054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800805c:	2301      	movs	r3, #1
 800805e:	e09f      	b.n	80081a0 <_printf_i+0x1ec>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	682b      	ldr	r3, [r5, #0]
 8008064:	0607      	lsls	r7, r0, #24
 8008066:	f103 0104 	add.w	r1, r3, #4
 800806a:	6029      	str	r1, [r5, #0]
 800806c:	d501      	bpl.n	8008072 <_printf_i+0xbe>
 800806e:	681e      	ldr	r6, [r3, #0]
 8008070:	e003      	b.n	800807a <_printf_i+0xc6>
 8008072:	0646      	lsls	r6, r0, #25
 8008074:	d5fb      	bpl.n	800806e <_printf_i+0xba>
 8008076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800807a:	2e00      	cmp	r6, #0
 800807c:	da03      	bge.n	8008086 <_printf_i+0xd2>
 800807e:	232d      	movs	r3, #45	; 0x2d
 8008080:	4276      	negs	r6, r6
 8008082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008086:	485a      	ldr	r0, [pc, #360]	; (80081f0 <_printf_i+0x23c>)
 8008088:	230a      	movs	r3, #10
 800808a:	e012      	b.n	80080b2 <_printf_i+0xfe>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	1d19      	adds	r1, r3, #4
 8008092:	6029      	str	r1, [r5, #0]
 8008094:	0605      	lsls	r5, r0, #24
 8008096:	d501      	bpl.n	800809c <_printf_i+0xe8>
 8008098:	681e      	ldr	r6, [r3, #0]
 800809a:	e002      	b.n	80080a2 <_printf_i+0xee>
 800809c:	0641      	lsls	r1, r0, #25
 800809e:	d5fb      	bpl.n	8008098 <_printf_i+0xe4>
 80080a0:	881e      	ldrh	r6, [r3, #0]
 80080a2:	4853      	ldr	r0, [pc, #332]	; (80081f0 <_printf_i+0x23c>)
 80080a4:	2f6f      	cmp	r7, #111	; 0x6f
 80080a6:	bf0c      	ite	eq
 80080a8:	2308      	moveq	r3, #8
 80080aa:	230a      	movne	r3, #10
 80080ac:	2100      	movs	r1, #0
 80080ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080b2:	6865      	ldr	r5, [r4, #4]
 80080b4:	60a5      	str	r5, [r4, #8]
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	bfa2      	ittt	ge
 80080ba:	6821      	ldrge	r1, [r4, #0]
 80080bc:	f021 0104 	bicge.w	r1, r1, #4
 80080c0:	6021      	strge	r1, [r4, #0]
 80080c2:	b90e      	cbnz	r6, 80080c8 <_printf_i+0x114>
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	d04b      	beq.n	8008160 <_printf_i+0x1ac>
 80080c8:	4615      	mov	r5, r2
 80080ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ce:	fb03 6711 	mls	r7, r3, r1, r6
 80080d2:	5dc7      	ldrb	r7, [r0, r7]
 80080d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080d8:	4637      	mov	r7, r6
 80080da:	42bb      	cmp	r3, r7
 80080dc:	460e      	mov	r6, r1
 80080de:	d9f4      	bls.n	80080ca <_printf_i+0x116>
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d10b      	bne.n	80080fc <_printf_i+0x148>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	07de      	lsls	r6, r3, #31
 80080e8:	d508      	bpl.n	80080fc <_printf_i+0x148>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	4299      	cmp	r1, r3
 80080f0:	bfde      	ittt	le
 80080f2:	2330      	movle	r3, #48	; 0x30
 80080f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080fc:	1b52      	subs	r2, r2, r5
 80080fe:	6122      	str	r2, [r4, #16]
 8008100:	f8cd a000 	str.w	sl, [sp]
 8008104:	464b      	mov	r3, r9
 8008106:	aa03      	add	r2, sp, #12
 8008108:	4621      	mov	r1, r4
 800810a:	4640      	mov	r0, r8
 800810c:	f7ff fee4 	bl	8007ed8 <_printf_common>
 8008110:	3001      	adds	r0, #1
 8008112:	d14a      	bne.n	80081aa <_printf_i+0x1f6>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	b004      	add	sp, #16
 800811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f043 0320 	orr.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	4833      	ldr	r0, [pc, #204]	; (80081f4 <_printf_i+0x240>)
 8008128:	2778      	movs	r7, #120	; 0x78
 800812a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	6829      	ldr	r1, [r5, #0]
 8008132:	061f      	lsls	r7, r3, #24
 8008134:	f851 6b04 	ldr.w	r6, [r1], #4
 8008138:	d402      	bmi.n	8008140 <_printf_i+0x18c>
 800813a:	065f      	lsls	r7, r3, #25
 800813c:	bf48      	it	mi
 800813e:	b2b6      	uxthmi	r6, r6
 8008140:	07df      	lsls	r7, r3, #31
 8008142:	bf48      	it	mi
 8008144:	f043 0320 	orrmi.w	r3, r3, #32
 8008148:	6029      	str	r1, [r5, #0]
 800814a:	bf48      	it	mi
 800814c:	6023      	strmi	r3, [r4, #0]
 800814e:	b91e      	cbnz	r6, 8008158 <_printf_i+0x1a4>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	f023 0320 	bic.w	r3, r3, #32
 8008156:	6023      	str	r3, [r4, #0]
 8008158:	2310      	movs	r3, #16
 800815a:	e7a7      	b.n	80080ac <_printf_i+0xf8>
 800815c:	4824      	ldr	r0, [pc, #144]	; (80081f0 <_printf_i+0x23c>)
 800815e:	e7e4      	b.n	800812a <_printf_i+0x176>
 8008160:	4615      	mov	r5, r2
 8008162:	e7bd      	b.n	80080e0 <_printf_i+0x12c>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	6826      	ldr	r6, [r4, #0]
 8008168:	6961      	ldr	r1, [r4, #20]
 800816a:	1d18      	adds	r0, r3, #4
 800816c:	6028      	str	r0, [r5, #0]
 800816e:	0635      	lsls	r5, r6, #24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	d501      	bpl.n	8008178 <_printf_i+0x1c4>
 8008174:	6019      	str	r1, [r3, #0]
 8008176:	e002      	b.n	800817e <_printf_i+0x1ca>
 8008178:	0670      	lsls	r0, r6, #25
 800817a:	d5fb      	bpl.n	8008174 <_printf_i+0x1c0>
 800817c:	8019      	strh	r1, [r3, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	4615      	mov	r5, r2
 8008184:	e7bc      	b.n	8008100 <_printf_i+0x14c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	1d1a      	adds	r2, r3, #4
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	2100      	movs	r1, #0
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 f81c 	bl	80001d0 <memchr>
 8008198:	b108      	cbz	r0, 800819e <_printf_i+0x1ea>
 800819a:	1b40      	subs	r0, r0, r5
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	e7aa      	b.n	8008100 <_printf_i+0x14c>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	462a      	mov	r2, r5
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	47d0      	blx	sl
 80081b4:	3001      	adds	r0, #1
 80081b6:	d0ad      	beq.n	8008114 <_printf_i+0x160>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	d413      	bmi.n	80081e6 <_printf_i+0x232>
 80081be:	68e0      	ldr	r0, [r4, #12]
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	4298      	cmp	r0, r3
 80081c4:	bfb8      	it	lt
 80081c6:	4618      	movlt	r0, r3
 80081c8:	e7a6      	b.n	8008118 <_printf_i+0x164>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4632      	mov	r2, r6
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d09d      	beq.n	8008114 <_printf_i+0x160>
 80081d8:	3501      	adds	r5, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	9903      	ldr	r1, [sp, #12]
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dcf2      	bgt.n	80081ca <_printf_i+0x216>
 80081e4:	e7eb      	b.n	80081be <_printf_i+0x20a>
 80081e6:	2500      	movs	r5, #0
 80081e8:	f104 0619 	add.w	r6, r4, #25
 80081ec:	e7f5      	b.n	80081da <_printf_i+0x226>
 80081ee:	bf00      	nop
 80081f0:	0800a2fe 	.word	0x0800a2fe
 80081f4:	0800a30f 	.word	0x0800a30f

080081f8 <std>:
 80081f8:	2300      	movs	r3, #0
 80081fa:	b510      	push	{r4, lr}
 80081fc:	4604      	mov	r4, r0
 80081fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008206:	6083      	str	r3, [r0, #8]
 8008208:	8181      	strh	r1, [r0, #12]
 800820a:	6643      	str	r3, [r0, #100]	; 0x64
 800820c:	81c2      	strh	r2, [r0, #14]
 800820e:	6183      	str	r3, [r0, #24]
 8008210:	4619      	mov	r1, r3
 8008212:	2208      	movs	r2, #8
 8008214:	305c      	adds	r0, #92	; 0x5c
 8008216:	f000 f8e2 	bl	80083de <memset>
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <std+0x38>)
 800821c:	6263      	str	r3, [r4, #36]	; 0x24
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <std+0x3c>)
 8008220:	62a3      	str	r3, [r4, #40]	; 0x28
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <std+0x40>)
 8008224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008226:	4b05      	ldr	r3, [pc, #20]	; (800823c <std+0x44>)
 8008228:	6224      	str	r4, [r4, #32]
 800822a:	6323      	str	r3, [r4, #48]	; 0x30
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	08008359 	.word	0x08008359
 8008234:	0800837b 	.word	0x0800837b
 8008238:	080083b3 	.word	0x080083b3
 800823c:	080083d7 	.word	0x080083d7

08008240 <stdio_exit_handler>:
 8008240:	4a02      	ldr	r2, [pc, #8]	; (800824c <stdio_exit_handler+0xc>)
 8008242:	4903      	ldr	r1, [pc, #12]	; (8008250 <stdio_exit_handler+0x10>)
 8008244:	4803      	ldr	r0, [pc, #12]	; (8008254 <stdio_exit_handler+0x14>)
 8008246:	f000 b869 	b.w	800831c <_fwalk_sglue>
 800824a:	bf00      	nop
 800824c:	2000000c 	.word	0x2000000c
 8008250:	08009bd9 	.word	0x08009bd9
 8008254:	20000018 	.word	0x20000018

08008258 <cleanup_stdio>:
 8008258:	6841      	ldr	r1, [r0, #4]
 800825a:	4b0c      	ldr	r3, [pc, #48]	; (800828c <cleanup_stdio+0x34>)
 800825c:	4299      	cmp	r1, r3
 800825e:	b510      	push	{r4, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	d001      	beq.n	8008268 <cleanup_stdio+0x10>
 8008264:	f001 fcb8 	bl	8009bd8 <_fflush_r>
 8008268:	68a1      	ldr	r1, [r4, #8]
 800826a:	4b09      	ldr	r3, [pc, #36]	; (8008290 <cleanup_stdio+0x38>)
 800826c:	4299      	cmp	r1, r3
 800826e:	d002      	beq.n	8008276 <cleanup_stdio+0x1e>
 8008270:	4620      	mov	r0, r4
 8008272:	f001 fcb1 	bl	8009bd8 <_fflush_r>
 8008276:	68e1      	ldr	r1, [r4, #12]
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <cleanup_stdio+0x3c>)
 800827a:	4299      	cmp	r1, r3
 800827c:	d004      	beq.n	8008288 <cleanup_stdio+0x30>
 800827e:	4620      	mov	r0, r4
 8008280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008284:	f001 bca8 	b.w	8009bd8 <_fflush_r>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	bf00      	nop
 800828c:	200003b8 	.word	0x200003b8
 8008290:	20000420 	.word	0x20000420
 8008294:	20000488 	.word	0x20000488

08008298 <global_stdio_init.part.0>:
 8008298:	b510      	push	{r4, lr}
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <global_stdio_init.part.0+0x30>)
 800829c:	4c0b      	ldr	r4, [pc, #44]	; (80082cc <global_stdio_init.part.0+0x34>)
 800829e:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <global_stdio_init.part.0+0x38>)
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	4620      	mov	r0, r4
 80082a4:	2200      	movs	r2, #0
 80082a6:	2104      	movs	r1, #4
 80082a8:	f7ff ffa6 	bl	80081f8 <std>
 80082ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80082b0:	2201      	movs	r2, #1
 80082b2:	2109      	movs	r1, #9
 80082b4:	f7ff ffa0 	bl	80081f8 <std>
 80082b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80082bc:	2202      	movs	r2, #2
 80082be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c2:	2112      	movs	r1, #18
 80082c4:	f7ff bf98 	b.w	80081f8 <std>
 80082c8:	200004f0 	.word	0x200004f0
 80082cc:	200003b8 	.word	0x200003b8
 80082d0:	08008241 	.word	0x08008241

080082d4 <__sfp_lock_acquire>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__sfp_lock_acquire+0x8>)
 80082d6:	f000 b8ff 	b.w	80084d8 <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	200004f9 	.word	0x200004f9

080082e0 <__sfp_lock_release>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__sfp_lock_release+0x8>)
 80082e2:	f000 b8fa 	b.w	80084da <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	200004f9 	.word	0x200004f9

080082ec <__sinit>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4604      	mov	r4, r0
 80082f0:	f7ff fff0 	bl	80082d4 <__sfp_lock_acquire>
 80082f4:	6a23      	ldr	r3, [r4, #32]
 80082f6:	b11b      	cbz	r3, 8008300 <__sinit+0x14>
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082fc:	f7ff bff0 	b.w	80082e0 <__sfp_lock_release>
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <__sinit+0x28>)
 8008302:	6223      	str	r3, [r4, #32]
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <__sinit+0x2c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f5      	bne.n	80082f8 <__sinit+0xc>
 800830c:	f7ff ffc4 	bl	8008298 <global_stdio_init.part.0>
 8008310:	e7f2      	b.n	80082f8 <__sinit+0xc>
 8008312:	bf00      	nop
 8008314:	08008259 	.word	0x08008259
 8008318:	200004f0 	.word	0x200004f0

0800831c <_fwalk_sglue>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4607      	mov	r7, r0
 8008322:	4688      	mov	r8, r1
 8008324:	4614      	mov	r4, r2
 8008326:	2600      	movs	r6, #0
 8008328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800832c:	f1b9 0901 	subs.w	r9, r9, #1
 8008330:	d505      	bpl.n	800833e <_fwalk_sglue+0x22>
 8008332:	6824      	ldr	r4, [r4, #0]
 8008334:	2c00      	cmp	r4, #0
 8008336:	d1f7      	bne.n	8008328 <_fwalk_sglue+0xc>
 8008338:	4630      	mov	r0, r6
 800833a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d907      	bls.n	8008354 <_fwalk_sglue+0x38>
 8008344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008348:	3301      	adds	r3, #1
 800834a:	d003      	beq.n	8008354 <_fwalk_sglue+0x38>
 800834c:	4629      	mov	r1, r5
 800834e:	4638      	mov	r0, r7
 8008350:	47c0      	blx	r8
 8008352:	4306      	orrs	r6, r0
 8008354:	3568      	adds	r5, #104	; 0x68
 8008356:	e7e9      	b.n	800832c <_fwalk_sglue+0x10>

08008358 <__sread>:
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008360:	f000 f86c 	bl	800843c <_read_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	bfab      	itete	ge
 8008368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800836a:	89a3      	ldrhlt	r3, [r4, #12]
 800836c:	181b      	addge	r3, r3, r0
 800836e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008372:	bfac      	ite	ge
 8008374:	6563      	strge	r3, [r4, #84]	; 0x54
 8008376:	81a3      	strhlt	r3, [r4, #12]
 8008378:	bd10      	pop	{r4, pc}

0800837a <__swrite>:
 800837a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837e:	461f      	mov	r7, r3
 8008380:	898b      	ldrh	r3, [r1, #12]
 8008382:	05db      	lsls	r3, r3, #23
 8008384:	4605      	mov	r5, r0
 8008386:	460c      	mov	r4, r1
 8008388:	4616      	mov	r6, r2
 800838a:	d505      	bpl.n	8008398 <__swrite+0x1e>
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	2302      	movs	r3, #2
 8008392:	2200      	movs	r2, #0
 8008394:	f000 f840 	bl	8008418 <_lseek_r>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	4632      	mov	r2, r6
 80083a6:	463b      	mov	r3, r7
 80083a8:	4628      	mov	r0, r5
 80083aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ae:	f000 b857 	b.w	8008460 <_write_r>

080083b2 <__sseek>:
 80083b2:	b510      	push	{r4, lr}
 80083b4:	460c      	mov	r4, r1
 80083b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ba:	f000 f82d 	bl	8008418 <_lseek_r>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	bf15      	itete	ne
 80083c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083ce:	81a3      	strheq	r3, [r4, #12]
 80083d0:	bf18      	it	ne
 80083d2:	81a3      	strhne	r3, [r4, #12]
 80083d4:	bd10      	pop	{r4, pc}

080083d6 <__sclose>:
 80083d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083da:	f000 b80d 	b.w	80083f8 <_close_r>

080083de <memset>:
 80083de:	4402      	add	r2, r0
 80083e0:	4603      	mov	r3, r0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d100      	bne.n	80083e8 <memset+0xa>
 80083e6:	4770      	bx	lr
 80083e8:	f803 1b01 	strb.w	r1, [r3], #1
 80083ec:	e7f9      	b.n	80083e2 <memset+0x4>
	...

080083f0 <_localeconv_r>:
 80083f0:	4800      	ldr	r0, [pc, #0]	; (80083f4 <_localeconv_r+0x4>)
 80083f2:	4770      	bx	lr
 80083f4:	20000158 	.word	0x20000158

080083f8 <_close_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	; (8008414 <_close_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f9 f9e3 	bl	80017ce <_close>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_close_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_close_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	200004f4 	.word	0x200004f4

08008418 <_lseek_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_lseek_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 f9f8 	bl	800181c <_lseek>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_lseek_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_lseek_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200004f4 	.word	0x200004f4

0800843c <_read_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	; (800845c <_read_r+0x20>)
 8008440:	4604      	mov	r4, r0
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f9 f986 	bl	800175c <_read>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_read_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_read_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	200004f4 	.word	0x200004f4

08008460 <_write_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	; (8008480 <_write_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 f991 	bl	8001796 <_write>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_write_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_write_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	200004f4 	.word	0x200004f4

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	; (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000064 	.word	0x20000064

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	; (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	; (80084d4 <__libc_init_array+0x44>)
 80084a4:	f001 feec 	bl	800a280 <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	0800a664 	.word	0x0800a664
 80084cc:	0800a664 	.word	0x0800a664
 80084d0:	0800a664 	.word	0x0800a664
 80084d4:	0800a668 	.word	0x0800a668

080084d8 <__retarget_lock_acquire_recursive>:
 80084d8:	4770      	bx	lr

080084da <__retarget_lock_release_recursive>:
 80084da:	4770      	bx	lr

080084dc <quorem>:
 80084dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	6903      	ldr	r3, [r0, #16]
 80084e2:	690c      	ldr	r4, [r1, #16]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	4607      	mov	r7, r0
 80084e8:	db7e      	blt.n	80085e8 <quorem+0x10c>
 80084ea:	3c01      	subs	r4, #1
 80084ec:	f101 0814 	add.w	r8, r1, #20
 80084f0:	f100 0514 	add.w	r5, r0, #20
 80084f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008502:	3301      	adds	r3, #1
 8008504:	429a      	cmp	r2, r3
 8008506:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800850a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800850e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008512:	d331      	bcc.n	8008578 <quorem+0x9c>
 8008514:	f04f 0e00 	mov.w	lr, #0
 8008518:	4640      	mov	r0, r8
 800851a:	46ac      	mov	ip, r5
 800851c:	46f2      	mov	sl, lr
 800851e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008522:	b293      	uxth	r3, r2
 8008524:	fb06 e303 	mla	r3, r6, r3, lr
 8008528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800852c:	0c1a      	lsrs	r2, r3, #16
 800852e:	b29b      	uxth	r3, r3
 8008530:	ebaa 0303 	sub.w	r3, sl, r3
 8008534:	f8dc a000 	ldr.w	sl, [ip]
 8008538:	fa13 f38a 	uxtah	r3, r3, sl
 800853c:	fb06 220e 	mla	r2, r6, lr, r2
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008548:	b292      	uxth	r2, r2
 800854a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800854e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008552:	f8bd 3000 	ldrh.w	r3, [sp]
 8008556:	4581      	cmp	r9, r0
 8008558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855c:	f84c 3b04 	str.w	r3, [ip], #4
 8008560:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008564:	d2db      	bcs.n	800851e <quorem+0x42>
 8008566:	f855 300b 	ldr.w	r3, [r5, fp]
 800856a:	b92b      	cbnz	r3, 8008578 <quorem+0x9c>
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	3b04      	subs	r3, #4
 8008570:	429d      	cmp	r5, r3
 8008572:	461a      	mov	r2, r3
 8008574:	d32c      	bcc.n	80085d0 <quorem+0xf4>
 8008576:	613c      	str	r4, [r7, #16]
 8008578:	4638      	mov	r0, r7
 800857a:	f001 f9a7 	bl	80098cc <__mcmp>
 800857e:	2800      	cmp	r0, #0
 8008580:	db22      	blt.n	80085c8 <quorem+0xec>
 8008582:	3601      	adds	r6, #1
 8008584:	4629      	mov	r1, r5
 8008586:	2000      	movs	r0, #0
 8008588:	f858 2b04 	ldr.w	r2, [r8], #4
 800858c:	f8d1 c000 	ldr.w	ip, [r1]
 8008590:	b293      	uxth	r3, r2
 8008592:	1ac3      	subs	r3, r0, r3
 8008594:	0c12      	lsrs	r2, r2, #16
 8008596:	fa13 f38c 	uxtah	r3, r3, ip
 800859a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800859e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a8:	45c1      	cmp	r9, r8
 80085aa:	f841 3b04 	str.w	r3, [r1], #4
 80085ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085b2:	d2e9      	bcs.n	8008588 <quorem+0xac>
 80085b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085bc:	b922      	cbnz	r2, 80085c8 <quorem+0xec>
 80085be:	3b04      	subs	r3, #4
 80085c0:	429d      	cmp	r5, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	d30a      	bcc.n	80085dc <quorem+0x100>
 80085c6:	613c      	str	r4, [r7, #16]
 80085c8:	4630      	mov	r0, r6
 80085ca:	b003      	add	sp, #12
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	3b04      	subs	r3, #4
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d1ce      	bne.n	8008576 <quorem+0x9a>
 80085d8:	3c01      	subs	r4, #1
 80085da:	e7c9      	b.n	8008570 <quorem+0x94>
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	3b04      	subs	r3, #4
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	d1f0      	bne.n	80085c6 <quorem+0xea>
 80085e4:	3c01      	subs	r4, #1
 80085e6:	e7eb      	b.n	80085c0 <quorem+0xe4>
 80085e8:	2000      	movs	r0, #0
 80085ea:	e7ee      	b.n	80085ca <quorem+0xee>
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <_dtoa_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	ed2d 8b04 	vpush	{d8-d9}
 80085f8:	69c5      	ldr	r5, [r0, #28]
 80085fa:	b093      	sub	sp, #76	; 0x4c
 80085fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008600:	ec57 6b10 	vmov	r6, r7, d0
 8008604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008608:	9107      	str	r1, [sp, #28]
 800860a:	4604      	mov	r4, r0
 800860c:	920a      	str	r2, [sp, #40]	; 0x28
 800860e:	930d      	str	r3, [sp, #52]	; 0x34
 8008610:	b975      	cbnz	r5, 8008630 <_dtoa_r+0x40>
 8008612:	2010      	movs	r0, #16
 8008614:	f000 fe2a 	bl	800926c <malloc>
 8008618:	4602      	mov	r2, r0
 800861a:	61e0      	str	r0, [r4, #28]
 800861c:	b920      	cbnz	r0, 8008628 <_dtoa_r+0x38>
 800861e:	4bae      	ldr	r3, [pc, #696]	; (80088d8 <_dtoa_r+0x2e8>)
 8008620:	21ef      	movs	r1, #239	; 0xef
 8008622:	48ae      	ldr	r0, [pc, #696]	; (80088dc <_dtoa_r+0x2ec>)
 8008624:	f001 fb1e 	bl	8009c64 <__assert_func>
 8008628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800862c:	6005      	str	r5, [r0, #0]
 800862e:	60c5      	str	r5, [r0, #12]
 8008630:	69e3      	ldr	r3, [r4, #28]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	b151      	cbz	r1, 800864c <_dtoa_r+0x5c>
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	604a      	str	r2, [r1, #4]
 800863a:	2301      	movs	r3, #1
 800863c:	4093      	lsls	r3, r2
 800863e:	608b      	str	r3, [r1, #8]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 ff07 	bl	8009454 <_Bfree>
 8008646:	69e3      	ldr	r3, [r4, #28]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	1e3b      	subs	r3, r7, #0
 800864e:	bfbb      	ittet	lt
 8008650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008654:	9303      	strlt	r3, [sp, #12]
 8008656:	2300      	movge	r3, #0
 8008658:	2201      	movlt	r2, #1
 800865a:	bfac      	ite	ge
 800865c:	f8c8 3000 	strge.w	r3, [r8]
 8008660:	f8c8 2000 	strlt.w	r2, [r8]
 8008664:	4b9e      	ldr	r3, [pc, #632]	; (80088e0 <_dtoa_r+0x2f0>)
 8008666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800866a:	ea33 0308 	bics.w	r3, r3, r8
 800866e:	d11b      	bne.n	80086a8 <_dtoa_r+0xb8>
 8008670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008672:	f242 730f 	movw	r3, #9999	; 0x270f
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800867c:	4333      	orrs	r3, r6
 800867e:	f000 8593 	beq.w	80091a8 <_dtoa_r+0xbb8>
 8008682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008684:	b963      	cbnz	r3, 80086a0 <_dtoa_r+0xb0>
 8008686:	4b97      	ldr	r3, [pc, #604]	; (80088e4 <_dtoa_r+0x2f4>)
 8008688:	e027      	b.n	80086da <_dtoa_r+0xea>
 800868a:	4b97      	ldr	r3, [pc, #604]	; (80088e8 <_dtoa_r+0x2f8>)
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	9800      	ldr	r0, [sp, #0]
 8008696:	b013      	add	sp, #76	; 0x4c
 8008698:	ecbd 8b04 	vpop	{d8-d9}
 800869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	4b90      	ldr	r3, [pc, #576]	; (80088e4 <_dtoa_r+0x2f4>)
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	3303      	adds	r3, #3
 80086a6:	e7f3      	b.n	8008690 <_dtoa_r+0xa0>
 80086a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ac:	2200      	movs	r2, #0
 80086ae:	ec51 0b17 	vmov	r0, r1, d7
 80086b2:	eeb0 8a47 	vmov.f32	s16, s14
 80086b6:	eef0 8a67 	vmov.f32	s17, s15
 80086ba:	2300      	movs	r3, #0
 80086bc:	f7f8 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c0:	4681      	mov	r9, r0
 80086c2:	b160      	cbz	r0, 80086de <_dtoa_r+0xee>
 80086c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086c6:	2301      	movs	r3, #1
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8568 	beq.w	80091a2 <_dtoa_r+0xbb2>
 80086d2:	4b86      	ldr	r3, [pc, #536]	; (80088ec <_dtoa_r+0x2fc>)
 80086d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	3b01      	subs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	e7da      	b.n	8008694 <_dtoa_r+0xa4>
 80086de:	aa10      	add	r2, sp, #64	; 0x40
 80086e0:	a911      	add	r1, sp, #68	; 0x44
 80086e2:	4620      	mov	r0, r4
 80086e4:	eeb0 0a48 	vmov.f32	s0, s16
 80086e8:	eef0 0a68 	vmov.f32	s1, s17
 80086ec:	f001 f994 	bl	8009a18 <__d2b>
 80086f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086f4:	4682      	mov	sl, r0
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	d07f      	beq.n	80087fa <_dtoa_r+0x20a>
 80086fa:	ee18 3a90 	vmov	r3, s17
 80086fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008706:	ec51 0b18 	vmov	r0, r1, d8
 800870a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800870e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008716:	4619      	mov	r1, r3
 8008718:	2200      	movs	r2, #0
 800871a:	4b75      	ldr	r3, [pc, #468]	; (80088f0 <_dtoa_r+0x300>)
 800871c:	f7f7 fdb4 	bl	8000288 <__aeabi_dsub>
 8008720:	a367      	add	r3, pc, #412	; (adr r3, 80088c0 <_dtoa_r+0x2d0>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 ff67 	bl	80005f8 <__aeabi_dmul>
 800872a:	a367      	add	r3, pc, #412	; (adr r3, 80088c8 <_dtoa_r+0x2d8>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 fdac 	bl	800028c <__adddf3>
 8008734:	4606      	mov	r6, r0
 8008736:	4628      	mov	r0, r5
 8008738:	460f      	mov	r7, r1
 800873a:	f7f7 fef3 	bl	8000524 <__aeabi_i2d>
 800873e:	a364      	add	r3, pc, #400	; (adr r3, 80088d0 <_dtoa_r+0x2e0>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f7f7 ff58 	bl	80005f8 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4630      	mov	r0, r6
 800874e:	4639      	mov	r1, r7
 8008750:	f7f7 fd9c 	bl	800028c <__adddf3>
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	f7f8 f9fe 	bl	8000b58 <__aeabi_d2iz>
 800875c:	2200      	movs	r2, #0
 800875e:	4683      	mov	fp, r0
 8008760:	2300      	movs	r3, #0
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	f7f8 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800876a:	b148      	cbz	r0, 8008780 <_dtoa_r+0x190>
 800876c:	4658      	mov	r0, fp
 800876e:	f7f7 fed9 	bl	8000524 <__aeabi_i2d>
 8008772:	4632      	mov	r2, r6
 8008774:	463b      	mov	r3, r7
 8008776:	f7f8 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800877a:	b908      	cbnz	r0, 8008780 <_dtoa_r+0x190>
 800877c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008780:	f1bb 0f16 	cmp.w	fp, #22
 8008784:	d857      	bhi.n	8008836 <_dtoa_r+0x246>
 8008786:	4b5b      	ldr	r3, [pc, #364]	; (80088f4 <_dtoa_r+0x304>)
 8008788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	ec51 0b18 	vmov	r0, r1, d8
 8008794:	f7f8 f9a2 	bl	8000adc <__aeabi_dcmplt>
 8008798:	2800      	cmp	r0, #0
 800879a:	d04e      	beq.n	800883a <_dtoa_r+0x24a>
 800879c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087a0:	2300      	movs	r3, #0
 80087a2:	930c      	str	r3, [sp, #48]	; 0x30
 80087a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a6:	1b5b      	subs	r3, r3, r5
 80087a8:	1e5a      	subs	r2, r3, #1
 80087aa:	bf45      	ittet	mi
 80087ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80087b0:	9305      	strmi	r3, [sp, #20]
 80087b2:	2300      	movpl	r3, #0
 80087b4:	2300      	movmi	r3, #0
 80087b6:	9206      	str	r2, [sp, #24]
 80087b8:	bf54      	ite	pl
 80087ba:	9305      	strpl	r3, [sp, #20]
 80087bc:	9306      	strmi	r3, [sp, #24]
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	db3c      	blt.n	800883e <_dtoa_r+0x24e>
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087ca:	445b      	add	r3, fp
 80087cc:	9306      	str	r3, [sp, #24]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d868      	bhi.n	80088aa <_dtoa_r+0x2ba>
 80087d8:	2b05      	cmp	r3, #5
 80087da:	bfc4      	itt	gt
 80087dc:	3b04      	subgt	r3, #4
 80087de:	9307      	strgt	r3, [sp, #28]
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	f1a3 0302 	sub.w	r3, r3, #2
 80087e6:	bfcc      	ite	gt
 80087e8:	2500      	movgt	r5, #0
 80087ea:	2501      	movle	r5, #1
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	f200 8085 	bhi.w	80088fc <_dtoa_r+0x30c>
 80087f2:	e8df f003 	tbb	[pc, r3]
 80087f6:	3b2e      	.short	0x3b2e
 80087f8:	5839      	.short	0x5839
 80087fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087fe:	441d      	add	r5, r3
 8008800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008804:	2b20      	cmp	r3, #32
 8008806:	bfc1      	itttt	gt
 8008808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800880c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008814:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008818:	bfd6      	itet	le
 800881a:	f1c3 0320 	rsble	r3, r3, #32
 800881e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008822:	fa06 f003 	lslle.w	r0, r6, r3
 8008826:	f7f7 fe6d 	bl	8000504 <__aeabi_ui2d>
 800882a:	2201      	movs	r2, #1
 800882c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008830:	3d01      	subs	r5, #1
 8008832:	920e      	str	r2, [sp, #56]	; 0x38
 8008834:	e76f      	b.n	8008716 <_dtoa_r+0x126>
 8008836:	2301      	movs	r3, #1
 8008838:	e7b3      	b.n	80087a2 <_dtoa_r+0x1b2>
 800883a:	900c      	str	r0, [sp, #48]	; 0x30
 800883c:	e7b2      	b.n	80087a4 <_dtoa_r+0x1b4>
 800883e:	9b05      	ldr	r3, [sp, #20]
 8008840:	eba3 030b 	sub.w	r3, r3, fp
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	f1cb 0300 	rsb	r3, fp, #0
 800884a:	9308      	str	r3, [sp, #32]
 800884c:	2300      	movs	r3, #0
 800884e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008850:	e7bf      	b.n	80087d2 <_dtoa_r+0x1e2>
 8008852:	2300      	movs	r3, #0
 8008854:	9309      	str	r3, [sp, #36]	; 0x24
 8008856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	dc52      	bgt.n	8008902 <_dtoa_r+0x312>
 800885c:	2301      	movs	r3, #1
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	461a      	mov	r2, r3
 8008864:	920a      	str	r2, [sp, #40]	; 0x28
 8008866:	e00b      	b.n	8008880 <_dtoa_r+0x290>
 8008868:	2301      	movs	r3, #1
 800886a:	e7f3      	b.n	8008854 <_dtoa_r+0x264>
 800886c:	2300      	movs	r3, #0
 800886e:	9309      	str	r3, [sp, #36]	; 0x24
 8008870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008872:	445b      	add	r3, fp
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	3301      	adds	r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	bfb8      	it	lt
 800887e:	2301      	movlt	r3, #1
 8008880:	69e0      	ldr	r0, [r4, #28]
 8008882:	2100      	movs	r1, #0
 8008884:	2204      	movs	r2, #4
 8008886:	f102 0614 	add.w	r6, r2, #20
 800888a:	429e      	cmp	r6, r3
 800888c:	d93d      	bls.n	800890a <_dtoa_r+0x31a>
 800888e:	6041      	str	r1, [r0, #4]
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fd9f 	bl	80093d4 <_Balloc>
 8008896:	9000      	str	r0, [sp, #0]
 8008898:	2800      	cmp	r0, #0
 800889a:	d139      	bne.n	8008910 <_dtoa_r+0x320>
 800889c:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <_dtoa_r+0x308>)
 800889e:	4602      	mov	r2, r0
 80088a0:	f240 11af 	movw	r1, #431	; 0x1af
 80088a4:	e6bd      	b.n	8008622 <_dtoa_r+0x32>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7e1      	b.n	800886e <_dtoa_r+0x27e>
 80088aa:	2501      	movs	r5, #1
 80088ac:	2300      	movs	r3, #0
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	9509      	str	r5, [sp, #36]	; 0x24
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	2200      	movs	r2, #0
 80088bc:	2312      	movs	r3, #18
 80088be:	e7d1      	b.n	8008864 <_dtoa_r+0x274>
 80088c0:	636f4361 	.word	0x636f4361
 80088c4:	3fd287a7 	.word	0x3fd287a7
 80088c8:	8b60c8b3 	.word	0x8b60c8b3
 80088cc:	3fc68a28 	.word	0x3fc68a28
 80088d0:	509f79fb 	.word	0x509f79fb
 80088d4:	3fd34413 	.word	0x3fd34413
 80088d8:	0800a32d 	.word	0x0800a32d
 80088dc:	0800a344 	.word	0x0800a344
 80088e0:	7ff00000 	.word	0x7ff00000
 80088e4:	0800a329 	.word	0x0800a329
 80088e8:	0800a320 	.word	0x0800a320
 80088ec:	0800a2fd 	.word	0x0800a2fd
 80088f0:	3ff80000 	.word	0x3ff80000
 80088f4:	0800a430 	.word	0x0800a430
 80088f8:	0800a39c 	.word	0x0800a39c
 80088fc:	2301      	movs	r3, #1
 80088fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008900:	e7d7      	b.n	80088b2 <_dtoa_r+0x2c2>
 8008902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	e7ba      	b.n	8008880 <_dtoa_r+0x290>
 800890a:	3101      	adds	r1, #1
 800890c:	0052      	lsls	r2, r2, #1
 800890e:	e7ba      	b.n	8008886 <_dtoa_r+0x296>
 8008910:	69e3      	ldr	r3, [r4, #28]
 8008912:	9a00      	ldr	r2, [sp, #0]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	9b04      	ldr	r3, [sp, #16]
 8008918:	2b0e      	cmp	r3, #14
 800891a:	f200 80a8 	bhi.w	8008a6e <_dtoa_r+0x47e>
 800891e:	2d00      	cmp	r5, #0
 8008920:	f000 80a5 	beq.w	8008a6e <_dtoa_r+0x47e>
 8008924:	f1bb 0f00 	cmp.w	fp, #0
 8008928:	dd38      	ble.n	800899c <_dtoa_r+0x3ac>
 800892a:	4bc0      	ldr	r3, [pc, #768]	; (8008c2c <_dtoa_r+0x63c>)
 800892c:	f00b 020f 	and.w	r2, fp, #15
 8008930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008938:	e9d3 6700 	ldrd	r6, r7, [r3]
 800893c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008940:	d019      	beq.n	8008976 <_dtoa_r+0x386>
 8008942:	4bbb      	ldr	r3, [pc, #748]	; (8008c30 <_dtoa_r+0x640>)
 8008944:	ec51 0b18 	vmov	r0, r1, d8
 8008948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800894c:	f7f7 ff7e 	bl	800084c <__aeabi_ddiv>
 8008950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008954:	f008 080f 	and.w	r8, r8, #15
 8008958:	2503      	movs	r5, #3
 800895a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c30 <_dtoa_r+0x640>
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	d10a      	bne.n	800897a <_dtoa_r+0x38a>
 8008964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008968:	4632      	mov	r2, r6
 800896a:	463b      	mov	r3, r7
 800896c:	f7f7 ff6e 	bl	800084c <__aeabi_ddiv>
 8008970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008974:	e02b      	b.n	80089ce <_dtoa_r+0x3de>
 8008976:	2502      	movs	r5, #2
 8008978:	e7ef      	b.n	800895a <_dtoa_r+0x36a>
 800897a:	f018 0f01 	tst.w	r8, #1
 800897e:	d008      	beq.n	8008992 <_dtoa_r+0x3a2>
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008988:	f7f7 fe36 	bl	80005f8 <__aeabi_dmul>
 800898c:	3501      	adds	r5, #1
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008996:	f109 0908 	add.w	r9, r9, #8
 800899a:	e7e0      	b.n	800895e <_dtoa_r+0x36e>
 800899c:	f000 809f 	beq.w	8008ade <_dtoa_r+0x4ee>
 80089a0:	f1cb 0600 	rsb	r6, fp, #0
 80089a4:	4ba1      	ldr	r3, [pc, #644]	; (8008c2c <_dtoa_r+0x63c>)
 80089a6:	4fa2      	ldr	r7, [pc, #648]	; (8008c30 <_dtoa_r+0x640>)
 80089a8:	f006 020f 	and.w	r2, r6, #15
 80089ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	ec51 0b18 	vmov	r0, r1, d8
 80089b8:	f7f7 fe1e 	bl	80005f8 <__aeabi_dmul>
 80089bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c0:	1136      	asrs	r6, r6, #4
 80089c2:	2300      	movs	r3, #0
 80089c4:	2502      	movs	r5, #2
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d17e      	bne.n	8008ac8 <_dtoa_r+0x4d8>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1d0      	bne.n	8008970 <_dtoa_r+0x380>
 80089ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8084 	beq.w	8008ae2 <_dtoa_r+0x4f2>
 80089da:	4b96      	ldr	r3, [pc, #600]	; (8008c34 <_dtoa_r+0x644>)
 80089dc:	2200      	movs	r2, #0
 80089de:	4640      	mov	r0, r8
 80089e0:	4649      	mov	r1, r9
 80089e2:	f7f8 f87b 	bl	8000adc <__aeabi_dcmplt>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d07b      	beq.n	8008ae2 <_dtoa_r+0x4f2>
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d078      	beq.n	8008ae2 <_dtoa_r+0x4f2>
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dd39      	ble.n	8008a6a <_dtoa_r+0x47a>
 80089f6:	4b90      	ldr	r3, [pc, #576]	; (8008c38 <_dtoa_r+0x648>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	4640      	mov	r0, r8
 80089fc:	4649      	mov	r1, r9
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a06:	9e01      	ldr	r6, [sp, #4]
 8008a08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a12:	4628      	mov	r0, r5
 8008a14:	f7f7 fd86 	bl	8000524 <__aeabi_i2d>
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4b86      	ldr	r3, [pc, #536]	; (8008c3c <_dtoa_r+0x64c>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	f7f7 fc32 	bl	800028c <__adddf3>
 8008a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	d158      	bne.n	8008ae8 <_dtoa_r+0x4f8>
 8008a36:	4b82      	ldr	r3, [pc, #520]	; (8008c40 <_dtoa_r+0x650>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a46:	4680      	mov	r8, r0
 8008a48:	4689      	mov	r9, r1
 8008a4a:	f7f8 f865 	bl	8000b18 <__aeabi_dcmpgt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f040 8296 	bne.w	8008f80 <_dtoa_r+0x990>
 8008a54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a58:	4640      	mov	r0, r8
 8008a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a5e:	4649      	mov	r1, r9
 8008a60:	f7f8 f83c 	bl	8000adc <__aeabi_dcmplt>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f040 8289 	bne.w	8008f7c <_dtoa_r+0x98c>
 8008a6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f2c0 814e 	blt.w	8008d12 <_dtoa_r+0x722>
 8008a76:	f1bb 0f0e 	cmp.w	fp, #14
 8008a7a:	f300 814a 	bgt.w	8008d12 <_dtoa_r+0x722>
 8008a7e:	4b6b      	ldr	r3, [pc, #428]	; (8008c2c <_dtoa_r+0x63c>)
 8008a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f280 80dc 	bge.w	8008c48 <_dtoa_r+0x658>
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f300 80d8 	bgt.w	8008c48 <_dtoa_r+0x658>
 8008a98:	f040 826f 	bne.w	8008f7a <_dtoa_r+0x98a>
 8008a9c:	4b68      	ldr	r3, [pc, #416]	; (8008c40 <_dtoa_r+0x650>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aac:	f7f8 f82a 	bl	8000b04 <__aeabi_dcmpge>
 8008ab0:	9e04      	ldr	r6, [sp, #16]
 8008ab2:	4637      	mov	r7, r6
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f040 8245 	bne.w	8008f44 <_dtoa_r+0x954>
 8008aba:	9d00      	ldr	r5, [sp, #0]
 8008abc:	2331      	movs	r3, #49	; 0x31
 8008abe:	f805 3b01 	strb.w	r3, [r5], #1
 8008ac2:	f10b 0b01 	add.w	fp, fp, #1
 8008ac6:	e241      	b.n	8008f4c <_dtoa_r+0x95c>
 8008ac8:	07f2      	lsls	r2, r6, #31
 8008aca:	d505      	bpl.n	8008ad8 <_dtoa_r+0x4e8>
 8008acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad0:	f7f7 fd92 	bl	80005f8 <__aeabi_dmul>
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	1076      	asrs	r6, r6, #1
 8008ada:	3708      	adds	r7, #8
 8008adc:	e773      	b.n	80089c6 <_dtoa_r+0x3d6>
 8008ade:	2502      	movs	r5, #2
 8008ae0:	e775      	b.n	80089ce <_dtoa_r+0x3de>
 8008ae2:	9e04      	ldr	r6, [sp, #16]
 8008ae4:	465f      	mov	r7, fp
 8008ae6:	e792      	b.n	8008a0e <_dtoa_r+0x41e>
 8008ae8:	9900      	ldr	r1, [sp, #0]
 8008aea:	4b50      	ldr	r3, [pc, #320]	; (8008c2c <_dtoa_r+0x63c>)
 8008aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008af0:	4431      	add	r1, r6
 8008af2:	9102      	str	r1, [sp, #8]
 8008af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af6:	eeb0 9a47 	vmov.f32	s18, s14
 8008afa:	eef0 9a67 	vmov.f32	s19, s15
 8008afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d044      	beq.n	8008b94 <_dtoa_r+0x5a4>
 8008b0a:	494e      	ldr	r1, [pc, #312]	; (8008c44 <_dtoa_r+0x654>)
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f7f7 fe9d 	bl	800084c <__aeabi_ddiv>
 8008b12:	ec53 2b19 	vmov	r2, r3, d9
 8008b16:	f7f7 fbb7 	bl	8000288 <__aeabi_dsub>
 8008b1a:	9d00      	ldr	r5, [sp, #0]
 8008b1c:	ec41 0b19 	vmov	d9, r0, r1
 8008b20:	4649      	mov	r1, r9
 8008b22:	4640      	mov	r0, r8
 8008b24:	f7f8 f818 	bl	8000b58 <__aeabi_d2iz>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	f7f7 fcfb 	bl	8000524 <__aeabi_i2d>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fba7 	bl	8000288 <__aeabi_dsub>
 8008b3a:	3630      	adds	r6, #48	; 0x30
 8008b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b40:	ec53 2b19 	vmov	r2, r3, d9
 8008b44:	4680      	mov	r8, r0
 8008b46:	4689      	mov	r9, r1
 8008b48:	f7f7 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d164      	bne.n	8008c1a <_dtoa_r+0x62a>
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	4937      	ldr	r1, [pc, #220]	; (8008c34 <_dtoa_r+0x644>)
 8008b56:	2000      	movs	r0, #0
 8008b58:	f7f7 fb96 	bl	8000288 <__aeabi_dsub>
 8008b5c:	ec53 2b19 	vmov	r2, r3, d9
 8008b60:	f7f7 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f040 80b6 	bne.w	8008cd6 <_dtoa_r+0x6e6>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	f43f af7c 	beq.w	8008a6a <_dtoa_r+0x47a>
 8008b72:	4b31      	ldr	r3, [pc, #196]	; (8008c38 <_dtoa_r+0x648>)
 8008b74:	ec51 0b19 	vmov	r0, r1, d9
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7f7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8008b7e:	4b2e      	ldr	r3, [pc, #184]	; (8008c38 <_dtoa_r+0x648>)
 8008b80:	ec41 0b19 	vmov	d9, r0, r1
 8008b84:	2200      	movs	r2, #0
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	4680      	mov	r8, r0
 8008b90:	4689      	mov	r9, r1
 8008b92:	e7c5      	b.n	8008b20 <_dtoa_r+0x530>
 8008b94:	ec51 0b17 	vmov	r0, r1, d7
 8008b98:	f7f7 fd2e 	bl	80005f8 <__aeabi_dmul>
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	9d00      	ldr	r5, [sp, #0]
 8008ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ba2:	ec41 0b19 	vmov	d9, r0, r1
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4640      	mov	r0, r8
 8008baa:	f7f7 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8008bae:	4606      	mov	r6, r0
 8008bb0:	f7f7 fcb8 	bl	8000524 <__aeabi_i2d>
 8008bb4:	3630      	adds	r6, #48	; 0x30
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 fb63 	bl	8000288 <__aeabi_dsub>
 8008bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	429d      	cmp	r5, r3
 8008bca:	4680      	mov	r8, r0
 8008bcc:	4689      	mov	r9, r1
 8008bce:	f04f 0200 	mov.w	r2, #0
 8008bd2:	d124      	bne.n	8008c1e <_dtoa_r+0x62e>
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <_dtoa_r+0x654>)
 8008bd6:	ec51 0b19 	vmov	r0, r1, d9
 8008bda:	f7f7 fb57 	bl	800028c <__adddf3>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4640      	mov	r0, r8
 8008be4:	4649      	mov	r1, r9
 8008be6:	f7f7 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d173      	bne.n	8008cd6 <_dtoa_r+0x6e6>
 8008bee:	ec53 2b19 	vmov	r2, r3, d9
 8008bf2:	4914      	ldr	r1, [pc, #80]	; (8008c44 <_dtoa_r+0x654>)
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f7f7 fb47 	bl	8000288 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 ff6b 	bl	8000adc <__aeabi_dcmplt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f43f af2f 	beq.w	8008a6a <_dtoa_r+0x47a>
 8008c0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c0e:	1e6b      	subs	r3, r5, #1
 8008c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c16:	2b30      	cmp	r3, #48	; 0x30
 8008c18:	d0f8      	beq.n	8008c0c <_dtoa_r+0x61c>
 8008c1a:	46bb      	mov	fp, r7
 8008c1c:	e04a      	b.n	8008cb4 <_dtoa_r+0x6c4>
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <_dtoa_r+0x648>)
 8008c20:	f7f7 fcea 	bl	80005f8 <__aeabi_dmul>
 8008c24:	4680      	mov	r8, r0
 8008c26:	4689      	mov	r9, r1
 8008c28:	e7bd      	b.n	8008ba6 <_dtoa_r+0x5b6>
 8008c2a:	bf00      	nop
 8008c2c:	0800a430 	.word	0x0800a430
 8008c30:	0800a408 	.word	0x0800a408
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	40240000 	.word	0x40240000
 8008c3c:	401c0000 	.word	0x401c0000
 8008c40:	40140000 	.word	0x40140000
 8008c44:	3fe00000 	.word	0x3fe00000
 8008c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c4c:	9d00      	ldr	r5, [sp, #0]
 8008c4e:	4642      	mov	r2, r8
 8008c50:	464b      	mov	r3, r9
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 fdf9 	bl	800084c <__aeabi_ddiv>
 8008c5a:	f7f7 ff7d 	bl	8000b58 <__aeabi_d2iz>
 8008c5e:	9001      	str	r0, [sp, #4]
 8008c60:	f7f7 fc60 	bl	8000524 <__aeabi_i2d>
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fb08 	bl	8000288 <__aeabi_dsub>
 8008c78:	9e01      	ldr	r6, [sp, #4]
 8008c7a:	9f04      	ldr	r7, [sp, #16]
 8008c7c:	3630      	adds	r6, #48	; 0x30
 8008c7e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c82:	9e00      	ldr	r6, [sp, #0]
 8008c84:	1bae      	subs	r6, r5, r6
 8008c86:	42b7      	cmp	r7, r6
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	d134      	bne.n	8008cf8 <_dtoa_r+0x708>
 8008c8e:	f7f7 fafd 	bl	800028c <__adddf3>
 8008c92:	4642      	mov	r2, r8
 8008c94:	464b      	mov	r3, r9
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	f7f7 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8008c9e:	b9c8      	cbnz	r0, 8008cd4 <_dtoa_r+0x6e4>
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	f7f7 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cac:	b110      	cbz	r0, 8008cb4 <_dtoa_r+0x6c4>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d40f      	bmi.n	8008cd4 <_dtoa_r+0x6e4>
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fbcc 	bl	8009454 <_Bfree>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc0:	702b      	strb	r3, [r5, #0]
 8008cc2:	f10b 0301 	add.w	r3, fp, #1
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f43f ace2 	beq.w	8008694 <_dtoa_r+0xa4>
 8008cd0:	601d      	str	r5, [r3, #0]
 8008cd2:	e4df      	b.n	8008694 <_dtoa_r+0xa4>
 8008cd4:	465f      	mov	r7, fp
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	461d      	mov	r5, r3
 8008cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cde:	2a39      	cmp	r2, #57	; 0x39
 8008ce0:	d106      	bne.n	8008cf0 <_dtoa_r+0x700>
 8008ce2:	9a00      	ldr	r2, [sp, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d1f7      	bne.n	8008cd8 <_dtoa_r+0x6e8>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	2230      	movs	r2, #48	; 0x30
 8008cec:	3701      	adds	r7, #1
 8008cee:	700a      	strb	r2, [r1, #0]
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	3201      	adds	r2, #1
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e790      	b.n	8008c1a <_dtoa_r+0x62a>
 8008cf8:	4ba3      	ldr	r3, [pc, #652]	; (8008f88 <_dtoa_r+0x998>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f7f7 fc7c 	bl	80005f8 <__aeabi_dmul>
 8008d00:	2200      	movs	r2, #0
 8008d02:	2300      	movs	r3, #0
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	f7f7 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d09e      	beq.n	8008c4e <_dtoa_r+0x65e>
 8008d10:	e7d0      	b.n	8008cb4 <_dtoa_r+0x6c4>
 8008d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	f000 80ca 	beq.w	8008eae <_dtoa_r+0x8be>
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	2a01      	cmp	r2, #1
 8008d1e:	f300 80ad 	bgt.w	8008e7c <_dtoa_r+0x88c>
 8008d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	f000 80a5 	beq.w	8008e74 <_dtoa_r+0x884>
 8008d2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d2e:	9e08      	ldr	r6, [sp, #32]
 8008d30:	9d05      	ldr	r5, [sp, #20]
 8008d32:	9a05      	ldr	r2, [sp, #20]
 8008d34:	441a      	add	r2, r3
 8008d36:	9205      	str	r2, [sp, #20]
 8008d38:	9a06      	ldr	r2, [sp, #24]
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	441a      	add	r2, r3
 8008d3e:	4620      	mov	r0, r4
 8008d40:	9206      	str	r2, [sp, #24]
 8008d42:	f000 fc3d 	bl	80095c0 <__i2b>
 8008d46:	4607      	mov	r7, r0
 8008d48:	b165      	cbz	r5, 8008d64 <_dtoa_r+0x774>
 8008d4a:	9b06      	ldr	r3, [sp, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dd09      	ble.n	8008d64 <_dtoa_r+0x774>
 8008d50:	42ab      	cmp	r3, r5
 8008d52:	9a05      	ldr	r2, [sp, #20]
 8008d54:	bfa8      	it	ge
 8008d56:	462b      	movge	r3, r5
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	9205      	str	r2, [sp, #20]
 8008d5c:	9a06      	ldr	r2, [sp, #24]
 8008d5e:	1aed      	subs	r5, r5, r3
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	9306      	str	r3, [sp, #24]
 8008d64:	9b08      	ldr	r3, [sp, #32]
 8008d66:	b1f3      	cbz	r3, 8008da6 <_dtoa_r+0x7b6>
 8008d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 80a3 	beq.w	8008eb6 <_dtoa_r+0x8c6>
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	dd10      	ble.n	8008d96 <_dtoa_r+0x7a6>
 8008d74:	4639      	mov	r1, r7
 8008d76:	4632      	mov	r2, r6
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 fce1 	bl	8009740 <__pow5mult>
 8008d7e:	4652      	mov	r2, sl
 8008d80:	4601      	mov	r1, r0
 8008d82:	4607      	mov	r7, r0
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fc31 	bl	80095ec <__multiply>
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fb60 	bl	8009454 <_Bfree>
 8008d94:	46c2      	mov	sl, r8
 8008d96:	9b08      	ldr	r3, [sp, #32]
 8008d98:	1b9a      	subs	r2, r3, r6
 8008d9a:	d004      	beq.n	8008da6 <_dtoa_r+0x7b6>
 8008d9c:	4651      	mov	r1, sl
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 fcce 	bl	8009740 <__pow5mult>
 8008da4:	4682      	mov	sl, r0
 8008da6:	2101      	movs	r1, #1
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fc09 	bl	80095c0 <__i2b>
 8008dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	4606      	mov	r6, r0
 8008db4:	f340 8081 	ble.w	8008eba <_dtoa_r+0x8ca>
 8008db8:	461a      	mov	r2, r3
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fcbf 	bl	8009740 <__pow5mult>
 8008dc2:	9b07      	ldr	r3, [sp, #28]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	dd7a      	ble.n	8008ec0 <_dtoa_r+0x8d0>
 8008dca:	f04f 0800 	mov.w	r8, #0
 8008dce:	6933      	ldr	r3, [r6, #16]
 8008dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dd4:	6918      	ldr	r0, [r3, #16]
 8008dd6:	f000 fba5 	bl	8009524 <__hi0bits>
 8008dda:	f1c0 0020 	rsb	r0, r0, #32
 8008dde:	9b06      	ldr	r3, [sp, #24]
 8008de0:	4418      	add	r0, r3
 8008de2:	f010 001f 	ands.w	r0, r0, #31
 8008de6:	f000 8094 	beq.w	8008f12 <_dtoa_r+0x922>
 8008dea:	f1c0 0320 	rsb	r3, r0, #32
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	f340 8085 	ble.w	8008efe <_dtoa_r+0x90e>
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	f1c0 001c 	rsb	r0, r0, #28
 8008dfa:	4403      	add	r3, r0
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	9b06      	ldr	r3, [sp, #24]
 8008e00:	4403      	add	r3, r0
 8008e02:	4405      	add	r5, r0
 8008e04:	9306      	str	r3, [sp, #24]
 8008e06:	9b05      	ldr	r3, [sp, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dd05      	ble.n	8008e18 <_dtoa_r+0x828>
 8008e0c:	4651      	mov	r1, sl
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 fcef 	bl	80097f4 <__lshift>
 8008e16:	4682      	mov	sl, r0
 8008e18:	9b06      	ldr	r3, [sp, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dd05      	ble.n	8008e2a <_dtoa_r+0x83a>
 8008e1e:	4631      	mov	r1, r6
 8008e20:	461a      	mov	r2, r3
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 fce6 	bl	80097f4 <__lshift>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d072      	beq.n	8008f16 <_dtoa_r+0x926>
 8008e30:	4631      	mov	r1, r6
 8008e32:	4650      	mov	r0, sl
 8008e34:	f000 fd4a 	bl	80098cc <__mcmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	da6c      	bge.n	8008f16 <_dtoa_r+0x926>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4651      	mov	r1, sl
 8008e40:	220a      	movs	r2, #10
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 fb28 	bl	8009498 <__multadd>
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e4e:	4682      	mov	sl, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 81b0 	beq.w	80091b6 <_dtoa_r+0xbc6>
 8008e56:	2300      	movs	r3, #0
 8008e58:	4639      	mov	r1, r7
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fb1b 	bl	8009498 <__multadd>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	4607      	mov	r7, r0
 8008e68:	f300 8096 	bgt.w	8008f98 <_dtoa_r+0x9a8>
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dc59      	bgt.n	8008f26 <_dtoa_r+0x936>
 8008e72:	e091      	b.n	8008f98 <_dtoa_r+0x9a8>
 8008e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e7a:	e758      	b.n	8008d2e <_dtoa_r+0x73e>
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	1e5e      	subs	r6, r3, #1
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	42b3      	cmp	r3, r6
 8008e84:	bfbf      	itttt	lt
 8008e86:	9b08      	ldrlt	r3, [sp, #32]
 8008e88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e8a:	9608      	strlt	r6, [sp, #32]
 8008e8c:	1af3      	sublt	r3, r6, r3
 8008e8e:	bfb4      	ite	lt
 8008e90:	18d2      	addlt	r2, r2, r3
 8008e92:	1b9e      	subge	r6, r3, r6
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	bfbc      	itt	lt
 8008e98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e9a:	2600      	movlt	r6, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb7      	itett	lt
 8008ea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008ea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ea8:	1a9d      	sublt	r5, r3, r2
 8008eaa:	2300      	movlt	r3, #0
 8008eac:	e741      	b.n	8008d32 <_dtoa_r+0x742>
 8008eae:	9e08      	ldr	r6, [sp, #32]
 8008eb0:	9d05      	ldr	r5, [sp, #20]
 8008eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008eb4:	e748      	b.n	8008d48 <_dtoa_r+0x758>
 8008eb6:	9a08      	ldr	r2, [sp, #32]
 8008eb8:	e770      	b.n	8008d9c <_dtoa_r+0x7ac>
 8008eba:	9b07      	ldr	r3, [sp, #28]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	dc19      	bgt.n	8008ef4 <_dtoa_r+0x904>
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	b9bb      	cbnz	r3, 8008ef4 <_dtoa_r+0x904>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eca:	b99b      	cbnz	r3, 8008ef4 <_dtoa_r+0x904>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed2:	0d1b      	lsrs	r3, r3, #20
 8008ed4:	051b      	lsls	r3, r3, #20
 8008ed6:	b183      	cbz	r3, 8008efa <_dtoa_r+0x90a>
 8008ed8:	9b05      	ldr	r3, [sp, #20]
 8008eda:	3301      	adds	r3, #1
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	9b06      	ldr	r3, [sp, #24]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	9306      	str	r3, [sp, #24]
 8008ee4:	f04f 0801 	mov.w	r8, #1
 8008ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f47f af6f 	bne.w	8008dce <_dtoa_r+0x7de>
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	e774      	b.n	8008dde <_dtoa_r+0x7ee>
 8008ef4:	f04f 0800 	mov.w	r8, #0
 8008ef8:	e7f6      	b.n	8008ee8 <_dtoa_r+0x8f8>
 8008efa:	4698      	mov	r8, r3
 8008efc:	e7f4      	b.n	8008ee8 <_dtoa_r+0x8f8>
 8008efe:	d082      	beq.n	8008e06 <_dtoa_r+0x816>
 8008f00:	9a05      	ldr	r2, [sp, #20]
 8008f02:	331c      	adds	r3, #28
 8008f04:	441a      	add	r2, r3
 8008f06:	9205      	str	r2, [sp, #20]
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	441d      	add	r5, r3
 8008f0e:	9206      	str	r2, [sp, #24]
 8008f10:	e779      	b.n	8008e06 <_dtoa_r+0x816>
 8008f12:	4603      	mov	r3, r0
 8008f14:	e7f4      	b.n	8008f00 <_dtoa_r+0x910>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc37      	bgt.n	8008f8c <_dtoa_r+0x99c>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	dd34      	ble.n	8008f8c <_dtoa_r+0x99c>
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	b963      	cbnz	r3, 8008f44 <_dtoa_r+0x954>
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	2205      	movs	r2, #5
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 fab2 	bl	8009498 <__multadd>
 8008f34:	4601      	mov	r1, r0
 8008f36:	4606      	mov	r6, r0
 8008f38:	4650      	mov	r0, sl
 8008f3a:	f000 fcc7 	bl	80098cc <__mcmp>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f73f adbb 	bgt.w	8008aba <_dtoa_r+0x4ca>
 8008f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f46:	9d00      	ldr	r5, [sp, #0]
 8008f48:	ea6f 0b03 	mvn.w	fp, r3
 8008f4c:	f04f 0800 	mov.w	r8, #0
 8008f50:	4631      	mov	r1, r6
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fa7e 	bl	8009454 <_Bfree>
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	f43f aeab 	beq.w	8008cb4 <_dtoa_r+0x6c4>
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	d005      	beq.n	8008f70 <_dtoa_r+0x980>
 8008f64:	45b8      	cmp	r8, r7
 8008f66:	d003      	beq.n	8008f70 <_dtoa_r+0x980>
 8008f68:	4641      	mov	r1, r8
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fa72 	bl	8009454 <_Bfree>
 8008f70:	4639      	mov	r1, r7
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fa6e 	bl	8009454 <_Bfree>
 8008f78:	e69c      	b.n	8008cb4 <_dtoa_r+0x6c4>
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	4637      	mov	r7, r6
 8008f7e:	e7e1      	b.n	8008f44 <_dtoa_r+0x954>
 8008f80:	46bb      	mov	fp, r7
 8008f82:	4637      	mov	r7, r6
 8008f84:	e599      	b.n	8008aba <_dtoa_r+0x4ca>
 8008f86:	bf00      	nop
 8008f88:	40240000 	.word	0x40240000
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80c8 	beq.w	8009124 <_dtoa_r+0xb34>
 8008f94:	9b04      	ldr	r3, [sp, #16]
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	dd05      	ble.n	8008fa8 <_dtoa_r+0x9b8>
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fc27 	bl	80097f4 <__lshift>
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	f1b8 0f00 	cmp.w	r8, #0
 8008fac:	d05b      	beq.n	8009066 <_dtoa_r+0xa76>
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fa0f 	bl	80093d4 <_Balloc>
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	b928      	cbnz	r0, 8008fc6 <_dtoa_r+0x9d6>
 8008fba:	4b83      	ldr	r3, [pc, #524]	; (80091c8 <_dtoa_r+0xbd8>)
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008fc2:	f7ff bb2e 	b.w	8008622 <_dtoa_r+0x32>
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	3202      	adds	r2, #2
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	f107 010c 	add.w	r1, r7, #12
 8008fd0:	300c      	adds	r0, #12
 8008fd2:	f000 fe39 	bl	8009c48 <memcpy>
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fc0a 	bl	80097f4 <__lshift>
 8008fe0:	9b00      	ldr	r3, [sp, #0]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fea:	4413      	add	r3, r2
 8008fec:	9308      	str	r3, [sp, #32]
 8008fee:	9b02      	ldr	r3, [sp, #8]
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	46b8      	mov	r8, r7
 8008ff6:	9306      	str	r3, [sp, #24]
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	9b04      	ldr	r3, [sp, #16]
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	3b01      	subs	r3, #1
 8009000:	4650      	mov	r0, sl
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	f7ff fa6a 	bl	80084dc <quorem>
 8009008:	4641      	mov	r1, r8
 800900a:	9002      	str	r0, [sp, #8]
 800900c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009010:	4650      	mov	r0, sl
 8009012:	f000 fc5b 	bl	80098cc <__mcmp>
 8009016:	463a      	mov	r2, r7
 8009018:	9005      	str	r0, [sp, #20]
 800901a:	4631      	mov	r1, r6
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fc71 	bl	8009904 <__mdiff>
 8009022:	68c2      	ldr	r2, [r0, #12]
 8009024:	4605      	mov	r5, r0
 8009026:	bb02      	cbnz	r2, 800906a <_dtoa_r+0xa7a>
 8009028:	4601      	mov	r1, r0
 800902a:	4650      	mov	r0, sl
 800902c:	f000 fc4e 	bl	80098cc <__mcmp>
 8009030:	4602      	mov	r2, r0
 8009032:	4629      	mov	r1, r5
 8009034:	4620      	mov	r0, r4
 8009036:	9209      	str	r2, [sp, #36]	; 0x24
 8009038:	f000 fa0c 	bl	8009454 <_Bfree>
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009040:	9d04      	ldr	r5, [sp, #16]
 8009042:	ea43 0102 	orr.w	r1, r3, r2
 8009046:	9b06      	ldr	r3, [sp, #24]
 8009048:	4319      	orrs	r1, r3
 800904a:	d110      	bne.n	800906e <_dtoa_r+0xa7e>
 800904c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009050:	d029      	beq.n	80090a6 <_dtoa_r+0xab6>
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dd02      	ble.n	800905e <_dtoa_r+0xa6e>
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	f883 9000 	strb.w	r9, [r3]
 8009064:	e774      	b.n	8008f50 <_dtoa_r+0x960>
 8009066:	4638      	mov	r0, r7
 8009068:	e7ba      	b.n	8008fe0 <_dtoa_r+0x9f0>
 800906a:	2201      	movs	r2, #1
 800906c:	e7e1      	b.n	8009032 <_dtoa_r+0xa42>
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	db04      	blt.n	800907e <_dtoa_r+0xa8e>
 8009074:	9907      	ldr	r1, [sp, #28]
 8009076:	430b      	orrs	r3, r1
 8009078:	9906      	ldr	r1, [sp, #24]
 800907a:	430b      	orrs	r3, r1
 800907c:	d120      	bne.n	80090c0 <_dtoa_r+0xad0>
 800907e:	2a00      	cmp	r2, #0
 8009080:	dded      	ble.n	800905e <_dtoa_r+0xa6e>
 8009082:	4651      	mov	r1, sl
 8009084:	2201      	movs	r2, #1
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fbb4 	bl	80097f4 <__lshift>
 800908c:	4631      	mov	r1, r6
 800908e:	4682      	mov	sl, r0
 8009090:	f000 fc1c 	bl	80098cc <__mcmp>
 8009094:	2800      	cmp	r0, #0
 8009096:	dc03      	bgt.n	80090a0 <_dtoa_r+0xab0>
 8009098:	d1e1      	bne.n	800905e <_dtoa_r+0xa6e>
 800909a:	f019 0f01 	tst.w	r9, #1
 800909e:	d0de      	beq.n	800905e <_dtoa_r+0xa6e>
 80090a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090a4:	d1d8      	bne.n	8009058 <_dtoa_r+0xa68>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	2339      	movs	r3, #57	; 0x39
 80090aa:	7013      	strb	r3, [r2, #0]
 80090ac:	462b      	mov	r3, r5
 80090ae:	461d      	mov	r5, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090b6:	2a39      	cmp	r2, #57	; 0x39
 80090b8:	d06c      	beq.n	8009194 <_dtoa_r+0xba4>
 80090ba:	3201      	adds	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e747      	b.n	8008f50 <_dtoa_r+0x960>
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	dd07      	ble.n	80090d4 <_dtoa_r+0xae4>
 80090c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090c8:	d0ed      	beq.n	80090a6 <_dtoa_r+0xab6>
 80090ca:	9a01      	ldr	r2, [sp, #4]
 80090cc:	f109 0301 	add.w	r3, r9, #1
 80090d0:	7013      	strb	r3, [r2, #0]
 80090d2:	e73d      	b.n	8008f50 <_dtoa_r+0x960>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	9a08      	ldr	r2, [sp, #32]
 80090d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090dc:	4293      	cmp	r3, r2
 80090de:	d043      	beq.n	8009168 <_dtoa_r+0xb78>
 80090e0:	4651      	mov	r1, sl
 80090e2:	2300      	movs	r3, #0
 80090e4:	220a      	movs	r2, #10
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f9d6 	bl	8009498 <__multadd>
 80090ec:	45b8      	cmp	r8, r7
 80090ee:	4682      	mov	sl, r0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	f04f 020a 	mov.w	r2, #10
 80090f8:	4641      	mov	r1, r8
 80090fa:	4620      	mov	r0, r4
 80090fc:	d107      	bne.n	800910e <_dtoa_r+0xb1e>
 80090fe:	f000 f9cb 	bl	8009498 <__multadd>
 8009102:	4680      	mov	r8, r0
 8009104:	4607      	mov	r7, r0
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	e775      	b.n	8008ffa <_dtoa_r+0xa0a>
 800910e:	f000 f9c3 	bl	8009498 <__multadd>
 8009112:	4639      	mov	r1, r7
 8009114:	4680      	mov	r8, r0
 8009116:	2300      	movs	r3, #0
 8009118:	220a      	movs	r2, #10
 800911a:	4620      	mov	r0, r4
 800911c:	f000 f9bc 	bl	8009498 <__multadd>
 8009120:	4607      	mov	r7, r0
 8009122:	e7f0      	b.n	8009106 <_dtoa_r+0xb16>
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	9d00      	ldr	r5, [sp, #0]
 800912a:	4631      	mov	r1, r6
 800912c:	4650      	mov	r0, sl
 800912e:	f7ff f9d5 	bl	80084dc <quorem>
 8009132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	f805 9b01 	strb.w	r9, [r5], #1
 800913c:	1aea      	subs	r2, r5, r3
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	4293      	cmp	r3, r2
 8009142:	dd07      	ble.n	8009154 <_dtoa_r+0xb64>
 8009144:	4651      	mov	r1, sl
 8009146:	2300      	movs	r3, #0
 8009148:	220a      	movs	r2, #10
 800914a:	4620      	mov	r0, r4
 800914c:	f000 f9a4 	bl	8009498 <__multadd>
 8009150:	4682      	mov	sl, r0
 8009152:	e7ea      	b.n	800912a <_dtoa_r+0xb3a>
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfc8      	it	gt
 800915a:	461d      	movgt	r5, r3
 800915c:	9b00      	ldr	r3, [sp, #0]
 800915e:	bfd8      	it	le
 8009160:	2501      	movle	r5, #1
 8009162:	441d      	add	r5, r3
 8009164:	f04f 0800 	mov.w	r8, #0
 8009168:	4651      	mov	r1, sl
 800916a:	2201      	movs	r2, #1
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fb41 	bl	80097f4 <__lshift>
 8009172:	4631      	mov	r1, r6
 8009174:	4682      	mov	sl, r0
 8009176:	f000 fba9 	bl	80098cc <__mcmp>
 800917a:	2800      	cmp	r0, #0
 800917c:	dc96      	bgt.n	80090ac <_dtoa_r+0xabc>
 800917e:	d102      	bne.n	8009186 <_dtoa_r+0xb96>
 8009180:	f019 0f01 	tst.w	r9, #1
 8009184:	d192      	bne.n	80090ac <_dtoa_r+0xabc>
 8009186:	462b      	mov	r3, r5
 8009188:	461d      	mov	r5, r3
 800918a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800918e:	2a30      	cmp	r2, #48	; 0x30
 8009190:	d0fa      	beq.n	8009188 <_dtoa_r+0xb98>
 8009192:	e6dd      	b.n	8008f50 <_dtoa_r+0x960>
 8009194:	9a00      	ldr	r2, [sp, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d189      	bne.n	80090ae <_dtoa_r+0xabe>
 800919a:	f10b 0b01 	add.w	fp, fp, #1
 800919e:	2331      	movs	r3, #49	; 0x31
 80091a0:	e796      	b.n	80090d0 <_dtoa_r+0xae0>
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <_dtoa_r+0xbdc>)
 80091a4:	f7ff ba99 	b.w	80086da <_dtoa_r+0xea>
 80091a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f47f aa6d 	bne.w	800868a <_dtoa_r+0x9a>
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <_dtoa_r+0xbe0>)
 80091b2:	f7ff ba92 	b.w	80086da <_dtoa_r+0xea>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dcb5      	bgt.n	8009128 <_dtoa_r+0xb38>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	f73f aeb1 	bgt.w	8008f26 <_dtoa_r+0x936>
 80091c4:	e7b0      	b.n	8009128 <_dtoa_r+0xb38>
 80091c6:	bf00      	nop
 80091c8:	0800a39c 	.word	0x0800a39c
 80091cc:	0800a2fc 	.word	0x0800a2fc
 80091d0:	0800a320 	.word	0x0800a320

080091d4 <_free_r>:
 80091d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d044      	beq.n	8009264 <_free_r+0x90>
 80091da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f1a1 0404 	sub.w	r4, r1, #4
 80091e6:	bfb8      	it	lt
 80091e8:	18e4      	addlt	r4, r4, r3
 80091ea:	f000 f8e7 	bl	80093bc <__malloc_lock>
 80091ee:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <_free_r+0x94>)
 80091f0:	9801      	ldr	r0, [sp, #4]
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	b933      	cbnz	r3, 8009204 <_free_r+0x30>
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	6014      	str	r4, [r2, #0]
 80091fa:	b003      	add	sp, #12
 80091fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009200:	f000 b8e2 	b.w	80093c8 <__malloc_unlock>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d908      	bls.n	800921a <_free_r+0x46>
 8009208:	6825      	ldr	r5, [r4, #0]
 800920a:	1961      	adds	r1, r4, r5
 800920c:	428b      	cmp	r3, r1
 800920e:	bf01      	itttt	eq
 8009210:	6819      	ldreq	r1, [r3, #0]
 8009212:	685b      	ldreq	r3, [r3, #4]
 8009214:	1949      	addeq	r1, r1, r5
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	e7ed      	b.n	80091f6 <_free_r+0x22>
 800921a:	461a      	mov	r2, r3
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b10b      	cbz	r3, 8009224 <_free_r+0x50>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d9fa      	bls.n	800921a <_free_r+0x46>
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	1855      	adds	r5, r2, r1
 8009228:	42a5      	cmp	r5, r4
 800922a:	d10b      	bne.n	8009244 <_free_r+0x70>
 800922c:	6824      	ldr	r4, [r4, #0]
 800922e:	4421      	add	r1, r4
 8009230:	1854      	adds	r4, r2, r1
 8009232:	42a3      	cmp	r3, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	d1e0      	bne.n	80091fa <_free_r+0x26>
 8009238:	681c      	ldr	r4, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6053      	str	r3, [r2, #4]
 800923e:	440c      	add	r4, r1
 8009240:	6014      	str	r4, [r2, #0]
 8009242:	e7da      	b.n	80091fa <_free_r+0x26>
 8009244:	d902      	bls.n	800924c <_free_r+0x78>
 8009246:	230c      	movs	r3, #12
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	e7d6      	b.n	80091fa <_free_r+0x26>
 800924c:	6825      	ldr	r5, [r4, #0]
 800924e:	1961      	adds	r1, r4, r5
 8009250:	428b      	cmp	r3, r1
 8009252:	bf04      	itt	eq
 8009254:	6819      	ldreq	r1, [r3, #0]
 8009256:	685b      	ldreq	r3, [r3, #4]
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	bf04      	itt	eq
 800925c:	1949      	addeq	r1, r1, r5
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	6054      	str	r4, [r2, #4]
 8009262:	e7ca      	b.n	80091fa <_free_r+0x26>
 8009264:	b003      	add	sp, #12
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	200004fc 	.word	0x200004fc

0800926c <malloc>:
 800926c:	4b02      	ldr	r3, [pc, #8]	; (8009278 <malloc+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 b823 	b.w	80092bc <_malloc_r>
 8009276:	bf00      	nop
 8009278:	20000064 	.word	0x20000064

0800927c <sbrk_aligned>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0e      	ldr	r6, [pc, #56]	; (80092b8 <sbrk_aligned+0x3c>)
 8009280:	460c      	mov	r4, r1
 8009282:	6831      	ldr	r1, [r6, #0]
 8009284:	4605      	mov	r5, r0
 8009286:	b911      	cbnz	r1, 800928e <sbrk_aligned+0x12>
 8009288:	f000 fcce 	bl	8009c28 <_sbrk_r>
 800928c:	6030      	str	r0, [r6, #0]
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	f000 fcc9 	bl	8009c28 <_sbrk_r>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d00a      	beq.n	80092b0 <sbrk_aligned+0x34>
 800929a:	1cc4      	adds	r4, r0, #3
 800929c:	f024 0403 	bic.w	r4, r4, #3
 80092a0:	42a0      	cmp	r0, r4
 80092a2:	d007      	beq.n	80092b4 <sbrk_aligned+0x38>
 80092a4:	1a21      	subs	r1, r4, r0
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 fcbe 	bl	8009c28 <_sbrk_r>
 80092ac:	3001      	adds	r0, #1
 80092ae:	d101      	bne.n	80092b4 <sbrk_aligned+0x38>
 80092b0:	f04f 34ff 	mov.w	r4, #4294967295
 80092b4:	4620      	mov	r0, r4
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	20000500 	.word	0x20000500

080092bc <_malloc_r>:
 80092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	1ccd      	adds	r5, r1, #3
 80092c2:	f025 0503 	bic.w	r5, r5, #3
 80092c6:	3508      	adds	r5, #8
 80092c8:	2d0c      	cmp	r5, #12
 80092ca:	bf38      	it	cc
 80092cc:	250c      	movcc	r5, #12
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	4607      	mov	r7, r0
 80092d2:	db01      	blt.n	80092d8 <_malloc_r+0x1c>
 80092d4:	42a9      	cmp	r1, r5
 80092d6:	d905      	bls.n	80092e4 <_malloc_r+0x28>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	2600      	movs	r6, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093b8 <_malloc_r+0xfc>
 80092e8:	f000 f868 	bl	80093bc <__malloc_lock>
 80092ec:	f8d8 3000 	ldr.w	r3, [r8]
 80092f0:	461c      	mov	r4, r3
 80092f2:	bb5c      	cbnz	r4, 800934c <_malloc_r+0x90>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff ffc0 	bl	800927c <sbrk_aligned>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	4604      	mov	r4, r0
 8009300:	d155      	bne.n	80093ae <_malloc_r+0xf2>
 8009302:	f8d8 4000 	ldr.w	r4, [r8]
 8009306:	4626      	mov	r6, r4
 8009308:	2e00      	cmp	r6, #0
 800930a:	d145      	bne.n	8009398 <_malloc_r+0xdc>
 800930c:	2c00      	cmp	r4, #0
 800930e:	d048      	beq.n	80093a2 <_malloc_r+0xe6>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	4631      	mov	r1, r6
 8009314:	4638      	mov	r0, r7
 8009316:	eb04 0903 	add.w	r9, r4, r3
 800931a:	f000 fc85 	bl	8009c28 <_sbrk_r>
 800931e:	4581      	cmp	r9, r0
 8009320:	d13f      	bne.n	80093a2 <_malloc_r+0xe6>
 8009322:	6821      	ldr	r1, [r4, #0]
 8009324:	1a6d      	subs	r5, r5, r1
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ffa7 	bl	800927c <sbrk_aligned>
 800932e:	3001      	adds	r0, #1
 8009330:	d037      	beq.n	80093a2 <_malloc_r+0xe6>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	442b      	add	r3, r5
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	f8d8 3000 	ldr.w	r3, [r8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d038      	beq.n	80093b2 <_malloc_r+0xf6>
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	42a2      	cmp	r2, r4
 8009344:	d12b      	bne.n	800939e <_malloc_r+0xe2>
 8009346:	2200      	movs	r2, #0
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	e00f      	b.n	800936c <_malloc_r+0xb0>
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	1b52      	subs	r2, r2, r5
 8009350:	d41f      	bmi.n	8009392 <_malloc_r+0xd6>
 8009352:	2a0b      	cmp	r2, #11
 8009354:	d917      	bls.n	8009386 <_malloc_r+0xca>
 8009356:	1961      	adds	r1, r4, r5
 8009358:	42a3      	cmp	r3, r4
 800935a:	6025      	str	r5, [r4, #0]
 800935c:	bf18      	it	ne
 800935e:	6059      	strne	r1, [r3, #4]
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	bf08      	it	eq
 8009364:	f8c8 1000 	streq.w	r1, [r8]
 8009368:	5162      	str	r2, [r4, r5]
 800936a:	604b      	str	r3, [r1, #4]
 800936c:	4638      	mov	r0, r7
 800936e:	f104 060b 	add.w	r6, r4, #11
 8009372:	f000 f829 	bl	80093c8 <__malloc_unlock>
 8009376:	f026 0607 	bic.w	r6, r6, #7
 800937a:	1d23      	adds	r3, r4, #4
 800937c:	1af2      	subs	r2, r6, r3
 800937e:	d0ae      	beq.n	80092de <_malloc_r+0x22>
 8009380:	1b9b      	subs	r3, r3, r6
 8009382:	50a3      	str	r3, [r4, r2]
 8009384:	e7ab      	b.n	80092de <_malloc_r+0x22>
 8009386:	42a3      	cmp	r3, r4
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	d1dd      	bne.n	8009348 <_malloc_r+0x8c>
 800938c:	f8c8 2000 	str.w	r2, [r8]
 8009390:	e7ec      	b.n	800936c <_malloc_r+0xb0>
 8009392:	4623      	mov	r3, r4
 8009394:	6864      	ldr	r4, [r4, #4]
 8009396:	e7ac      	b.n	80092f2 <_malloc_r+0x36>
 8009398:	4634      	mov	r4, r6
 800939a:	6876      	ldr	r6, [r6, #4]
 800939c:	e7b4      	b.n	8009308 <_malloc_r+0x4c>
 800939e:	4613      	mov	r3, r2
 80093a0:	e7cc      	b.n	800933c <_malloc_r+0x80>
 80093a2:	230c      	movs	r3, #12
 80093a4:	603b      	str	r3, [r7, #0]
 80093a6:	4638      	mov	r0, r7
 80093a8:	f000 f80e 	bl	80093c8 <__malloc_unlock>
 80093ac:	e797      	b.n	80092de <_malloc_r+0x22>
 80093ae:	6025      	str	r5, [r4, #0]
 80093b0:	e7dc      	b.n	800936c <_malloc_r+0xb0>
 80093b2:	605b      	str	r3, [r3, #4]
 80093b4:	deff      	udf	#255	; 0xff
 80093b6:	bf00      	nop
 80093b8:	200004fc 	.word	0x200004fc

080093bc <__malloc_lock>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__malloc_lock+0x8>)
 80093be:	f7ff b88b 	b.w	80084d8 <__retarget_lock_acquire_recursive>
 80093c2:	bf00      	nop
 80093c4:	200004f8 	.word	0x200004f8

080093c8 <__malloc_unlock>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__malloc_unlock+0x8>)
 80093ca:	f7ff b886 	b.w	80084da <__retarget_lock_release_recursive>
 80093ce:	bf00      	nop
 80093d0:	200004f8 	.word	0x200004f8

080093d4 <_Balloc>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	69c6      	ldr	r6, [r0, #28]
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	b976      	cbnz	r6, 80093fc <_Balloc+0x28>
 80093de:	2010      	movs	r0, #16
 80093e0:	f7ff ff44 	bl	800926c <malloc>
 80093e4:	4602      	mov	r2, r0
 80093e6:	61e0      	str	r0, [r4, #28]
 80093e8:	b920      	cbnz	r0, 80093f4 <_Balloc+0x20>
 80093ea:	4b18      	ldr	r3, [pc, #96]	; (800944c <_Balloc+0x78>)
 80093ec:	4818      	ldr	r0, [pc, #96]	; (8009450 <_Balloc+0x7c>)
 80093ee:	216b      	movs	r1, #107	; 0x6b
 80093f0:	f000 fc38 	bl	8009c64 <__assert_func>
 80093f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093f8:	6006      	str	r6, [r0, #0]
 80093fa:	60c6      	str	r6, [r0, #12]
 80093fc:	69e6      	ldr	r6, [r4, #28]
 80093fe:	68f3      	ldr	r3, [r6, #12]
 8009400:	b183      	cbz	r3, 8009424 <_Balloc+0x50>
 8009402:	69e3      	ldr	r3, [r4, #28]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800940a:	b9b8      	cbnz	r0, 800943c <_Balloc+0x68>
 800940c:	2101      	movs	r1, #1
 800940e:	fa01 f605 	lsl.w	r6, r1, r5
 8009412:	1d72      	adds	r2, r6, #5
 8009414:	0092      	lsls	r2, r2, #2
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fc42 	bl	8009ca0 <_calloc_r>
 800941c:	b160      	cbz	r0, 8009438 <_Balloc+0x64>
 800941e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009422:	e00e      	b.n	8009442 <_Balloc+0x6e>
 8009424:	2221      	movs	r2, #33	; 0x21
 8009426:	2104      	movs	r1, #4
 8009428:	4620      	mov	r0, r4
 800942a:	f000 fc39 	bl	8009ca0 <_calloc_r>
 800942e:	69e3      	ldr	r3, [r4, #28]
 8009430:	60f0      	str	r0, [r6, #12]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e4      	bne.n	8009402 <_Balloc+0x2e>
 8009438:	2000      	movs	r0, #0
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	6802      	ldr	r2, [r0, #0]
 800943e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009442:	2300      	movs	r3, #0
 8009444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009448:	e7f7      	b.n	800943a <_Balloc+0x66>
 800944a:	bf00      	nop
 800944c:	0800a32d 	.word	0x0800a32d
 8009450:	0800a3ad 	.word	0x0800a3ad

08009454 <_Bfree>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	69c6      	ldr	r6, [r0, #28]
 8009458:	4605      	mov	r5, r0
 800945a:	460c      	mov	r4, r1
 800945c:	b976      	cbnz	r6, 800947c <_Bfree+0x28>
 800945e:	2010      	movs	r0, #16
 8009460:	f7ff ff04 	bl	800926c <malloc>
 8009464:	4602      	mov	r2, r0
 8009466:	61e8      	str	r0, [r5, #28]
 8009468:	b920      	cbnz	r0, 8009474 <_Bfree+0x20>
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <_Bfree+0x3c>)
 800946c:	4809      	ldr	r0, [pc, #36]	; (8009494 <_Bfree+0x40>)
 800946e:	218f      	movs	r1, #143	; 0x8f
 8009470:	f000 fbf8 	bl	8009c64 <__assert_func>
 8009474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009478:	6006      	str	r6, [r0, #0]
 800947a:	60c6      	str	r6, [r0, #12]
 800947c:	b13c      	cbz	r4, 800948e <_Bfree+0x3a>
 800947e:	69eb      	ldr	r3, [r5, #28]
 8009480:	6862      	ldr	r2, [r4, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009488:	6021      	str	r1, [r4, #0]
 800948a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	0800a32d 	.word	0x0800a32d
 8009494:	0800a3ad 	.word	0x0800a3ad

08009498 <__multadd>:
 8009498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949c:	690d      	ldr	r5, [r1, #16]
 800949e:	4607      	mov	r7, r0
 80094a0:	460c      	mov	r4, r1
 80094a2:	461e      	mov	r6, r3
 80094a4:	f101 0c14 	add.w	ip, r1, #20
 80094a8:	2000      	movs	r0, #0
 80094aa:	f8dc 3000 	ldr.w	r3, [ip]
 80094ae:	b299      	uxth	r1, r3
 80094b0:	fb02 6101 	mla	r1, r2, r1, r6
 80094b4:	0c1e      	lsrs	r6, r3, #16
 80094b6:	0c0b      	lsrs	r3, r1, #16
 80094b8:	fb02 3306 	mla	r3, r2, r6, r3
 80094bc:	b289      	uxth	r1, r1
 80094be:	3001      	adds	r0, #1
 80094c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094c4:	4285      	cmp	r5, r0
 80094c6:	f84c 1b04 	str.w	r1, [ip], #4
 80094ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094ce:	dcec      	bgt.n	80094aa <__multadd+0x12>
 80094d0:	b30e      	cbz	r6, 8009516 <__multadd+0x7e>
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dc19      	bgt.n	800950c <__multadd+0x74>
 80094d8:	6861      	ldr	r1, [r4, #4]
 80094da:	4638      	mov	r0, r7
 80094dc:	3101      	adds	r1, #1
 80094de:	f7ff ff79 	bl	80093d4 <_Balloc>
 80094e2:	4680      	mov	r8, r0
 80094e4:	b928      	cbnz	r0, 80094f2 <__multadd+0x5a>
 80094e6:	4602      	mov	r2, r0
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <__multadd+0x84>)
 80094ea:	480d      	ldr	r0, [pc, #52]	; (8009520 <__multadd+0x88>)
 80094ec:	21ba      	movs	r1, #186	; 0xba
 80094ee:	f000 fbb9 	bl	8009c64 <__assert_func>
 80094f2:	6922      	ldr	r2, [r4, #16]
 80094f4:	3202      	adds	r2, #2
 80094f6:	f104 010c 	add.w	r1, r4, #12
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	300c      	adds	r0, #12
 80094fe:	f000 fba3 	bl	8009c48 <memcpy>
 8009502:	4621      	mov	r1, r4
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff ffa5 	bl	8009454 <_Bfree>
 800950a:	4644      	mov	r4, r8
 800950c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009510:	3501      	adds	r5, #1
 8009512:	615e      	str	r6, [r3, #20]
 8009514:	6125      	str	r5, [r4, #16]
 8009516:	4620      	mov	r0, r4
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951c:	0800a39c 	.word	0x0800a39c
 8009520:	0800a3ad 	.word	0x0800a3ad

08009524 <__hi0bits>:
 8009524:	0c03      	lsrs	r3, r0, #16
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	b9d3      	cbnz	r3, 8009560 <__hi0bits+0x3c>
 800952a:	0400      	lsls	r0, r0, #16
 800952c:	2310      	movs	r3, #16
 800952e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009532:	bf04      	itt	eq
 8009534:	0200      	lsleq	r0, r0, #8
 8009536:	3308      	addeq	r3, #8
 8009538:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800953c:	bf04      	itt	eq
 800953e:	0100      	lsleq	r0, r0, #4
 8009540:	3304      	addeq	r3, #4
 8009542:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009546:	bf04      	itt	eq
 8009548:	0080      	lsleq	r0, r0, #2
 800954a:	3302      	addeq	r3, #2
 800954c:	2800      	cmp	r0, #0
 800954e:	db05      	blt.n	800955c <__hi0bits+0x38>
 8009550:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009554:	f103 0301 	add.w	r3, r3, #1
 8009558:	bf08      	it	eq
 800955a:	2320      	moveq	r3, #32
 800955c:	4618      	mov	r0, r3
 800955e:	4770      	bx	lr
 8009560:	2300      	movs	r3, #0
 8009562:	e7e4      	b.n	800952e <__hi0bits+0xa>

08009564 <__lo0bits>:
 8009564:	6803      	ldr	r3, [r0, #0]
 8009566:	f013 0207 	ands.w	r2, r3, #7
 800956a:	d00c      	beq.n	8009586 <__lo0bits+0x22>
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	d422      	bmi.n	80095b6 <__lo0bits+0x52>
 8009570:	079a      	lsls	r2, r3, #30
 8009572:	bf49      	itett	mi
 8009574:	085b      	lsrmi	r3, r3, #1
 8009576:	089b      	lsrpl	r3, r3, #2
 8009578:	6003      	strmi	r3, [r0, #0]
 800957a:	2201      	movmi	r2, #1
 800957c:	bf5c      	itt	pl
 800957e:	6003      	strpl	r3, [r0, #0]
 8009580:	2202      	movpl	r2, #2
 8009582:	4610      	mov	r0, r2
 8009584:	4770      	bx	lr
 8009586:	b299      	uxth	r1, r3
 8009588:	b909      	cbnz	r1, 800958e <__lo0bits+0x2a>
 800958a:	0c1b      	lsrs	r3, r3, #16
 800958c:	2210      	movs	r2, #16
 800958e:	b2d9      	uxtb	r1, r3
 8009590:	b909      	cbnz	r1, 8009596 <__lo0bits+0x32>
 8009592:	3208      	adds	r2, #8
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	0719      	lsls	r1, r3, #28
 8009598:	bf04      	itt	eq
 800959a:	091b      	lsreq	r3, r3, #4
 800959c:	3204      	addeq	r2, #4
 800959e:	0799      	lsls	r1, r3, #30
 80095a0:	bf04      	itt	eq
 80095a2:	089b      	lsreq	r3, r3, #2
 80095a4:	3202      	addeq	r2, #2
 80095a6:	07d9      	lsls	r1, r3, #31
 80095a8:	d403      	bmi.n	80095b2 <__lo0bits+0x4e>
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	f102 0201 	add.w	r2, r2, #1
 80095b0:	d003      	beq.n	80095ba <__lo0bits+0x56>
 80095b2:	6003      	str	r3, [r0, #0]
 80095b4:	e7e5      	b.n	8009582 <__lo0bits+0x1e>
 80095b6:	2200      	movs	r2, #0
 80095b8:	e7e3      	b.n	8009582 <__lo0bits+0x1e>
 80095ba:	2220      	movs	r2, #32
 80095bc:	e7e1      	b.n	8009582 <__lo0bits+0x1e>
	...

080095c0 <__i2b>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	460c      	mov	r4, r1
 80095c4:	2101      	movs	r1, #1
 80095c6:	f7ff ff05 	bl	80093d4 <_Balloc>
 80095ca:	4602      	mov	r2, r0
 80095cc:	b928      	cbnz	r0, 80095da <__i2b+0x1a>
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <__i2b+0x24>)
 80095d0:	4805      	ldr	r0, [pc, #20]	; (80095e8 <__i2b+0x28>)
 80095d2:	f240 1145 	movw	r1, #325	; 0x145
 80095d6:	f000 fb45 	bl	8009c64 <__assert_func>
 80095da:	2301      	movs	r3, #1
 80095dc:	6144      	str	r4, [r0, #20]
 80095de:	6103      	str	r3, [r0, #16]
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	bf00      	nop
 80095e4:	0800a39c 	.word	0x0800a39c
 80095e8:	0800a3ad 	.word	0x0800a3ad

080095ec <__multiply>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	4691      	mov	r9, r2
 80095f2:	690a      	ldr	r2, [r1, #16]
 80095f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	bfb8      	it	lt
 80095fc:	460b      	movlt	r3, r1
 80095fe:	460c      	mov	r4, r1
 8009600:	bfbc      	itt	lt
 8009602:	464c      	movlt	r4, r9
 8009604:	4699      	movlt	r9, r3
 8009606:	6927      	ldr	r7, [r4, #16]
 8009608:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	6861      	ldr	r1, [r4, #4]
 8009610:	eb07 060a 	add.w	r6, r7, sl
 8009614:	42b3      	cmp	r3, r6
 8009616:	b085      	sub	sp, #20
 8009618:	bfb8      	it	lt
 800961a:	3101      	addlt	r1, #1
 800961c:	f7ff feda 	bl	80093d4 <_Balloc>
 8009620:	b930      	cbnz	r0, 8009630 <__multiply+0x44>
 8009622:	4602      	mov	r2, r0
 8009624:	4b44      	ldr	r3, [pc, #272]	; (8009738 <__multiply+0x14c>)
 8009626:	4845      	ldr	r0, [pc, #276]	; (800973c <__multiply+0x150>)
 8009628:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800962c:	f000 fb1a 	bl	8009c64 <__assert_func>
 8009630:	f100 0514 	add.w	r5, r0, #20
 8009634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009638:	462b      	mov	r3, r5
 800963a:	2200      	movs	r2, #0
 800963c:	4543      	cmp	r3, r8
 800963e:	d321      	bcc.n	8009684 <__multiply+0x98>
 8009640:	f104 0314 	add.w	r3, r4, #20
 8009644:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009648:	f109 0314 	add.w	r3, r9, #20
 800964c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	1b3a      	subs	r2, r7, r4
 8009654:	3a15      	subs	r2, #21
 8009656:	f022 0203 	bic.w	r2, r2, #3
 800965a:	3204      	adds	r2, #4
 800965c:	f104 0115 	add.w	r1, r4, #21
 8009660:	428f      	cmp	r7, r1
 8009662:	bf38      	it	cc
 8009664:	2204      	movcc	r2, #4
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	9a02      	ldr	r2, [sp, #8]
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	429a      	cmp	r2, r3
 800966e:	d80c      	bhi.n	800968a <__multiply+0x9e>
 8009670:	2e00      	cmp	r6, #0
 8009672:	dd03      	ble.n	800967c <__multiply+0x90>
 8009674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05b      	beq.n	8009734 <__multiply+0x148>
 800967c:	6106      	str	r6, [r0, #16]
 800967e:	b005      	add	sp, #20
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	f843 2b04 	str.w	r2, [r3], #4
 8009688:	e7d8      	b.n	800963c <__multiply+0x50>
 800968a:	f8b3 a000 	ldrh.w	sl, [r3]
 800968e:	f1ba 0f00 	cmp.w	sl, #0
 8009692:	d024      	beq.n	80096de <__multiply+0xf2>
 8009694:	f104 0e14 	add.w	lr, r4, #20
 8009698:	46a9      	mov	r9, r5
 800969a:	f04f 0c00 	mov.w	ip, #0
 800969e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096a2:	f8d9 1000 	ldr.w	r1, [r9]
 80096a6:	fa1f fb82 	uxth.w	fp, r2
 80096aa:	b289      	uxth	r1, r1
 80096ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80096b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	4461      	add	r1, ip
 80096ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096be:	fb0a c20b 	mla	r2, sl, fp, ip
 80096c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096c6:	b289      	uxth	r1, r1
 80096c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096cc:	4577      	cmp	r7, lr
 80096ce:	f849 1b04 	str.w	r1, [r9], #4
 80096d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096d6:	d8e2      	bhi.n	800969e <__multiply+0xb2>
 80096d8:	9a01      	ldr	r2, [sp, #4]
 80096da:	f845 c002 	str.w	ip, [r5, r2]
 80096de:	9a03      	ldr	r2, [sp, #12]
 80096e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096e4:	3304      	adds	r3, #4
 80096e6:	f1b9 0f00 	cmp.w	r9, #0
 80096ea:	d021      	beq.n	8009730 <__multiply+0x144>
 80096ec:	6829      	ldr	r1, [r5, #0]
 80096ee:	f104 0c14 	add.w	ip, r4, #20
 80096f2:	46ae      	mov	lr, r5
 80096f4:	f04f 0a00 	mov.w	sl, #0
 80096f8:	f8bc b000 	ldrh.w	fp, [ip]
 80096fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009700:	fb09 220b 	mla	r2, r9, fp, r2
 8009704:	4452      	add	r2, sl
 8009706:	b289      	uxth	r1, r1
 8009708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800970c:	f84e 1b04 	str.w	r1, [lr], #4
 8009710:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009714:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009718:	f8be 1000 	ldrh.w	r1, [lr]
 800971c:	fb09 110a 	mla	r1, r9, sl, r1
 8009720:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009724:	4567      	cmp	r7, ip
 8009726:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800972a:	d8e5      	bhi.n	80096f8 <__multiply+0x10c>
 800972c:	9a01      	ldr	r2, [sp, #4]
 800972e:	50a9      	str	r1, [r5, r2]
 8009730:	3504      	adds	r5, #4
 8009732:	e799      	b.n	8009668 <__multiply+0x7c>
 8009734:	3e01      	subs	r6, #1
 8009736:	e79b      	b.n	8009670 <__multiply+0x84>
 8009738:	0800a39c 	.word	0x0800a39c
 800973c:	0800a3ad 	.word	0x0800a3ad

08009740 <__pow5mult>:
 8009740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009744:	4615      	mov	r5, r2
 8009746:	f012 0203 	ands.w	r2, r2, #3
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	d007      	beq.n	8009760 <__pow5mult+0x20>
 8009750:	4c25      	ldr	r4, [pc, #148]	; (80097e8 <__pow5mult+0xa8>)
 8009752:	3a01      	subs	r2, #1
 8009754:	2300      	movs	r3, #0
 8009756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800975a:	f7ff fe9d 	bl	8009498 <__multadd>
 800975e:	4607      	mov	r7, r0
 8009760:	10ad      	asrs	r5, r5, #2
 8009762:	d03d      	beq.n	80097e0 <__pow5mult+0xa0>
 8009764:	69f4      	ldr	r4, [r6, #28]
 8009766:	b97c      	cbnz	r4, 8009788 <__pow5mult+0x48>
 8009768:	2010      	movs	r0, #16
 800976a:	f7ff fd7f 	bl	800926c <malloc>
 800976e:	4602      	mov	r2, r0
 8009770:	61f0      	str	r0, [r6, #28]
 8009772:	b928      	cbnz	r0, 8009780 <__pow5mult+0x40>
 8009774:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <__pow5mult+0xac>)
 8009776:	481e      	ldr	r0, [pc, #120]	; (80097f0 <__pow5mult+0xb0>)
 8009778:	f240 11b3 	movw	r1, #435	; 0x1b3
 800977c:	f000 fa72 	bl	8009c64 <__assert_func>
 8009780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009784:	6004      	str	r4, [r0, #0]
 8009786:	60c4      	str	r4, [r0, #12]
 8009788:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800978c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009790:	b94c      	cbnz	r4, 80097a6 <__pow5mult+0x66>
 8009792:	f240 2171 	movw	r1, #625	; 0x271
 8009796:	4630      	mov	r0, r6
 8009798:	f7ff ff12 	bl	80095c0 <__i2b>
 800979c:	2300      	movs	r3, #0
 800979e:	f8c8 0008 	str.w	r0, [r8, #8]
 80097a2:	4604      	mov	r4, r0
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	f04f 0900 	mov.w	r9, #0
 80097aa:	07eb      	lsls	r3, r5, #31
 80097ac:	d50a      	bpl.n	80097c4 <__pow5mult+0x84>
 80097ae:	4639      	mov	r1, r7
 80097b0:	4622      	mov	r2, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ff1a 	bl	80095ec <__multiply>
 80097b8:	4639      	mov	r1, r7
 80097ba:	4680      	mov	r8, r0
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff fe49 	bl	8009454 <_Bfree>
 80097c2:	4647      	mov	r7, r8
 80097c4:	106d      	asrs	r5, r5, #1
 80097c6:	d00b      	beq.n	80097e0 <__pow5mult+0xa0>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	b938      	cbnz	r0, 80097dc <__pow5mult+0x9c>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4621      	mov	r1, r4
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ff0b 	bl	80095ec <__multiply>
 80097d6:	6020      	str	r0, [r4, #0]
 80097d8:	f8c0 9000 	str.w	r9, [r0]
 80097dc:	4604      	mov	r4, r0
 80097de:	e7e4      	b.n	80097aa <__pow5mult+0x6a>
 80097e0:	4638      	mov	r0, r7
 80097e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e6:	bf00      	nop
 80097e8:	0800a4f8 	.word	0x0800a4f8
 80097ec:	0800a32d 	.word	0x0800a32d
 80097f0:	0800a3ad 	.word	0x0800a3ad

080097f4 <__lshift>:
 80097f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	6849      	ldr	r1, [r1, #4]
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	4607      	mov	r7, r0
 8009806:	4691      	mov	r9, r2
 8009808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800980c:	f108 0601 	add.w	r6, r8, #1
 8009810:	42b3      	cmp	r3, r6
 8009812:	db0b      	blt.n	800982c <__lshift+0x38>
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff fddd 	bl	80093d4 <_Balloc>
 800981a:	4605      	mov	r5, r0
 800981c:	b948      	cbnz	r0, 8009832 <__lshift+0x3e>
 800981e:	4602      	mov	r2, r0
 8009820:	4b28      	ldr	r3, [pc, #160]	; (80098c4 <__lshift+0xd0>)
 8009822:	4829      	ldr	r0, [pc, #164]	; (80098c8 <__lshift+0xd4>)
 8009824:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009828:	f000 fa1c 	bl	8009c64 <__assert_func>
 800982c:	3101      	adds	r1, #1
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	e7ee      	b.n	8009810 <__lshift+0x1c>
 8009832:	2300      	movs	r3, #0
 8009834:	f100 0114 	add.w	r1, r0, #20
 8009838:	f100 0210 	add.w	r2, r0, #16
 800983c:	4618      	mov	r0, r3
 800983e:	4553      	cmp	r3, sl
 8009840:	db33      	blt.n	80098aa <__lshift+0xb6>
 8009842:	6920      	ldr	r0, [r4, #16]
 8009844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009848:	f104 0314 	add.w	r3, r4, #20
 800984c:	f019 091f 	ands.w	r9, r9, #31
 8009850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009858:	d02b      	beq.n	80098b2 <__lshift+0xbe>
 800985a:	f1c9 0e20 	rsb	lr, r9, #32
 800985e:	468a      	mov	sl, r1
 8009860:	2200      	movs	r2, #0
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	fa00 f009 	lsl.w	r0, r0, r9
 8009868:	4310      	orrs	r0, r2
 800986a:	f84a 0b04 	str.w	r0, [sl], #4
 800986e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009872:	459c      	cmp	ip, r3
 8009874:	fa22 f20e 	lsr.w	r2, r2, lr
 8009878:	d8f3      	bhi.n	8009862 <__lshift+0x6e>
 800987a:	ebac 0304 	sub.w	r3, ip, r4
 800987e:	3b15      	subs	r3, #21
 8009880:	f023 0303 	bic.w	r3, r3, #3
 8009884:	3304      	adds	r3, #4
 8009886:	f104 0015 	add.w	r0, r4, #21
 800988a:	4584      	cmp	ip, r0
 800988c:	bf38      	it	cc
 800988e:	2304      	movcc	r3, #4
 8009890:	50ca      	str	r2, [r1, r3]
 8009892:	b10a      	cbz	r2, 8009898 <__lshift+0xa4>
 8009894:	f108 0602 	add.w	r6, r8, #2
 8009898:	3e01      	subs	r6, #1
 800989a:	4638      	mov	r0, r7
 800989c:	612e      	str	r6, [r5, #16]
 800989e:	4621      	mov	r1, r4
 80098a0:	f7ff fdd8 	bl	8009454 <_Bfree>
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ae:	3301      	adds	r3, #1
 80098b0:	e7c5      	b.n	800983e <__lshift+0x4a>
 80098b2:	3904      	subs	r1, #4
 80098b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098bc:	459c      	cmp	ip, r3
 80098be:	d8f9      	bhi.n	80098b4 <__lshift+0xc0>
 80098c0:	e7ea      	b.n	8009898 <__lshift+0xa4>
 80098c2:	bf00      	nop
 80098c4:	0800a39c 	.word	0x0800a39c
 80098c8:	0800a3ad 	.word	0x0800a3ad

080098cc <__mcmp>:
 80098cc:	b530      	push	{r4, r5, lr}
 80098ce:	6902      	ldr	r2, [r0, #16]
 80098d0:	690c      	ldr	r4, [r1, #16]
 80098d2:	1b12      	subs	r2, r2, r4
 80098d4:	d10e      	bne.n	80098f4 <__mcmp+0x28>
 80098d6:	f100 0314 	add.w	r3, r0, #20
 80098da:	3114      	adds	r1, #20
 80098dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098ec:	42a5      	cmp	r5, r4
 80098ee:	d003      	beq.n	80098f8 <__mcmp+0x2c>
 80098f0:	d305      	bcc.n	80098fe <__mcmp+0x32>
 80098f2:	2201      	movs	r2, #1
 80098f4:	4610      	mov	r0, r2
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	4283      	cmp	r3, r0
 80098fa:	d3f3      	bcc.n	80098e4 <__mcmp+0x18>
 80098fc:	e7fa      	b.n	80098f4 <__mcmp+0x28>
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	e7f7      	b.n	80098f4 <__mcmp+0x28>

08009904 <__mdiff>:
 8009904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	460c      	mov	r4, r1
 800990a:	4606      	mov	r6, r0
 800990c:	4611      	mov	r1, r2
 800990e:	4620      	mov	r0, r4
 8009910:	4690      	mov	r8, r2
 8009912:	f7ff ffdb 	bl	80098cc <__mcmp>
 8009916:	1e05      	subs	r5, r0, #0
 8009918:	d110      	bne.n	800993c <__mdiff+0x38>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fd59 	bl	80093d4 <_Balloc>
 8009922:	b930      	cbnz	r0, 8009932 <__mdiff+0x2e>
 8009924:	4b3a      	ldr	r3, [pc, #232]	; (8009a10 <__mdiff+0x10c>)
 8009926:	4602      	mov	r2, r0
 8009928:	f240 2137 	movw	r1, #567	; 0x237
 800992c:	4839      	ldr	r0, [pc, #228]	; (8009a14 <__mdiff+0x110>)
 800992e:	f000 f999 	bl	8009c64 <__assert_func>
 8009932:	2301      	movs	r3, #1
 8009934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	bfa4      	itt	ge
 800993e:	4643      	movge	r3, r8
 8009940:	46a0      	movge	r8, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009948:	bfa6      	itte	ge
 800994a:	461c      	movge	r4, r3
 800994c:	2500      	movge	r5, #0
 800994e:	2501      	movlt	r5, #1
 8009950:	f7ff fd40 	bl	80093d4 <_Balloc>
 8009954:	b920      	cbnz	r0, 8009960 <__mdiff+0x5c>
 8009956:	4b2e      	ldr	r3, [pc, #184]	; (8009a10 <__mdiff+0x10c>)
 8009958:	4602      	mov	r2, r0
 800995a:	f240 2145 	movw	r1, #581	; 0x245
 800995e:	e7e5      	b.n	800992c <__mdiff+0x28>
 8009960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009964:	6926      	ldr	r6, [r4, #16]
 8009966:	60c5      	str	r5, [r0, #12]
 8009968:	f104 0914 	add.w	r9, r4, #20
 800996c:	f108 0514 	add.w	r5, r8, #20
 8009970:	f100 0e14 	add.w	lr, r0, #20
 8009974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800997c:	f108 0210 	add.w	r2, r8, #16
 8009980:	46f2      	mov	sl, lr
 8009982:	2100      	movs	r1, #0
 8009984:	f859 3b04 	ldr.w	r3, [r9], #4
 8009988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800998c:	fa11 f88b 	uxtah	r8, r1, fp
 8009990:	b299      	uxth	r1, r3
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	eba8 0801 	sub.w	r8, r8, r1
 8009998:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800999c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099a0:	fa1f f888 	uxth.w	r8, r8
 80099a4:	1419      	asrs	r1, r3, #16
 80099a6:	454e      	cmp	r6, r9
 80099a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ac:	f84a 3b04 	str.w	r3, [sl], #4
 80099b0:	d8e8      	bhi.n	8009984 <__mdiff+0x80>
 80099b2:	1b33      	subs	r3, r6, r4
 80099b4:	3b15      	subs	r3, #21
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	3304      	adds	r3, #4
 80099bc:	3415      	adds	r4, #21
 80099be:	42a6      	cmp	r6, r4
 80099c0:	bf38      	it	cc
 80099c2:	2304      	movcc	r3, #4
 80099c4:	441d      	add	r5, r3
 80099c6:	4473      	add	r3, lr
 80099c8:	469e      	mov	lr, r3
 80099ca:	462e      	mov	r6, r5
 80099cc:	4566      	cmp	r6, ip
 80099ce:	d30e      	bcc.n	80099ee <__mdiff+0xea>
 80099d0:	f10c 0203 	add.w	r2, ip, #3
 80099d4:	1b52      	subs	r2, r2, r5
 80099d6:	f022 0203 	bic.w	r2, r2, #3
 80099da:	3d03      	subs	r5, #3
 80099dc:	45ac      	cmp	ip, r5
 80099de:	bf38      	it	cc
 80099e0:	2200      	movcc	r2, #0
 80099e2:	4413      	add	r3, r2
 80099e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80099e8:	b17a      	cbz	r2, 8009a0a <__mdiff+0x106>
 80099ea:	6107      	str	r7, [r0, #16]
 80099ec:	e7a4      	b.n	8009938 <__mdiff+0x34>
 80099ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80099f2:	fa11 f288 	uxtah	r2, r1, r8
 80099f6:	1414      	asrs	r4, r2, #16
 80099f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099fc:	b292      	uxth	r2, r2
 80099fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a02:	f84e 2b04 	str.w	r2, [lr], #4
 8009a06:	1421      	asrs	r1, r4, #16
 8009a08:	e7e0      	b.n	80099cc <__mdiff+0xc8>
 8009a0a:	3f01      	subs	r7, #1
 8009a0c:	e7ea      	b.n	80099e4 <__mdiff+0xe0>
 8009a0e:	bf00      	nop
 8009a10:	0800a39c 	.word	0x0800a39c
 8009a14:	0800a3ad 	.word	0x0800a3ad

08009a18 <__d2b>:
 8009a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	2101      	movs	r1, #1
 8009a20:	ec59 8b10 	vmov	r8, r9, d0
 8009a24:	4616      	mov	r6, r2
 8009a26:	f7ff fcd5 	bl	80093d4 <_Balloc>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b930      	cbnz	r0, 8009a3c <__d2b+0x24>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b24      	ldr	r3, [pc, #144]	; (8009ac4 <__d2b+0xac>)
 8009a32:	4825      	ldr	r0, [pc, #148]	; (8009ac8 <__d2b+0xb0>)
 8009a34:	f240 310f 	movw	r1, #783	; 0x30f
 8009a38:	f000 f914 	bl	8009c64 <__assert_func>
 8009a3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a44:	bb2d      	cbnz	r5, 8009a92 <__d2b+0x7a>
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	f1b8 0300 	subs.w	r3, r8, #0
 8009a4c:	d026      	beq.n	8009a9c <__d2b+0x84>
 8009a4e:	4668      	mov	r0, sp
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	f7ff fd87 	bl	8009564 <__lo0bits>
 8009a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a5a:	b1e8      	cbz	r0, 8009a98 <__d2b+0x80>
 8009a5c:	f1c0 0320 	rsb	r3, r0, #32
 8009a60:	fa02 f303 	lsl.w	r3, r2, r3
 8009a64:	430b      	orrs	r3, r1
 8009a66:	40c2      	lsrs	r2, r0
 8009a68:	6163      	str	r3, [r4, #20]
 8009a6a:	9201      	str	r2, [sp, #4]
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	61a3      	str	r3, [r4, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bf14      	ite	ne
 8009a74:	2202      	movne	r2, #2
 8009a76:	2201      	moveq	r2, #1
 8009a78:	6122      	str	r2, [r4, #16]
 8009a7a:	b1bd      	cbz	r5, 8009aac <__d2b+0x94>
 8009a7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a80:	4405      	add	r5, r0
 8009a82:	603d      	str	r5, [r7, #0]
 8009a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a88:	6030      	str	r0, [r6, #0]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	b003      	add	sp, #12
 8009a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a96:	e7d6      	b.n	8009a46 <__d2b+0x2e>
 8009a98:	6161      	str	r1, [r4, #20]
 8009a9a:	e7e7      	b.n	8009a6c <__d2b+0x54>
 8009a9c:	a801      	add	r0, sp, #4
 8009a9e:	f7ff fd61 	bl	8009564 <__lo0bits>
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	6163      	str	r3, [r4, #20]
 8009aa6:	3020      	adds	r0, #32
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	e7e5      	b.n	8009a78 <__d2b+0x60>
 8009aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ab4:	6038      	str	r0, [r7, #0]
 8009ab6:	6918      	ldr	r0, [r3, #16]
 8009ab8:	f7ff fd34 	bl	8009524 <__hi0bits>
 8009abc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ac0:	e7e2      	b.n	8009a88 <__d2b+0x70>
 8009ac2:	bf00      	nop
 8009ac4:	0800a39c 	.word	0x0800a39c
 8009ac8:	0800a3ad 	.word	0x0800a3ad

08009acc <__sflush_r>:
 8009acc:	898a      	ldrh	r2, [r1, #12]
 8009ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	0710      	lsls	r0, r2, #28
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	d458      	bmi.n	8009b8c <__sflush_r+0xc0>
 8009ada:	684b      	ldr	r3, [r1, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dc05      	bgt.n	8009aec <__sflush_r+0x20>
 8009ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dc02      	bgt.n	8009aec <__sflush_r+0x20>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	d0f9      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009af8:	682f      	ldr	r7, [r5, #0]
 8009afa:	6a21      	ldr	r1, [r4, #32]
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	d032      	beq.n	8009b66 <__sflush_r+0x9a>
 8009b00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	075a      	lsls	r2, r3, #29
 8009b06:	d505      	bpl.n	8009b14 <__sflush_r+0x48>
 8009b08:	6863      	ldr	r3, [r4, #4]
 8009b0a:	1ac0      	subs	r0, r0, r3
 8009b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0e:	b10b      	cbz	r3, 8009b14 <__sflush_r+0x48>
 8009b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b12:	1ac0      	subs	r0, r0, r3
 8009b14:	2300      	movs	r3, #0
 8009b16:	4602      	mov	r2, r0
 8009b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1a:	6a21      	ldr	r1, [r4, #32]
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b0      	blx	r6
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	d106      	bne.n	8009b34 <__sflush_r+0x68>
 8009b26:	6829      	ldr	r1, [r5, #0]
 8009b28:	291d      	cmp	r1, #29
 8009b2a:	d82b      	bhi.n	8009b84 <__sflush_r+0xb8>
 8009b2c:	4a29      	ldr	r2, [pc, #164]	; (8009bd4 <__sflush_r+0x108>)
 8009b2e:	410a      	asrs	r2, r1
 8009b30:	07d6      	lsls	r6, r2, #31
 8009b32:	d427      	bmi.n	8009b84 <__sflush_r+0xb8>
 8009b34:	2200      	movs	r2, #0
 8009b36:	6062      	str	r2, [r4, #4]
 8009b38:	04d9      	lsls	r1, r3, #19
 8009b3a:	6922      	ldr	r2, [r4, #16]
 8009b3c:	6022      	str	r2, [r4, #0]
 8009b3e:	d504      	bpl.n	8009b4a <__sflush_r+0x7e>
 8009b40:	1c42      	adds	r2, r0, #1
 8009b42:	d101      	bne.n	8009b48 <__sflush_r+0x7c>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b903      	cbnz	r3, 8009b4a <__sflush_r+0x7e>
 8009b48:	6560      	str	r0, [r4, #84]	; 0x54
 8009b4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4c:	602f      	str	r7, [r5, #0]
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d0c9      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b56:	4299      	cmp	r1, r3
 8009b58:	d002      	beq.n	8009b60 <__sflush_r+0x94>
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f7ff fb3a 	bl	80091d4 <_free_r>
 8009b60:	2000      	movs	r0, #0
 8009b62:	6360      	str	r0, [r4, #52]	; 0x34
 8009b64:	e7c0      	b.n	8009ae8 <__sflush_r+0x1c>
 8009b66:	2301      	movs	r3, #1
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b0      	blx	r6
 8009b6c:	1c41      	adds	r1, r0, #1
 8009b6e:	d1c8      	bne.n	8009b02 <__sflush_r+0x36>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0c5      	beq.n	8009b02 <__sflush_r+0x36>
 8009b76:	2b1d      	cmp	r3, #29
 8009b78:	d001      	beq.n	8009b7e <__sflush_r+0xb2>
 8009b7a:	2b16      	cmp	r3, #22
 8009b7c:	d101      	bne.n	8009b82 <__sflush_r+0xb6>
 8009b7e:	602f      	str	r7, [r5, #0]
 8009b80:	e7b1      	b.n	8009ae6 <__sflush_r+0x1a>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	e7ad      	b.n	8009ae8 <__sflush_r+0x1c>
 8009b8c:	690f      	ldr	r7, [r1, #16]
 8009b8e:	2f00      	cmp	r7, #0
 8009b90:	d0a9      	beq.n	8009ae6 <__sflush_r+0x1a>
 8009b92:	0793      	lsls	r3, r2, #30
 8009b94:	680e      	ldr	r6, [r1, #0]
 8009b96:	bf08      	it	eq
 8009b98:	694b      	ldreq	r3, [r1, #20]
 8009b9a:	600f      	str	r7, [r1, #0]
 8009b9c:	bf18      	it	ne
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	eba6 0807 	sub.w	r8, r6, r7
 8009ba4:	608b      	str	r3, [r1, #8]
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	dd9c      	ble.n	8009ae6 <__sflush_r+0x1a>
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb0:	4643      	mov	r3, r8
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dc06      	bgt.n	8009bca <__sflush_r+0xfe>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	e78e      	b.n	8009ae8 <__sflush_r+0x1c>
 8009bca:	4407      	add	r7, r0
 8009bcc:	eba8 0800 	sub.w	r8, r8, r0
 8009bd0:	e7e9      	b.n	8009ba6 <__sflush_r+0xda>
 8009bd2:	bf00      	nop
 8009bd4:	dfbffffe 	.word	0xdfbffffe

08009bd8 <_fflush_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	690b      	ldr	r3, [r1, #16]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b913      	cbnz	r3, 8009be8 <_fflush_r+0x10>
 8009be2:	2500      	movs	r5, #0
 8009be4:	4628      	mov	r0, r5
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	b118      	cbz	r0, 8009bf2 <_fflush_r+0x1a>
 8009bea:	6a03      	ldr	r3, [r0, #32]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <_fflush_r+0x1a>
 8009bee:	f7fe fb7d 	bl	80082ec <__sinit>
 8009bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f3      	beq.n	8009be2 <_fflush_r+0xa>
 8009bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bfc:	07d0      	lsls	r0, r2, #31
 8009bfe:	d404      	bmi.n	8009c0a <_fflush_r+0x32>
 8009c00:	0599      	lsls	r1, r3, #22
 8009c02:	d402      	bmi.n	8009c0a <_fflush_r+0x32>
 8009c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c06:	f7fe fc67 	bl	80084d8 <__retarget_lock_acquire_recursive>
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	f7ff ff5d 	bl	8009acc <__sflush_r>
 8009c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c14:	07da      	lsls	r2, r3, #31
 8009c16:	4605      	mov	r5, r0
 8009c18:	d4e4      	bmi.n	8009be4 <_fflush_r+0xc>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	059b      	lsls	r3, r3, #22
 8009c1e:	d4e1      	bmi.n	8009be4 <_fflush_r+0xc>
 8009c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c22:	f7fe fc5a 	bl	80084da <__retarget_lock_release_recursive>
 8009c26:	e7dd      	b.n	8009be4 <_fflush_r+0xc>

08009c28 <_sbrk_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_sbrk_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f7 fe00 	bl	8001838 <_sbrk>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_sbrk_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_sbrk_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	200004f4 	.word	0x200004f4

08009c48 <memcpy>:
 8009c48:	440a      	add	r2, r1
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c50:	d100      	bne.n	8009c54 <memcpy+0xc>
 8009c52:	4770      	bx	lr
 8009c54:	b510      	push	{r4, lr}
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	d1f9      	bne.n	8009c56 <memcpy+0xe>
 8009c62:	bd10      	pop	{r4, pc}

08009c64 <__assert_func>:
 8009c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c66:	4614      	mov	r4, r2
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <__assert_func+0x2c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4605      	mov	r5, r0
 8009c70:	68d8      	ldr	r0, [r3, #12]
 8009c72:	b14c      	cbz	r4, 8009c88 <__assert_func+0x24>
 8009c74:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <__assert_func+0x30>)
 8009c76:	9100      	str	r1, [sp, #0]
 8009c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c7c:	4906      	ldr	r1, [pc, #24]	; (8009c98 <__assert_func+0x34>)
 8009c7e:	462b      	mov	r3, r5
 8009c80:	f000 f844 	bl	8009d0c <fiprintf>
 8009c84:	f000 f854 	bl	8009d30 <abort>
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <__assert_func+0x38>)
 8009c8a:	461c      	mov	r4, r3
 8009c8c:	e7f3      	b.n	8009c76 <__assert_func+0x12>
 8009c8e:	bf00      	nop
 8009c90:	20000064 	.word	0x20000064
 8009c94:	0800a50e 	.word	0x0800a50e
 8009c98:	0800a51b 	.word	0x0800a51b
 8009c9c:	0800a549 	.word	0x0800a549

08009ca0 <_calloc_r>:
 8009ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ca2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ca6:	b94c      	cbnz	r4, 8009cbc <_calloc_r+0x1c>
 8009ca8:	4611      	mov	r1, r2
 8009caa:	9201      	str	r2, [sp, #4]
 8009cac:	f7ff fb06 	bl	80092bc <_malloc_r>
 8009cb0:	9a01      	ldr	r2, [sp, #4]
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	b930      	cbnz	r0, 8009cc4 <_calloc_r+0x24>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	b003      	add	sp, #12
 8009cba:	bd30      	pop	{r4, r5, pc}
 8009cbc:	220c      	movs	r2, #12
 8009cbe:	6002      	str	r2, [r0, #0]
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	e7f8      	b.n	8009cb6 <_calloc_r+0x16>
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f7fe fb8a 	bl	80083de <memset>
 8009cca:	e7f4      	b.n	8009cb6 <_calloc_r+0x16>

08009ccc <__ascii_mbtowc>:
 8009ccc:	b082      	sub	sp, #8
 8009cce:	b901      	cbnz	r1, 8009cd2 <__ascii_mbtowc+0x6>
 8009cd0:	a901      	add	r1, sp, #4
 8009cd2:	b142      	cbz	r2, 8009ce6 <__ascii_mbtowc+0x1a>
 8009cd4:	b14b      	cbz	r3, 8009cea <__ascii_mbtowc+0x1e>
 8009cd6:	7813      	ldrb	r3, [r2, #0]
 8009cd8:	600b      	str	r3, [r1, #0]
 8009cda:	7812      	ldrb	r2, [r2, #0]
 8009cdc:	1e10      	subs	r0, r2, #0
 8009cde:	bf18      	it	ne
 8009ce0:	2001      	movne	r0, #1
 8009ce2:	b002      	add	sp, #8
 8009ce4:	4770      	bx	lr
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	e7fb      	b.n	8009ce2 <__ascii_mbtowc+0x16>
 8009cea:	f06f 0001 	mvn.w	r0, #1
 8009cee:	e7f8      	b.n	8009ce2 <__ascii_mbtowc+0x16>

08009cf0 <__ascii_wctomb>:
 8009cf0:	b149      	cbz	r1, 8009d06 <__ascii_wctomb+0x16>
 8009cf2:	2aff      	cmp	r2, #255	; 0xff
 8009cf4:	bf85      	ittet	hi
 8009cf6:	238a      	movhi	r3, #138	; 0x8a
 8009cf8:	6003      	strhi	r3, [r0, #0]
 8009cfa:	700a      	strbls	r2, [r1, #0]
 8009cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d00:	bf98      	it	ls
 8009d02:	2001      	movls	r0, #1
 8009d04:	4770      	bx	lr
 8009d06:	4608      	mov	r0, r1
 8009d08:	4770      	bx	lr
	...

08009d0c <fiprintf>:
 8009d0c:	b40e      	push	{r1, r2, r3}
 8009d0e:	b503      	push	{r0, r1, lr}
 8009d10:	4601      	mov	r1, r0
 8009d12:	ab03      	add	r3, sp, #12
 8009d14:	4805      	ldr	r0, [pc, #20]	; (8009d2c <fiprintf+0x20>)
 8009d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d1a:	6800      	ldr	r0, [r0, #0]
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	f000 f837 	bl	8009d90 <_vfiprintf_r>
 8009d22:	b002      	add	sp, #8
 8009d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d28:	b003      	add	sp, #12
 8009d2a:	4770      	bx	lr
 8009d2c:	20000064 	.word	0x20000064

08009d30 <abort>:
 8009d30:	b508      	push	{r3, lr}
 8009d32:	2006      	movs	r0, #6
 8009d34:	f000 fa04 	bl	800a140 <raise>
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7f7 fd05 	bl	8001748 <_exit>

08009d3e <__sfputc_r>:
 8009d3e:	6893      	ldr	r3, [r2, #8]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	b410      	push	{r4}
 8009d46:	6093      	str	r3, [r2, #8]
 8009d48:	da08      	bge.n	8009d5c <__sfputc_r+0x1e>
 8009d4a:	6994      	ldr	r4, [r2, #24]
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	db01      	blt.n	8009d54 <__sfputc_r+0x16>
 8009d50:	290a      	cmp	r1, #10
 8009d52:	d103      	bne.n	8009d5c <__sfputc_r+0x1e>
 8009d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d58:	f000 b934 	b.w	8009fc4 <__swbuf_r>
 8009d5c:	6813      	ldr	r3, [r2, #0]
 8009d5e:	1c58      	adds	r0, r3, #1
 8009d60:	6010      	str	r0, [r2, #0]
 8009d62:	7019      	strb	r1, [r3, #0]
 8009d64:	4608      	mov	r0, r1
 8009d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <__sfputs_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	4614      	mov	r4, r2
 8009d74:	18d5      	adds	r5, r2, r3
 8009d76:	42ac      	cmp	r4, r5
 8009d78:	d101      	bne.n	8009d7e <__sfputs_r+0x12>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e007      	b.n	8009d8e <__sfputs_r+0x22>
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	463a      	mov	r2, r7
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff ffda 	bl	8009d3e <__sfputc_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d1f3      	bne.n	8009d76 <__sfputs_r+0xa>
 8009d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d90 <_vfiprintf_r>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	460d      	mov	r5, r1
 8009d96:	b09d      	sub	sp, #116	; 0x74
 8009d98:	4614      	mov	r4, r2
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	b118      	cbz	r0, 8009da8 <_vfiprintf_r+0x18>
 8009da0:	6a03      	ldr	r3, [r0, #32]
 8009da2:	b90b      	cbnz	r3, 8009da8 <_vfiprintf_r+0x18>
 8009da4:	f7fe faa2 	bl	80082ec <__sinit>
 8009da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009daa:	07d9      	lsls	r1, r3, #31
 8009dac:	d405      	bmi.n	8009dba <_vfiprintf_r+0x2a>
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	059a      	lsls	r2, r3, #22
 8009db2:	d402      	bmi.n	8009dba <_vfiprintf_r+0x2a>
 8009db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db6:	f7fe fb8f 	bl	80084d8 <__retarget_lock_acquire_recursive>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	d501      	bpl.n	8009dc4 <_vfiprintf_r+0x34>
 8009dc0:	692b      	ldr	r3, [r5, #16]
 8009dc2:	b99b      	cbnz	r3, 8009dec <_vfiprintf_r+0x5c>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f000 f93a 	bl	800a040 <__swsetup_r>
 8009dcc:	b170      	cbz	r0, 8009dec <_vfiprintf_r+0x5c>
 8009dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd0:	07dc      	lsls	r4, r3, #31
 8009dd2:	d504      	bpl.n	8009dde <_vfiprintf_r+0x4e>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b01d      	add	sp, #116	; 0x74
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	0598      	lsls	r0, r3, #22
 8009de2:	d4f7      	bmi.n	8009dd4 <_vfiprintf_r+0x44>
 8009de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de6:	f7fe fb78 	bl	80084da <__retarget_lock_release_recursive>
 8009dea:	e7f3      	b.n	8009dd4 <_vfiprintf_r+0x44>
 8009dec:	2300      	movs	r3, #0
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	2320      	movs	r3, #32
 8009df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfa:	2330      	movs	r3, #48	; 0x30
 8009dfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009fb0 <_vfiprintf_r+0x220>
 8009e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e04:	f04f 0901 	mov.w	r9, #1
 8009e08:	4623      	mov	r3, r4
 8009e0a:	469a      	mov	sl, r3
 8009e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e10:	b10a      	cbz	r2, 8009e16 <_vfiprintf_r+0x86>
 8009e12:	2a25      	cmp	r2, #37	; 0x25
 8009e14:	d1f9      	bne.n	8009e0a <_vfiprintf_r+0x7a>
 8009e16:	ebba 0b04 	subs.w	fp, sl, r4
 8009e1a:	d00b      	beq.n	8009e34 <_vfiprintf_r+0xa4>
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffa2 	bl	8009d6c <__sfputs_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f000 80a9 	beq.w	8009f80 <_vfiprintf_r+0x1f0>
 8009e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e30:	445a      	add	r2, fp
 8009e32:	9209      	str	r2, [sp, #36]	; 0x24
 8009e34:	f89a 3000 	ldrb.w	r3, [sl]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 80a1 	beq.w	8009f80 <_vfiprintf_r+0x1f0>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e48:	f10a 0a01 	add.w	sl, sl, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e54:	931a      	str	r3, [sp, #104]	; 0x68
 8009e56:	4654      	mov	r4, sl
 8009e58:	2205      	movs	r2, #5
 8009e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5e:	4854      	ldr	r0, [pc, #336]	; (8009fb0 <_vfiprintf_r+0x220>)
 8009e60:	f7f6 f9b6 	bl	80001d0 <memchr>
 8009e64:	9a04      	ldr	r2, [sp, #16]
 8009e66:	b9d8      	cbnz	r0, 8009ea0 <_vfiprintf_r+0x110>
 8009e68:	06d1      	lsls	r1, r2, #27
 8009e6a:	bf44      	itt	mi
 8009e6c:	2320      	movmi	r3, #32
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e72:	0713      	lsls	r3, r2, #28
 8009e74:	bf44      	itt	mi
 8009e76:	232b      	movmi	r3, #43	; 0x2b
 8009e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b2a      	cmp	r3, #42	; 0x2a
 8009e82:	d015      	beq.n	8009eb0 <_vfiprintf_r+0x120>
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	4654      	mov	r4, sl
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f04f 0c0a 	mov.w	ip, #10
 8009e8e:	4621      	mov	r1, r4
 8009e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e94:	3b30      	subs	r3, #48	; 0x30
 8009e96:	2b09      	cmp	r3, #9
 8009e98:	d94d      	bls.n	8009f36 <_vfiprintf_r+0x1a6>
 8009e9a:	b1b0      	cbz	r0, 8009eca <_vfiprintf_r+0x13a>
 8009e9c:	9207      	str	r2, [sp, #28]
 8009e9e:	e014      	b.n	8009eca <_vfiprintf_r+0x13a>
 8009ea0:	eba0 0308 	sub.w	r3, r0, r8
 8009ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	46a2      	mov	sl, r4
 8009eae:	e7d2      	b.n	8009e56 <_vfiprintf_r+0xc6>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	1d19      	adds	r1, r3, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	9103      	str	r1, [sp, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfbb      	ittet	lt
 8009ebc:	425b      	neglt	r3, r3
 8009ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec2:	9307      	strge	r3, [sp, #28]
 8009ec4:	9307      	strlt	r3, [sp, #28]
 8009ec6:	bfb8      	it	lt
 8009ec8:	9204      	strlt	r2, [sp, #16]
 8009eca:	7823      	ldrb	r3, [r4, #0]
 8009ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ece:	d10c      	bne.n	8009eea <_vfiprintf_r+0x15a>
 8009ed0:	7863      	ldrb	r3, [r4, #1]
 8009ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed4:	d134      	bne.n	8009f40 <_vfiprintf_r+0x1b0>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d1a      	adds	r2, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9203      	str	r2, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfb8      	it	lt
 8009ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee6:	3402      	adds	r4, #2
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009fc0 <_vfiprintf_r+0x230>
 8009eee:	7821      	ldrb	r1, [r4, #0]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7f6 f96c 	bl	80001d0 <memchr>
 8009ef8:	b138      	cbz	r0, 8009f0a <_vfiprintf_r+0x17a>
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	eba0 000a 	sub.w	r0, r0, sl
 8009f00:	2240      	movs	r2, #64	; 0x40
 8009f02:	4082      	lsls	r2, r0
 8009f04:	4313      	orrs	r3, r2
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4829      	ldr	r0, [pc, #164]	; (8009fb4 <_vfiprintf_r+0x224>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f95b 	bl	80001d0 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d03f      	beq.n	8009f9e <_vfiprintf_r+0x20e>
 8009f1e:	4b26      	ldr	r3, [pc, #152]	; (8009fb8 <_vfiprintf_r+0x228>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_vfiprintf_r+0x1da>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	443b      	add	r3, r7
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	e768      	b.n	8009e08 <_vfiprintf_r+0x78>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a6      	b.n	8009e8e <_vfiprintf_r+0xfe>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	; 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_vfiprintf_r+0x1d0>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c6      	beq.n	8009eea <_vfiprintf_r+0x15a>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c4      	b.n	8009eea <_vfiprintf_r+0x15a>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_vfiprintf_r+0x1bc>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <_vfiprintf_r+0x22c>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7fd fd79 	bl	8007a6c <_printf_float>
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	1c78      	adds	r0, r7, #1
 8009f7e:	d1d6      	bne.n	8009f2e <_vfiprintf_r+0x19e>
 8009f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_vfiprintf_r+0x202>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	059a      	lsls	r2, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_vfiprintf_r+0x202>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f7fe faa4 	bl	80084da <__retarget_lock_release_recursive>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	065b      	lsls	r3, r3, #25
 8009f96:	f53f af1d 	bmi.w	8009dd4 <_vfiprintf_r+0x44>
 8009f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f9c:	e71c      	b.n	8009dd8 <_vfiprintf_r+0x48>
 8009f9e:	ab03      	add	r3, sp, #12
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <_vfiprintf_r+0x22c>)
 8009fa6:	a904      	add	r1, sp, #16
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7fe f803 	bl	8007fb4 <_printf_i>
 8009fae:	e7e4      	b.n	8009f7a <_vfiprintf_r+0x1ea>
 8009fb0:	0800a64b 	.word	0x0800a64b
 8009fb4:	0800a655 	.word	0x0800a655
 8009fb8:	08007a6d 	.word	0x08007a6d
 8009fbc:	08009d6d 	.word	0x08009d6d
 8009fc0:	0800a651 	.word	0x0800a651

08009fc4 <__swbuf_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4605      	mov	r5, r0
 8009fcc:	b118      	cbz	r0, 8009fd6 <__swbuf_r+0x12>
 8009fce:	6a03      	ldr	r3, [r0, #32]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <__swbuf_r+0x12>
 8009fd2:	f7fe f98b 	bl	80082ec <__sinit>
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	071a      	lsls	r2, r3, #28
 8009fde:	d525      	bpl.n	800a02c <__swbuf_r+0x68>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	b31b      	cbz	r3, 800a02c <__swbuf_r+0x68>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	6922      	ldr	r2, [r4, #16]
 8009fe8:	1a98      	subs	r0, r3, r2
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	b2f6      	uxtb	r6, r6
 8009fee:	4283      	cmp	r3, r0
 8009ff0:	4637      	mov	r7, r6
 8009ff2:	dc04      	bgt.n	8009ffe <__swbuf_r+0x3a>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f7ff fdee 	bl	8009bd8 <_fflush_r>
 8009ffc:	b9e0      	cbnz	r0, 800a038 <__swbuf_r+0x74>
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	3b01      	subs	r3, #1
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	701e      	strb	r6, [r3, #0]
 800a00c:	6962      	ldr	r2, [r4, #20]
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	429a      	cmp	r2, r3
 800a012:	d004      	beq.n	800a01e <__swbuf_r+0x5a>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	07db      	lsls	r3, r3, #31
 800a018:	d506      	bpl.n	800a028 <__swbuf_r+0x64>
 800a01a:	2e0a      	cmp	r6, #10
 800a01c:	d104      	bne.n	800a028 <__swbuf_r+0x64>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f7ff fdd9 	bl	8009bd8 <_fflush_r>
 800a026:	b938      	cbnz	r0, 800a038 <__swbuf_r+0x74>
 800a028:	4638      	mov	r0, r7
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f806 	bl	800a040 <__swsetup_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d0d5      	beq.n	8009fe4 <__swbuf_r+0x20>
 800a038:	f04f 37ff 	mov.w	r7, #4294967295
 800a03c:	e7f4      	b.n	800a028 <__swbuf_r+0x64>
	...

0800a040 <__swsetup_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4b2a      	ldr	r3, [pc, #168]	; (800a0ec <__swsetup_r+0xac>)
 800a044:	4605      	mov	r5, r0
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	460c      	mov	r4, r1
 800a04a:	b118      	cbz	r0, 800a054 <__swsetup_r+0x14>
 800a04c:	6a03      	ldr	r3, [r0, #32]
 800a04e:	b90b      	cbnz	r3, 800a054 <__swsetup_r+0x14>
 800a050:	f7fe f94c 	bl	80082ec <__sinit>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a05a:	0718      	lsls	r0, r3, #28
 800a05c:	d422      	bmi.n	800a0a4 <__swsetup_r+0x64>
 800a05e:	06d9      	lsls	r1, r3, #27
 800a060:	d407      	bmi.n	800a072 <__swsetup_r+0x32>
 800a062:	2309      	movs	r3, #9
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a06a:	81a3      	strh	r3, [r4, #12]
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	e034      	b.n	800a0dc <__swsetup_r+0x9c>
 800a072:	0758      	lsls	r0, r3, #29
 800a074:	d512      	bpl.n	800a09c <__swsetup_r+0x5c>
 800a076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a078:	b141      	cbz	r1, 800a08c <__swsetup_r+0x4c>
 800a07a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07e:	4299      	cmp	r1, r3
 800a080:	d002      	beq.n	800a088 <__swsetup_r+0x48>
 800a082:	4628      	mov	r0, r5
 800a084:	f7ff f8a6 	bl	80091d4 <_free_r>
 800a088:	2300      	movs	r3, #0
 800a08a:	6363      	str	r3, [r4, #52]	; 0x34
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	2300      	movs	r3, #0
 800a096:	6063      	str	r3, [r4, #4]
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f043 0308 	orr.w	r3, r3, #8
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	b94b      	cbnz	r3, 800a0bc <__swsetup_r+0x7c>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b2:	d003      	beq.n	800a0bc <__swsetup_r+0x7c>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f000 f884 	bl	800a1c4 <__smakebuf_r>
 800a0bc:	89a0      	ldrh	r0, [r4, #12]
 800a0be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c2:	f010 0301 	ands.w	r3, r0, #1
 800a0c6:	d00a      	beq.n	800a0de <__swsetup_r+0x9e>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60a3      	str	r3, [r4, #8]
 800a0cc:	6963      	ldr	r3, [r4, #20]
 800a0ce:	425b      	negs	r3, r3
 800a0d0:	61a3      	str	r3, [r4, #24]
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	b943      	cbnz	r3, 800a0e8 <__swsetup_r+0xa8>
 800a0d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0da:	d1c4      	bne.n	800a066 <__swsetup_r+0x26>
 800a0dc:	bd38      	pop	{r3, r4, r5, pc}
 800a0de:	0781      	lsls	r1, r0, #30
 800a0e0:	bf58      	it	pl
 800a0e2:	6963      	ldrpl	r3, [r4, #20]
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	e7f4      	b.n	800a0d2 <__swsetup_r+0x92>
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e7f7      	b.n	800a0dc <__swsetup_r+0x9c>
 800a0ec:	20000064 	.word	0x20000064

0800a0f0 <_raise_r>:
 800a0f0:	291f      	cmp	r1, #31
 800a0f2:	b538      	push	{r3, r4, r5, lr}
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	d904      	bls.n	800a104 <_raise_r+0x14>
 800a0fa:	2316      	movs	r3, #22
 800a0fc:	6003      	str	r3, [r0, #0]
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a106:	b112      	cbz	r2, 800a10e <_raise_r+0x1e>
 800a108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a10c:	b94b      	cbnz	r3, 800a122 <_raise_r+0x32>
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 f830 	bl	800a174 <_getpid_r>
 800a114:	462a      	mov	r2, r5
 800a116:	4601      	mov	r1, r0
 800a118:	4620      	mov	r0, r4
 800a11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11e:	f000 b817 	b.w	800a150 <_kill_r>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d00a      	beq.n	800a13c <_raise_r+0x4c>
 800a126:	1c59      	adds	r1, r3, #1
 800a128:	d103      	bne.n	800a132 <_raise_r+0x42>
 800a12a:	2316      	movs	r3, #22
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	2001      	movs	r0, #1
 800a130:	e7e7      	b.n	800a102 <_raise_r+0x12>
 800a132:	2400      	movs	r4, #0
 800a134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a138:	4628      	mov	r0, r5
 800a13a:	4798      	blx	r3
 800a13c:	2000      	movs	r0, #0
 800a13e:	e7e0      	b.n	800a102 <_raise_r+0x12>

0800a140 <raise>:
 800a140:	4b02      	ldr	r3, [pc, #8]	; (800a14c <raise+0xc>)
 800a142:	4601      	mov	r1, r0
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	f7ff bfd3 	b.w	800a0f0 <_raise_r>
 800a14a:	bf00      	nop
 800a14c:	20000064 	.word	0x20000064

0800a150 <_kill_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d07      	ldr	r5, [pc, #28]	; (800a170 <_kill_r+0x20>)
 800a154:	2300      	movs	r3, #0
 800a156:	4604      	mov	r4, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	602b      	str	r3, [r5, #0]
 800a15e:	f7f7 fae3 	bl	8001728 <_kill>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	d102      	bne.n	800a16c <_kill_r+0x1c>
 800a166:	682b      	ldr	r3, [r5, #0]
 800a168:	b103      	cbz	r3, 800a16c <_kill_r+0x1c>
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	bd38      	pop	{r3, r4, r5, pc}
 800a16e:	bf00      	nop
 800a170:	200004f4 	.word	0x200004f4

0800a174 <_getpid_r>:
 800a174:	f7f7 bad0 	b.w	8001718 <_getpid>

0800a178 <__swhatbuf_r>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	460c      	mov	r4, r1
 800a17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a180:	2900      	cmp	r1, #0
 800a182:	b096      	sub	sp, #88	; 0x58
 800a184:	4615      	mov	r5, r2
 800a186:	461e      	mov	r6, r3
 800a188:	da0d      	bge.n	800a1a6 <__swhatbuf_r+0x2e>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a190:	f04f 0100 	mov.w	r1, #0
 800a194:	bf0c      	ite	eq
 800a196:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a19a:	2340      	movne	r3, #64	; 0x40
 800a19c:	2000      	movs	r0, #0
 800a19e:	6031      	str	r1, [r6, #0]
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	b016      	add	sp, #88	; 0x58
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}
 800a1a6:	466a      	mov	r2, sp
 800a1a8:	f000 f848 	bl	800a23c <_fstat_r>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	dbec      	blt.n	800a18a <__swhatbuf_r+0x12>
 800a1b0:	9901      	ldr	r1, [sp, #4]
 800a1b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1ba:	4259      	negs	r1, r3
 800a1bc:	4159      	adcs	r1, r3
 800a1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1c2:	e7eb      	b.n	800a19c <__swhatbuf_r+0x24>

0800a1c4 <__smakebuf_r>:
 800a1c4:	898b      	ldrh	r3, [r1, #12]
 800a1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1c8:	079d      	lsls	r5, r3, #30
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	d507      	bpl.n	800a1e0 <__smakebuf_r+0x1c>
 800a1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	6123      	str	r3, [r4, #16]
 800a1d8:	2301      	movs	r3, #1
 800a1da:	6163      	str	r3, [r4, #20]
 800a1dc:	b002      	add	sp, #8
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	ab01      	add	r3, sp, #4
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f7ff ffc8 	bl	800a178 <__swhatbuf_r>
 800a1e8:	9900      	ldr	r1, [sp, #0]
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7ff f865 	bl	80092bc <_malloc_r>
 800a1f2:	b948      	cbnz	r0, 800a208 <__smakebuf_r+0x44>
 800a1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f8:	059a      	lsls	r2, r3, #22
 800a1fa:	d4ef      	bmi.n	800a1dc <__smakebuf_r+0x18>
 800a1fc:	f023 0303 	bic.w	r3, r3, #3
 800a200:	f043 0302 	orr.w	r3, r3, #2
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	e7e3      	b.n	800a1d0 <__smakebuf_r+0xc>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	9b00      	ldr	r3, [sp, #0]
 800a214:	6163      	str	r3, [r4, #20]
 800a216:	9b01      	ldr	r3, [sp, #4]
 800a218:	6120      	str	r0, [r4, #16]
 800a21a:	b15b      	cbz	r3, 800a234 <__smakebuf_r+0x70>
 800a21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a220:	4630      	mov	r0, r6
 800a222:	f000 f81d 	bl	800a260 <_isatty_r>
 800a226:	b128      	cbz	r0, 800a234 <__smakebuf_r+0x70>
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f023 0303 	bic.w	r3, r3, #3
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	431d      	orrs	r5, r3
 800a238:	81a5      	strh	r5, [r4, #12]
 800a23a:	e7cf      	b.n	800a1dc <__smakebuf_r+0x18>

0800a23c <_fstat_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_fstat_r+0x20>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7f7 facc 	bl	80017e6 <_fstat>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_fstat_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_fstat_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	200004f4 	.word	0x200004f4

0800a260 <_isatty_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d06      	ldr	r5, [pc, #24]	; (800a27c <_isatty_r+0x1c>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7f7 facb 	bl	8001806 <_isatty>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_isatty_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_isatty_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	200004f4 	.word	0x200004f4

0800a280 <_init>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr

0800a28c <_fini>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr
