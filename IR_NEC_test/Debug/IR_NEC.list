
IR_NEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e4  080056e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056ec  080056ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080056f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  0800575c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800575c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c05  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002574  00000000  00000000  00030ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00033258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf4  00000000  00000000  000341c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027eb1  00000000  00000000  00034dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130bb  00000000  00000000  0005cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f40b6  00000000  00000000  0006fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004710  00000000  00000000  00163de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001684f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005640 	.word	0x08005640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005640 	.word	0x08005640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <calc_pulse>:
}pulse_t;

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	if(time<250){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2bf9      	cmp	r3, #249	; 0xf9
 80005a8:	d801      	bhi.n	80005ae <calc_pulse+0x12>
		return PULSE_ERROR;
 80005aa:	2305      	movs	r3, #5
 80005ac:	e021      	b.n	80005f2 <calc_pulse+0x56>
	}
	else if(time<1200){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80005b4:	d201      	bcs.n	80005ba <calc_pulse+0x1e>
		return PULSE_SHORT;
 80005b6:	2304      	movs	r3, #4
 80005b8:	e01b      	b.n	80005f2 <calc_pulse+0x56>
	}
	else if(time<2000){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005c0:	d201      	bcs.n	80005c6 <calc_pulse+0x2a>
		return PULSE_LONG;
 80005c2:	2303      	movs	r3, #3
 80005c4:	e015      	b.n	80005f2 <calc_pulse+0x56>
	}
	else if(time<3000){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d801      	bhi.n	80005d4 <calc_pulse+0x38>
		return PULSE_2MS;
 80005d0:	2302      	movs	r3, #2
 80005d2:	e00e      	b.n	80005f2 <calc_pulse+0x56>
	}
	else if(time<6000){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f241 726f 	movw	r2, #5999	; 0x176f
 80005da:	4293      	cmp	r3, r2
 80005dc:	d801      	bhi.n	80005e2 <calc_pulse+0x46>
		return PULSE_4MS;
 80005de:	2301      	movs	r3, #1
 80005e0:	e007      	b.n	80005f2 <calc_pulse+0x56>
	}
	else if(time<12000){
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f642 62df 	movw	r2, #11999	; 0x2edf
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d801      	bhi.n	80005f0 <calc_pulse+0x54>
		return PULSE_9MS;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e000      	b.n	80005f2 <calc_pulse+0x56>
	}
	else{
		return PULSE_ERROR;
 80005f0:	2305      	movs	r3, #5
	}
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <ir_tim_interrupt>:

void ir_tim_interrupt(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

	pulse_t pulse;

	if(received_bits>=32){
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b1f      	cmp	r3, #31
 800060c:	dc43      	bgt.n	8000696 <ir_tim_interrupt+0x96>
		return;
	}

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 800060e:	2100      	movs	r1, #0
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <ir_tim_interrupt+0xa8>)
 8000612:	f002 ff1b 	bl	800344c <HAL_TIM_ReadCapturedValue>
 8000616:	4603      	mov	r3, r0
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffbf 	bl	800059c <calc_pulse>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]

	switch(pulse){
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	3b01      	subs	r3, #1
 8000626:	2b03      	cmp	r3, #3
 8000628:	d831      	bhi.n	800068e <ir_tim_interrupt+0x8e>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <ir_tim_interrupt+0x30>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000671 	.word	0x08000671
 8000634:	0800067f 	.word	0x0800067f
 8000638:	08000657 	.word	0x08000657
 800063c:	08000641 	.word	0x08000641
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <ir_tim_interrupt+0xac>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	085b      	lsrs	r3, r3, #1
 8000646:	4a19      	ldr	r2, [pc, #100]	; (80006ac <ir_tim_interrupt+0xac>)
 8000648:	6013      	str	r3, [r2, #0]
		received_bits++;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <ir_tim_interrupt+0xa4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000652:	6013      	str	r3, [r2, #0]
		break;
 8000654:	e022      	b.n	800069c <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <ir_tim_interrupt+0xac>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <ir_tim_interrupt+0xac>)
 8000662:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <ir_tim_interrupt+0xa4>)
 800066c:	6013      	str	r3, [r2, #0]
		break;
 800066e:	e015      	b.n	800069c <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <ir_tim_interrupt+0xac>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
		break;
 800067c:	e00e      	b.n	800069c <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if(received_bits==0){
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d109      	bne.n	800069a <ir_tim_interrupt+0x9a>
			received_bits = 32;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000688:	2220      	movs	r2, #32
 800068a:	601a      	str	r2, [r3, #0]
		}
		break;
 800068c:	e005      	b.n	800069a <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <ir_tim_interrupt+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
		break;
 8000694:	e002      	b.n	800069c <ir_tim_interrupt+0x9c>
		return;
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <ir_tim_interrupt+0x9c>
		break;
 800069a:	bf00      	nop
	}

}
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000088 	.word	0x20000088
 80006a8:	20000090 	.word	0x20000090
 80006ac:	20000084 	.word	0x20000084

080006b0 <ir_init>:

void ir_init(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <ir_init+0x18>)
 80006b6:	f002 fa0b 	bl	8002ad0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <ir_init+0x18>)
 80006be:	f002 fad1 	bl	8002c64 <HAL_TIM_IC_Start_IT>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000090 	.word	0x20000090

080006cc <ir_read>:


int ir_read(void){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
	if(received_bits !=32){
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <ir_read+0x30>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b20      	cmp	r3, #32
 80006d8:	d002      	beq.n	80006e0 <ir_read+0x14>
		return -1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	e007      	b.n	80006f0 <ir_read+0x24>
	}
	uint8_t value = received_value >> 16;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <ir_read+0x34>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	0c1b      	lsrs	r3, r3, #16
 80006e6:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <ir_read+0x30>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	return value;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000088 	.word	0x20000088
 8000700:	20000084 	.word	0x20000084

08000704 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(ch=='\n'){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b0a      	cmp	r3, #10
 8000710:	d102      	bne.n	8000718 <__io_putchar+0x14>
		__io_putchar('\r');
 8000712:	200d      	movs	r0, #13
 8000714:	f7ff fff6 	bl	8000704 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2201      	movs	r2, #1
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <__io_putchar+0x2c>)
 8000722:	f003 fb11 	bl	8003d48 <HAL_UART_Transmit>
	return 1;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000dc 	.word	0x200000dc

08000734 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	if(htim==&htim2){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d109      	bne.n	8000758 <HAL_TIM_IC_CaptureCallback+0x24>

		switch(HAL_TIM_GetActiveChannel(&htim2)){
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000746:	f002 feed 	bl	8003524 <HAL_TIM_GetActiveChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d102      	bne.n	8000756 <HAL_TIM_IC_CaptureCallback+0x22>

		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 8000750:	f7ff ff56 	bl	8000600 <ir_tim_interrupt>
			break;
 8000754:	e000      	b.n	8000758 <HAL_TIM_IC_CaptureCallback+0x24>
		default:
			break;
 8000756:	bf00      	nop
		}
	}
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000090 	.word	0x20000090

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fb08 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f817 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f7ff fefb 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000776:	f000 fa4d 	bl	8000c14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800077a:	f000 f977 	bl	8000a6c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ir_init();
 800077e:	f7ff ff97 	bl	80006b0 <ir_init>

  while (1)
  {
	  int value = ir_read();
 8000782:	f7ff ffa3 	bl	80006cc <ir_read>
 8000786:	6078      	str	r0, [r7, #4]
	  if(value != -1){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078e:	d0f8      	beq.n	8000782 <main+0x1e>
		  printf("code = %02x\n", value);
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <main+0x38>)
 8000794:	f004 f8e0 	bl	8004958 <iprintf>
  {
 8000798:	e7f3      	b.n	8000782 <main+0x1e>
 800079a:	bf00      	nop
 800079c:	08005658 	.word	0x08005658

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2244      	movs	r2, #68	; 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f927 	bl	8004a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c6:	f000 fe19 	bl	80013fc <HAL_PWREx_ControlVoltageScaling>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d0:	f000 f838 	bl	8000844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d4:	2310      	movs	r3, #16
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007e8:	2301      	movs	r3, #1
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fe4f 	bl	80014a8 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000810:	f000 f818 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fa17 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000838:	f000 f804 	bl	8000844 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 faa0 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <TIM2_IRQHandler+0x10>)
 80008f2:	f002 fb01 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000090 	.word	0x20000090

08000900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000912:	f3af 8000 	nop.w
 8000916:	4601      	mov	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
  }

  return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e009      	b.n	8000960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fed5 	bl	8000704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf1      	blt.n	800094c <_write+0x12>
  }
  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_close>:

int _close(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099a:	605a      	str	r2, [r3, #4]
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_isatty>:

int _isatty(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f004 f848 	bl	8004aa0 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20018000 	.word	0x20018000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	200002b8 	.word	0x200002b8

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000ab2:	224f      	movs	r2, #79	; 0x4f
 8000ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000ad2:	f001 ffa5 	bl	8002a20 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000adc:	f7ff feb2 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aea:	4619      	mov	r1, r3
 8000aec:	4824      	ldr	r0, [pc, #144]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000aee:	f002 fba1 	bl	8003234 <HAL_TIM_ConfigClockSource>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000af8:	f7ff fea4 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000afc:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000afe:	f002 f84f 	bl	8002ba0 <HAL_TIM_IC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b08:	f7ff fe9c 	bl	8000844 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000b10:	2340      	movs	r3, #64	; 0x40
 8000b12:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4817      	ldr	r0, [pc, #92]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000b24:	f002 fc4f 	bl	80033c6 <HAL_TIM_SlaveConfigSynchro>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000b2e:	f7ff fe89 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000b42:	f003 f80d 	bl	8003b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000b4c:	f7ff fe7a 	bl	8000844 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b50:	2302      	movs	r3, #2
 8000b52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM2_Init+0x114>)
 8000b68:	f002 fac8 	bl	80030fc <HAL_TIM_IC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000b72:	f7ff fe67 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	; 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d130      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_TIM_Base_MspInit+0x8c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fa4a 	bl	800108c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	201c      	movs	r0, #28
 8000bfe:	f000 fa0e 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c02:	201c      	movs	r0, #28
 8000c04:	f000 fa27 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000

08000c14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART2_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c58:	f003 f828 	bl	8003cac <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f7ff fdef 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000dc 	.word	0x200000dc
 8000c70:	40004400 	.word	0x40004400

08000c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ac      	sub	sp, #176	; 0xb0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2288      	movs	r2, #136	; 0x88
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 feb4 	bl	8004a02 <memset>
  if(uartHandle->Instance==USART2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <HAL_UART_MspInit+0xb0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d13b      	bne.n	8000d1c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 f9f9 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff fdc2 	bl	8000844 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0xb4>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 f9b8 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	37b0      	adds	r7, #176	; 0xb0
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40021000 	.word	0x40021000

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff fe8a 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f003 fea7 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff fd01 	bl	8000764 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d70:	080056f4 	.word	0x080056f4
  ldr r2, =_sbss
 8000d74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d78:	200002b4 	.word	0x200002b4

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>

08000d7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f93d 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f80e 	bl	8000db0 <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e001      	b.n	8000da4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da0:	f7ff fd56 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f949 	bl	8001072 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f913 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000164 	.word	0x20000164

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000164 	.word	0x20000164

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e17f      	b.n	800139c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8171 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d118      	bne.n	800116c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80ac 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_GPIO_Init+0x330>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_GPIO_Init+0x330>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	; 0x60
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_GPIO_Init+0x330>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001256:	4a5a      	ldr	r2, [pc, #360]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x242>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x338>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_GPIO_Init+0x33c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_GPIO_Init+0x340>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x344>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <HAL_GPIO_Init+0x348>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <HAL_GPIO_Init+0x34c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x22a>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ce:	2300      	movs	r3, #0
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e0:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_GPIO_Init+0x334>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_GPIO_Init+0x350>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_GPIO_Init+0x350>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_GPIO_Init+0x350>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x350>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001390:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f ae78 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	48001000 	.word	0x48001000
 80013d4:	48001400 	.word	0x48001400
 80013d8:	48001800 	.word	0x48001800
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000

080013fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140a:	d130      	bne.n	800146e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001418:	d038      	beq.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2232      	movs	r2, #50	; 0x32
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001440:	e002      	b.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b01      	subs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001454:	d102      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f2      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d110      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e00f      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d007      	beq.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e3ca      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ba:	4b97      	ldr	r3, [pc, #604]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c4:	4b94      	ldr	r3, [pc, #592]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80e4 	beq.w	80016a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4a>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	f040 808b 	bne.w	8001600 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f040 8087 	bne.w	8001600 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x62>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e3a2      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4b82      	ldr	r3, [pc, #520]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <HAL_RCC_OscConfig+0x7c>
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001522:	e005      	b.n	8001530 <HAL_RCC_OscConfig+0x88>
 8001524:	4b7c      	ldr	r3, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001530:	4293      	cmp	r3, r2
 8001532:	d223      	bcs.n	800157c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fd55 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e383      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b73      	ldr	r3, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a72      	ldr	r2, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b70      	ldr	r3, [pc, #448]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	496d      	ldr	r1, [pc, #436]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4968      	ldr	r1, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e025      	b.n	80015c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4960      	ldr	r1, [pc, #384]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	495b      	ldr	r1, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd15 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e343      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c8:	f000 fc4a 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b52      	ldr	r3, [pc, #328]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4950      	ldr	r1, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <HAL_RCC_OscConfig+0x278>)
 80015e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e8:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fbdf 	bl	8000db0 <HAL_InitTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d052      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	e327      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d032      	beq.n	800166e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001614:	f7ff fc1c 	bl	8000e50 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161c:	f7ff fc18 	bl	8000e50 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e310      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4931      	ldr	r1, [pc, #196]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	492c      	ldr	r1, [pc, #176]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e01a      	b.n	80016a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800167a:	f7ff fbe9 	bl	8000e50 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001682:	f7ff fbe5 	bl	8000e50 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e2dd      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x1da>
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d074      	beq.n	800179a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x21a>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d10e      	bne.n	80016da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d10b      	bne.n	80016da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d064      	beq.n	8001798 <HAL_RCC_OscConfig+0x2f0>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d160      	bne.n	8001798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e2ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x24a>
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e026      	b.n	8001740 <HAL_RCC_OscConfig+0x298>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fa:	d115      	bne.n	8001728 <HAL_RCC_OscConfig+0x280>
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a05      	ldr	r2, [pc, #20]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a02      	ldr	r2, [pc, #8]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x298>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	08005668 	.word	0x08005668
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a9f      	ldr	r2, [pc, #636]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b9d      	ldr	r3, [pc, #628]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9c      	ldr	r2, [pc, #624]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fb82 	bl	8000e50 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fb7e 	bl	8000e50 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e276      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x2a8>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fb6e 	bl	8000e50 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb6a 	bl	8000e50 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e262      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x2d0>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d060      	beq.n	8001868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x310>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d116      	bne.n	80017e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b8:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x328>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e23f      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	4973      	ldr	r1, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	e040      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d023      	beq.n	8001836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ee:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6e      	ldr	r2, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb29 	bl	8000e50 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fb25 	bl	8000e50 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e21d      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001814:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b62      	ldr	r3, [pc, #392]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	495f      	ldr	r1, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	e018      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5c      	ldr	r2, [pc, #368]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800183c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fb05 	bl	8000e50 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fb01 	bl	8000e50 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1f9      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03c      	beq.n	80018ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fae0 	bl	8000e50 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fadc 	bl	8000e50 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1d4      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ef      	beq.n	8001894 <HAL_RCC_OscConfig+0x3ec>
 80018b4:	e01b      	b.n	80018ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80018b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018bc:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fac3 	bl	8000e50 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fabf 	bl	8000e50 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1b7      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ef      	bne.n	80018ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a6 	beq.w	8001a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x508>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d118      	bne.n	8001966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_RCC_OscConfig+0x508>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x508>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001940:	f7ff fa86 	bl	8000e50 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001948:	f7ff fa82 	bl	8000e50 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e17a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x508>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x4d8>
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197e:	e029      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d115      	bne.n	80019b4 <HAL_RCC_OscConfig+0x50c>
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40007000 	.word	0x40007000
 80019b4:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a9b      	ldr	r2, [pc, #620]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	4a97      	ldr	r2, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d016      	beq.n	8001a0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff fa38 	bl	8000e50 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff fa34 	bl	8000e50 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e12a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ed      	beq.n	80019e4 <HAL_RCC_OscConfig+0x53c>
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa21 	bl	8000e50 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa1d 	bl	8000e50 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e113      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ed      	bne.n	8001a12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a36:	7ffb      	ldrb	r3, [r7, #31]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80fe 	beq.w	8001c4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	f040 80d0 	bne.w	8001bfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a5c:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d130      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d127      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a9c:	2a07      	cmp	r2, #7
 8001a9e:	bf14      	ite	ne
 8001aa0:	2201      	movne	r2, #1
 8001aa2:	2200      	moveq	r2, #0
 8001aa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d113      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d06e      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d069      	beq.n	8001bac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0ad      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b00:	f7ff f9a6 	bl	8000e50 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f9a2 	bl	8000e50 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x784>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b36:	3a01      	subs	r2, #1
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b48:	0852      	lsrs	r2, r2, #1
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	0552      	lsls	r2, r2, #21
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
 8001b58:	0652      	lsls	r2, r2, #25
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b60:	0912      	lsrs	r2, r2, #4
 8001b62:	0452      	lsls	r2, r2, #17
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4930      	ldr	r1, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7ff f964 	bl	8000e50 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f960 	bl	8000e50 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001baa:	e050      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04f      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d148      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd4:	f7ff f93c 	bl	8000e50 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f938 	bl	8000e50 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e030      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x734>
 8001bfa:	e028      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d023      	beq.n	8001c4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f91f 	bl	8000e50 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	e00c      	b.n	8001c30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f91b 	bl	8000e50 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d905      	bls.n	8001c30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ec      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4905      	ldr	r1, [pc, #20]	; (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x7b4>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e001      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	feeefffc 	.word	0xfeeefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0e7      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4970      	ldr	r1, [pc, #448]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cf      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d908      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4960      	ldr	r1, [pc, #384]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d04c      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0a6      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e09a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e086      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4943      	ldr	r1, [pc, #268]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7ff f882 	bl	8000e50 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f87e 	bl	8000e50 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e06e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d208      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	492b      	ldr	r1, [pc, #172]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d210      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	4923      	ldr	r1, [pc, #140]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e036      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4918      	ldr	r1, [pc, #96]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e14:	f000 f824 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	490b      	ldr	r1, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1fc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ffb9 	bl	8000db0 <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08005668 	.word	0x08005668
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d121      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11e      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e004      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d134      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xac>
 8001f04:	e005      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f08:	617b      	str	r3, [r7, #20]
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0e:	617b      	str	r3, [r7, #20]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	617b      	str	r3, [r7, #20]
      break;
 8001f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0e5b      	lsrs	r3, r3, #25
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f58:	69bb      	ldr	r3, [r7, #24]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08005680 	.word	0x08005680
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08005678 	.word	0x08005678

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc0:	f7ff ffda 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4904      	ldr	r1, [pc, #16]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08005678 	.word	0x08005678

08001fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002000:	f7ff f9ee 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002004:	6178      	str	r0, [r7, #20]
 8002006:	e014      	b.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002020:	f7ff f9de 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d10b      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d919      	bls.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2ba0      	cmp	r3, #160	; 0xa0
 8002044:	d902      	bls.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002046:	2302      	movs	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e013      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800204c:	2301      	movs	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e010      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d902      	bls.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e00a      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d102      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002064:	2302      	movs	r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e004      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b70      	cmp	r3, #112	; 0x70
 800206e:	d101      	bne.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4909      	ldr	r1, [pc, #36]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b4:	2300      	movs	r3, #0
 80020b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d041      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020cc:	d02a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020d2:	d824      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020de:	d81e      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020ea:	e018      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020ec:	4b86      	ldr	r3, [pc, #536]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a85      	ldr	r2, [pc, #532]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e015      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fabb 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210a:	e00c      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fba6 	bl	8002864 <RCCEx_PLLSAI2_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	74fb      	strb	r3, [r7, #19]
      break;
 8002122:	e000      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213a:	4973      	ldr	r1, [pc, #460]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002142:	e001      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d041      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800215c:	d02a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800215e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002162:	d824      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002168:	d008      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800216e:	d81e      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d010      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800217a:	e018      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800217c:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a61      	ldr	r2, [pc, #388]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002188:	e015      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fa73 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800219a:	e00c      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3320      	adds	r3, #32
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb5e 	bl	8002864 <RCCEx_PLLSAI2_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ac:	e003      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	74fb      	strb	r3, [r7, #19]
      break;
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ca:	494f      	ldr	r1, [pc, #316]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021d2:	e001      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a0 	beq.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002228:	f7fe fe12 	bl	8000e50 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800222e:	e009      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fe0e 	bl	8000e50 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	74fb      	strb	r3, [r7, #19]
        break;
 8002242:	e005      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d15c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d019      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fdcd 	bl	8000e50 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b8:	e00b      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fdc9 	bl	8000e50 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	74fb      	strb	r3, [r7, #19]
            break;
 80022d0:	e006      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ec      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002314:	7c7b      	ldrb	r3, [r7, #17]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	4a9d      	ldr	r2, [pc, #628]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002332:	4b98      	ldr	r3, [pc, #608]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	4994      	ldr	r1, [pc, #592]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 020c 	bic.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	498c      	ldr	r1, [pc, #560]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4983      	ldr	r1, [pc, #524]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	497b      	ldr	r1, [pc, #492]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	4972      	ldr	r1, [pc, #456]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	496a      	ldr	r1, [pc, #424]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	4961      	ldr	r1, [pc, #388]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002420:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4959      	ldr	r1, [pc, #356]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	4950      	ldr	r1, [pc, #320]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	4948      	ldr	r1, [pc, #288]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	493f      	ldr	r1, [pc, #252]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d028      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b6:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e011      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024de:	d10c      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f8c8 	bl	800267c <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	491f      	ldr	r1, [pc, #124]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002524:	d106      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e011      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800253c:	d10c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f899 	bl	800267c <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02b      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002582:	d109      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a02      	ldr	r2, [pc, #8]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258e:	60d3      	str	r3, [r2, #12]
 8002590:	e014      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f867 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02f      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d6:	4928      	ldr	r1, [pc, #160]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e6:	d10d      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f844 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3320      	adds	r3, #32
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f925 	bl	8002864 <RCCEx_PLLSAI2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800266e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268a:	4b75      	ldr	r3, [pc, #468]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10d      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
       ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
       ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d047      	beq.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e044      	b.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d018      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x86>
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d825      	bhi.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x62>
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d009      	beq.n	80026f0 <RCCEx_PLLSAI1_Config+0x74>
 80026dc:	e020      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e01a      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e013      	b.n	800272a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002702:	4b57      	ldr	r3, [pc, #348]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271e:	e006      	b.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e004      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002736:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	430b      	orrs	r3, r1
 800274c:	4944      	ldr	r1, [pc, #272]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d17d      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fb74 	bl	8000e50 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276a:	e009      	b.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276c:	f7fe fb70 	bl	8000e50 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d902      	bls.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
        break;
 800277e:	e005      	b.n	800278c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ef      	bne.n	800276c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d160      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	0211      	lsls	r1, r2, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	0912      	lsrs	r2, r2, #4
 80027b0:	0452      	lsls	r2, r2, #17
 80027b2:	430a      	orrs	r2, r1
 80027b4:	492a      	ldr	r1, [pc, #168]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
 80027ba:	e027      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d112      	bne.n	80027e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6912      	ldr	r2, [r2, #16]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0552      	lsls	r2, r2, #21
 80027de:	430a      	orrs	r2, r1
 80027e0:	491f      	ldr	r1, [pc, #124]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]
 80027e6:	e011      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6952      	ldr	r2, [r2, #20]
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0652      	lsls	r2, r2, #25
 8002804:	430a      	orrs	r2, r1
 8002806:	4916      	ldr	r1, [pc, #88]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fb1a 	bl	8000e50 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002820:	f7fe fb16 	bl	8000e50 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ef      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
       ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
       ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d047      	beq.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e044      	b.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d018      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x86>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d825      	bhi.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0x62>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d009      	beq.n	80028d8 <RCCEx_PLLSAI2_Config+0x74>
 80028c4:	e020      	b.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11d      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d6:	e01a      	b.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e013      	b.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002906:	e006      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e004      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002916:	bf00      	nop
    }

    if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	430b      	orrs	r3, r1
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d167      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe fa80 	bl	8000e50 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002954:	f7fe fa7c 	bl	8000e50 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
        break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d14a      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d111      	bne.n	80029a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	0912      	lsrs	r2, r2, #4
 8002998:	0452      	lsls	r2, r2, #17
 800299a:	430a      	orrs	r2, r1
 800299c:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	614b      	str	r3, [r1, #20]
 80029a2:	e011      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6912      	ldr	r2, [r2, #16]
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0652      	lsls	r2, r2, #25
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4916      	ldr	r1, [pc, #88]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fa3c 	bl	8000e50 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029da:	e009      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029dc:	f7fe fa38 	bl	8000e50 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
          break;
 80029ee:	e005      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4904      	ldr	r1, [pc, #16]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e049      	b.n	8002ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f89c 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fd6c 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d001      	beq.n	8002ae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e047      	b.n	8002b78 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_TIM_Base_Start+0xb4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01d      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d018      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_TIM_Base_Start+0xb8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_TIM_Base_Start+0xbc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_TIM_Base_Start+0xc0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_TIM_Base_Start+0xc4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_Base_Start+0x66>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <HAL_TIM_Base_Start+0xc8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d115      	bne.n	8002b62 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_TIM_Base_Start+0xcc>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d015      	beq.n	8002b74 <HAL_TIM_Base_Start+0xa4>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d011      	beq.n	8002b74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	e008      	b.n	8002b74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e000      	b.n	8002b76 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40013400 	.word	0x40013400
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	00010007 	.word	0x00010007

08002ba0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e049      	b.n	8002c46 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f841 	bl	8002c4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 fcac 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_IC_Start_IT+0x1e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e023      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start_IT+0x2e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	e01b      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_IC_Start_IT+0x3e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_IC_Start_IT+0x4e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_IC_Start_IT+0x5e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_TIM_IC_Start_IT+0x78>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e013      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d104      	bne.n	8002cec <HAL_TIM_IC_Start_IT+0x88>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e00b      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d104      	bne.n	8002cfc <HAL_TIM_IC_Start_IT+0x98>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e003      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d06:	7bbb      	ldrb	r3, [r7, #14]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d0c:	7b7b      	ldrb	r3, [r7, #13]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0dd      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_TIM_IC_Start_IT+0xc2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	e023      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d104      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0xd2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d34:	e01b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0xe2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0xf2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0x102>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_IC_Start_IT+0x11a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	e013      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d104      	bne.n	8002d8e <HAL_TIM_IC_Start_IT+0x12a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	e00b      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_IC_Start_IT+0x13a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d9c:	e003      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d841      	bhi.n	8002e30 <HAL_TIM_IC_Start_IT+0x1cc>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_TIM_IC_Start_IT+0x150>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002e31 	.word	0x08002e31
 8002dbc:	08002e31 	.word	0x08002e31
 8002dc0:	08002e31 	.word	0x08002e31
 8002dc4:	08002dfb 	.word	0x08002dfb
 8002dc8:	08002e31 	.word	0x08002e31
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002e31 	.word	0x08002e31
 8002dd4:	08002e0d 	.word	0x08002e0d
 8002dd8:	08002e31 	.word	0x08002e31
 8002ddc:	08002e31 	.word	0x08002e31
 8002de0:	08002e31 	.word	0x08002e31
 8002de4:	08002e1f 	.word	0x08002e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0202 	orr.w	r2, r2, #2
 8002df6:	60da      	str	r2, [r3, #12]
      break;
 8002df8:	e01d      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0204 	orr.w	r2, r2, #4
 8002e08:	60da      	str	r2, [r3, #12]
      break;
 8002e0a:	e014      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	60da      	str	r2, [r3, #12]
      break;
 8002e1c:	e00b      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0210 	orr.w	r2, r2, #16
 8002e2c:	60da      	str	r2, [r3, #12]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d149      	bne.n	8002ed0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fe65 	bl	8003b14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_TIM_IC_Start_IT+0x278>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d01d      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d018      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_TIM_IC_Start_IT+0x27c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_TIM_IC_Start_IT+0x280>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_TIM_IC_Start_IT+0x284>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_TIM_IC_Start_IT+0x288>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_IC_Start_IT+0x22c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_TIM_IC_Start_IT+0x28c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d115      	bne.n	8002ebc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_TIM_IC_Start_IT+0x290>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d015      	beq.n	8002ece <HAL_TIM_IC_Start_IT+0x26a>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d011      	beq.n	8002ece <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	e008      	b.n	8002ece <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e000      	b.n	8002ed0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ece:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40013400 	.word	0x40013400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	00010007 	.word	0x00010007

08002ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0202 	mvn.w	r2, #2
 8002f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fbf6 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 facc 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fad3 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0204 	mvn.w	r2, #4
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fbd0 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 faa6 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 faad 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0208 	mvn.w	r2, #8
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fbaa 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa80 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fa87 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d020      	beq.n	8003040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2208      	movs	r2, #8
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fb84 	bl	8000734 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa5a 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa61 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa38 	bl	80034d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fdfe 	bl	8003c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fdf6 	bl	8003c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa20 	bl	8003510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0220 	mvn.w	r2, #32
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fdbe 	bl	8003c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e088      	b.n	800322c <HAL_TIM_IC_ConfigChannel+0x130>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003138:	f000 fb2e 	bl	8003798 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 020c 	bic.w	r2, r2, #12
 800314a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
 800315e:	e060      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d11c      	bne.n	80031a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003176:	f000 fbac 	bl	80038d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003188:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6999      	ldr	r1, [r3, #24]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	021a      	lsls	r2, r3, #8
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
 800319e:	e040      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11b      	bne.n	80031de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031b6:	f000 fbf9 	bl	80039ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 020c 	bic.w	r2, r2, #12
 80031c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
 80031dc:	e021      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d11c      	bne.n	800321e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031f4:	f000 fc16 	bl	8003a24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003206:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69d9      	ldr	r1, [r3, #28]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021a      	lsls	r2, r3, #8
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
 800321c:	e001      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_TIM_ConfigClockSource+0x1c>
 800324c:	2302      	movs	r3, #2
 800324e:	e0b6      	b.n	80033be <HAL_TIM_ConfigClockSource+0x18a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328c:	d03e      	beq.n	800330c <HAL_TIM_ConfigClockSource+0xd8>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003292:	f200 8087 	bhi.w	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	f000 8086 	beq.w	80033aa <HAL_TIM_ConfigClockSource+0x176>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d87f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032a4:	2b70      	cmp	r3, #112	; 0x70
 80032a6:	d01a      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xaa>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d87b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032ac:	2b60      	cmp	r3, #96	; 0x60
 80032ae:	d050      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x11e>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d877      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032b4:	2b50      	cmp	r3, #80	; 0x50
 80032b6:	d03c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xfe>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d873      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d058      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x13e>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d86f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032c4:	2b30      	cmp	r3, #48	; 0x30
 80032c6:	d064      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15e>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d86b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d060      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15e>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d867      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15e>
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d05a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15e>
 80032dc:	e062      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ee:	f000 fbf1 	bl	8003ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
      break;
 800330a:	e04f      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331c:	f000 fbda 	bl	8003ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332e:	609a      	str	r2, [r3, #8]
      break;
 8003330:	e03c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fa98 	bl	8003874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2150      	movs	r1, #80	; 0x50
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fba7 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003350:	e02c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	461a      	mov	r2, r3
 8003360:	f000 faf4 	bl	800394c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2160      	movs	r1, #96	; 0x60
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb97 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003370:	e01c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	461a      	mov	r2, r3
 8003380:	f000 fa78 	bl	8003874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fb87 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003390:	e00c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 fb7e 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80033a2:	e003      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_SlaveConfigSynchro+0x18>
 80033da:	2302      	movs	r3, #2
 80033dc:	e031      	b.n	8003442 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f93d 	bl	8003670 <TIM_SlaveTimer_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e018      	b.n	8003442 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800342e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d831      	bhi.n	80034c4 <HAL_TIM_ReadCapturedValue+0x78>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034c5 	.word	0x080034c5
 8003470:	080034c5 	.word	0x080034c5
 8003474:	080034c5 	.word	0x080034c5
 8003478:	080034a7 	.word	0x080034a7
 800347c:	080034c5 	.word	0x080034c5
 8003480:	080034c5 	.word	0x080034c5
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034c5 	.word	0x080034c5
 8003490:	080034c5 	.word	0x080034c5
 8003494:	080034c5 	.word	0x080034c5
 8003498:	080034bb 	.word	0x080034bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	60fb      	str	r3, [r7, #12]

      break;
 80034a4:	e00f      	b.n	80034c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	60fb      	str	r3, [r7, #12]

      break;
 80034ae:	e00a      	b.n	80034c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	60fb      	str	r3, [r7, #12]

      break;
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	60fb      	str	r3, [r7, #12]

      break;
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034c4:	bf00      	nop
  }

  return tmpreg;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f1b      	ldrb	r3, [r3, #28]
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a40      	ldr	r2, [pc, #256]	; (8003650 <TIM_Base_SetConfig+0x114>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d00f      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <TIM_Base_SetConfig+0x118>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00b      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3c      	ldr	r2, [pc, #240]	; (8003658 <TIM_Base_SetConfig+0x11c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3b      	ldr	r2, [pc, #236]	; (800365c <TIM_Base_SetConfig+0x120>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3a      	ldr	r2, [pc, #232]	; (8003660 <TIM_Base_SetConfig+0x124>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2f      	ldr	r2, [pc, #188]	; (8003650 <TIM_Base_SetConfig+0x114>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <TIM_Base_SetConfig+0x118>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <TIM_Base_SetConfig+0x11c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2a      	ldr	r2, [pc, #168]	; (800365c <TIM_Base_SetConfig+0x120>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a29      	ldr	r2, [pc, #164]	; (8003660 <TIM_Base_SetConfig+0x124>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a28      	ldr	r2, [pc, #160]	; (8003664 <TIM_Base_SetConfig+0x128>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <TIM_Base_SetConfig+0x12c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a26      	ldr	r2, [pc, #152]	; (800366c <TIM_Base_SetConfig+0x130>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <TIM_Base_SetConfig+0x128>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <TIM_Base_SetConfig+0x12c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0f      	ldr	r2, [pc, #60]	; (800366c <TIM_Base_SetConfig+0x130>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40013400 	.word	0x40013400
 8003664:	40014000 	.word	0x40014000
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800

08003670 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b70      	cmp	r3, #112	; 0x70
 80036bc:	d01a      	beq.n	80036f4 <TIM_SlaveTimer_SetConfig+0x84>
 80036be:	2b70      	cmp	r3, #112	; 0x70
 80036c0:	d860      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036c2:	2b60      	cmp	r3, #96	; 0x60
 80036c4:	d054      	beq.n	8003770 <TIM_SlaveTimer_SetConfig+0x100>
 80036c6:	2b60      	cmp	r3, #96	; 0x60
 80036c8:	d85c      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036ca:	2b50      	cmp	r3, #80	; 0x50
 80036cc:	d046      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0xec>
 80036ce:	2b50      	cmp	r3, #80	; 0x50
 80036d0:	d858      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d019      	beq.n	800370a <TIM_SlaveTimer_SetConfig+0x9a>
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d854      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d055      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x11a>
 80036de:	2b30      	cmp	r3, #48	; 0x30
 80036e0:	d850      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d051      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x11a>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d84c      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04d      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x11a>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d04b      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x11a>
 80036f2:	e047      	b.n	8003784 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003704:	f000 f9e6 	bl	8003ad4 <TIM_ETR_SetConfig>
      break;
 8003708:	e040      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b05      	cmp	r3, #5
 8003710:	d101      	bne.n	8003716 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e03b      	b.n	800378e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
      break;
 800375a:	e017      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003768:	461a      	mov	r2, r3
 800376a:	f000 f883 	bl	8003874 <TIM_TI1_ConfigInputStage>
      break;
 800376e:	e00d      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f8e5 	bl	800394c <TIM_TI2_ConfigInputStage>
      break;
 8003782:	e003      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	e000      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800378a:	bf00      	nop
  }

  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f023 0201 	bic.w	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_TI1_SetConfig+0xc4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d017      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d013      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <TIM_TI1_SetConfig+0xc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <TIM_TI1_SetConfig+0xcc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <TIM_TI1_SetConfig+0xd0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a20      	ldr	r2, [pc, #128]	; (800386c <TIM_TI1_SetConfig+0xd4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_TI1_SetConfig+0x5e>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <TIM_TI1_SetConfig+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <TIM_TI1_SetConfig+0x62>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <TIM_TI1_SetConfig+0x64>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e003      	b.n	800381a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	b2db      	uxtb	r3, r3
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f023 030a 	bic.w	r3, r3, #10
 8003834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 030a 	and.w	r3, r3, #10
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40013400 	.word	0x40013400
 8003870:	40014000 	.word	0x40014000

08003874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 030a 	bic.w	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0210 	bic.w	r2, r3, #16
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	031b      	lsls	r3, r3, #12
 8003916:	b29b      	uxth	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003924:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0210 	bic.w	r2, r3, #16
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	031b      	lsls	r3, r3, #12
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003988:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f023 0303 	bic.w	r3, r3, #3
 80039d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	031b      	lsls	r3, r3, #12
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	031b      	lsls	r3, r3, #12
 8003a7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f043 0307 	orr.w	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e068      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d108      	bne.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d018      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40014000 	.word	0x40014000

08003c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e040      	b.n	8003d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc ffd0 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fb6a 	bl	80043cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8af 	bl	8003e5c <UART_SetConfig>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e01b      	b.n	8003d40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fbe9 	bl	8004510 <UART_CheckIdleState>
 8003d3e:	4603      	mov	r3, r0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d178      	bne.n	8003e52 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Transmit+0x24>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e071      	b.n	8003e54 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2221      	movs	r2, #33	; 0x21
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7e:	f7fd f867 	bl	8000e50 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d108      	bne.n	8003db0 <HAL_UART_Transmit+0x68>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e003      	b.n	8003db8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003db8:	e030      	b.n	8003e1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc4b 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e03c      	b.n	8003e54 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	881a      	ldrh	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dec:	b292      	uxth	r2, r2
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	3302      	adds	r3, #2
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e008      	b.n	8003e0a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	b292      	uxth	r2, r2
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3301      	adds	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1c8      	bne.n	8003dba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2140      	movs	r1, #64	; 0x40
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fc14 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e005      	b.n	8003e54 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b08a      	sub	sp, #40	; 0x28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4ba4      	ldr	r3, [pc, #656]	; (800411c <UART_SetConfig+0x2c0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a99      	ldr	r2, [pc, #612]	; (8004120 <UART_SetConfig+0x2c4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a90      	ldr	r2, [pc, #576]	; (8004124 <UART_SetConfig+0x2c8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d126      	bne.n	8003f34 <UART_SetConfig+0xd8>
 8003ee6:	4b90      	ldr	r3, [pc, #576]	; (8004128 <UART_SetConfig+0x2cc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d81b      	bhi.n	8003f2c <UART_SetConfig+0xd0>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <UART_SetConfig+0xa0>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f1d 	.word	0x08003f1d
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f25 	.word	0x08003f25
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e116      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f14:	2302      	movs	r3, #2
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e112      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e10e      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e10a      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e106      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7c      	ldr	r2, [pc, #496]	; (800412c <UART_SetConfig+0x2d0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d138      	bne.n	8003fb0 <UART_SetConfig+0x154>
 8003f3e:	4b7a      	ldr	r3, [pc, #488]	; (8004128 <UART_SetConfig+0x2cc>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d82d      	bhi.n	8003fa8 <UART_SetConfig+0x14c>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <UART_SetConfig+0xf8>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f89 	.word	0x08003f89
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	08003fa9 	.word	0x08003fa9
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003fa9 	.word	0x08003fa9
 8003f70:	08003fa9 	.word	0x08003fa9
 8003f74:	08003f91 	.word	0x08003f91
 8003f78:	08003fa9 	.word	0x08003fa9
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fa1 	.word	0x08003fa1
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e0d8      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f90:	2302      	movs	r3, #2
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f96:	e0d4      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9e:	e0d0      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	e0cc      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fae:	e0c8      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <UART_SetConfig+0x2d4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d125      	bne.n	8004006 <UART_SetConfig+0x1aa>
 8003fba:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <UART_SetConfig+0x2cc>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d016      	beq.n	8003ff6 <UART_SetConfig+0x19a>
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d818      	bhi.n	8003ffe <UART_SetConfig+0x1a2>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d00a      	beq.n	8003fe6 <UART_SetConfig+0x18a>
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d814      	bhi.n	8003ffe <UART_SetConfig+0x1a2>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <UART_SetConfig+0x182>
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d008      	beq.n	8003fee <UART_SetConfig+0x192>
 8003fdc:	e00f      	b.n	8003ffe <UART_SetConfig+0x1a2>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe4:	e0ad      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fec:	e0a9      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff4:	e0a5      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffc:	e0a1      	b.n	8004142 <UART_SetConfig+0x2e6>
 8003ffe:	2310      	movs	r3, #16
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004004:	e09d      	b.n	8004142 <UART_SetConfig+0x2e6>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	; (8004134 <UART_SetConfig+0x2d8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d125      	bne.n	800405c <UART_SetConfig+0x200>
 8004010:	4b45      	ldr	r3, [pc, #276]	; (8004128 <UART_SetConfig+0x2cc>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800401a:	2bc0      	cmp	r3, #192	; 0xc0
 800401c:	d016      	beq.n	800404c <UART_SetConfig+0x1f0>
 800401e:	2bc0      	cmp	r3, #192	; 0xc0
 8004020:	d818      	bhi.n	8004054 <UART_SetConfig+0x1f8>
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d00a      	beq.n	800403c <UART_SetConfig+0x1e0>
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d814      	bhi.n	8004054 <UART_SetConfig+0x1f8>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <UART_SetConfig+0x1d8>
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d008      	beq.n	8004044 <UART_SetConfig+0x1e8>
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x1f8>
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e082      	b.n	8004142 <UART_SetConfig+0x2e6>
 800403c:	2302      	movs	r3, #2
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004042:	e07e      	b.n	8004142 <UART_SetConfig+0x2e6>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404a:	e07a      	b.n	8004142 <UART_SetConfig+0x2e6>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004052:	e076      	b.n	8004142 <UART_SetConfig+0x2e6>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	e072      	b.n	8004142 <UART_SetConfig+0x2e6>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	; (8004138 <UART_SetConfig+0x2dc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d12a      	bne.n	80040bc <UART_SetConfig+0x260>
 8004066:	4b30      	ldr	r3, [pc, #192]	; (8004128 <UART_SetConfig+0x2cc>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004074:	d01a      	beq.n	80040ac <UART_SetConfig+0x250>
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d81b      	bhi.n	80040b4 <UART_SetConfig+0x258>
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d00c      	beq.n	800409c <UART_SetConfig+0x240>
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d815      	bhi.n	80040b4 <UART_SetConfig+0x258>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <UART_SetConfig+0x238>
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d008      	beq.n	80040a4 <UART_SetConfig+0x248>
 8004092:	e00f      	b.n	80040b4 <UART_SetConfig+0x258>
 8004094:	2300      	movs	r3, #0
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409a:	e052      	b.n	8004142 <UART_SetConfig+0x2e6>
 800409c:	2302      	movs	r3, #2
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a2:	e04e      	b.n	8004142 <UART_SetConfig+0x2e6>
 80040a4:	2304      	movs	r3, #4
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e04a      	b.n	8004142 <UART_SetConfig+0x2e6>
 80040ac:	2308      	movs	r3, #8
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b2:	e046      	b.n	8004142 <UART_SetConfig+0x2e6>
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ba:	e042      	b.n	8004142 <UART_SetConfig+0x2e6>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a17      	ldr	r2, [pc, #92]	; (8004120 <UART_SetConfig+0x2c4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d13a      	bne.n	800413c <UART_SetConfig+0x2e0>
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <UART_SetConfig+0x2cc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040d4:	d01a      	beq.n	800410c <UART_SetConfig+0x2b0>
 80040d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040da:	d81b      	bhi.n	8004114 <UART_SetConfig+0x2b8>
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d00c      	beq.n	80040fc <UART_SetConfig+0x2a0>
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	d815      	bhi.n	8004114 <UART_SetConfig+0x2b8>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <UART_SetConfig+0x298>
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d008      	beq.n	8004104 <UART_SetConfig+0x2a8>
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x2b8>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e022      	b.n	8004142 <UART_SetConfig+0x2e6>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e01e      	b.n	8004142 <UART_SetConfig+0x2e6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e01a      	b.n	8004142 <UART_SetConfig+0x2e6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e016      	b.n	8004142 <UART_SetConfig+0x2e6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e012      	b.n	8004142 <UART_SetConfig+0x2e6>
 800411c:	efff69f3 	.word	0xefff69f3
 8004120:	40008000 	.word	0x40008000
 8004124:	40013800 	.word	0x40013800
 8004128:	40021000 	.word	0x40021000
 800412c:	40004400 	.word	0x40004400
 8004130:	40004800 	.word	0x40004800
 8004134:	40004c00 	.word	0x40004c00
 8004138:	40005000 	.word	0x40005000
 800413c:	2310      	movs	r3, #16
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a9f      	ldr	r2, [pc, #636]	; (80043c4 <UART_SetConfig+0x568>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d17a      	bne.n	8004242 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004150:	2b08      	cmp	r3, #8
 8004152:	d824      	bhi.n	800419e <UART_SetConfig+0x342>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x300>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004181 	.word	0x08004181
 8004160:	0800419f 	.word	0x0800419f
 8004164:	08004189 	.word	0x08004189
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800418f 	.word	0x0800418f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	0800419f 	.word	0x0800419f
 8004178:	0800419f 	.word	0x0800419f
 800417c:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fd ff06 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8004184:	61f8      	str	r0, [r7, #28]
        break;
 8004186:	e010      	b.n	80041aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b8f      	ldr	r3, [pc, #572]	; (80043c8 <UART_SetConfig+0x56c>)
 800418a:	61fb      	str	r3, [r7, #28]
        break;
 800418c:	e00d      	b.n	80041aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fd fe67 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8004192:	61f8      	str	r0, [r7, #28]
        break;
 8004194:	e009      	b.n	80041aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61fb      	str	r3, [r7, #28]
        break;
 800419c:	e005      	b.n	80041aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80fb 	beq.w	80043a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d305      	bcc.n	80041ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d903      	bls.n	80041d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041d4:	e0e8      	b.n	80043a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	2200      	movs	r2, #0
 80041da:	461c      	mov	r4, r3
 80041dc:	4615      	mov	r5, r2
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	022b      	lsls	r3, r5, #8
 80041e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041ec:	0222      	lsls	r2, r4, #8
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	6849      	ldr	r1, [r1, #4]
 80041f2:	0849      	lsrs	r1, r1, #1
 80041f4:	2000      	movs	r0, #0
 80041f6:	4688      	mov	r8, r1
 80041f8:	4681      	mov	r9, r0
 80041fa:	eb12 0a08 	adds.w	sl, r2, r8
 80041fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004210:	4650      	mov	r0, sl
 8004212:	4659      	mov	r1, fp
 8004214:	f7fc f82c 	bl	8000270 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004226:	d308      	bcc.n	800423a <UART_SetConfig+0x3de>
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d204      	bcs.n	800423a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	60da      	str	r2, [r3, #12]
 8004238:	e0b6      	b.n	80043a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004240:	e0b2      	b.n	80043a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424a:	d15e      	bne.n	800430a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800424c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004250:	2b08      	cmp	r3, #8
 8004252:	d828      	bhi.n	80042a6 <UART_SetConfig+0x44a>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x400>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004281 	.word	0x08004281
 8004260:	08004289 	.word	0x08004289
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004297 	.word	0x08004297
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042a7 	.word	0x080042a7
 800427c:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7fd fe86 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8004284:	61f8      	str	r0, [r7, #28]
        break;
 8004286:	e014      	b.n	80042b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7fd fe98 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 800428c:	61f8      	str	r0, [r7, #28]
        break;
 800428e:	e010      	b.n	80042b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b4d      	ldr	r3, [pc, #308]	; (80043c8 <UART_SetConfig+0x56c>)
 8004292:	61fb      	str	r3, [r7, #28]
        break;
 8004294:	e00d      	b.n	80042b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fd fde3 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 800429a:	61f8      	str	r0, [r7, #28]
        break;
 800429c:	e009      	b.n	80042b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	61fb      	str	r3, [r7, #28]
        break;
 80042a4:	e005      	b.n	80042b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d077      	beq.n	80043a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005a      	lsls	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b0f      	cmp	r3, #15
 80042d2:	d916      	bls.n	8004302 <UART_SetConfig+0x4a6>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042da:	d212      	bcs.n	8004302 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f023 030f 	bic.w	r3, r3, #15
 80042e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	8afa      	ldrh	r2, [r7, #22]
 80042fe:	60da      	str	r2, [r3, #12]
 8004300:	e052      	b.n	80043a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004308:	e04e      	b.n	80043a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800430a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800430e:	2b08      	cmp	r3, #8
 8004310:	d827      	bhi.n	8004362 <UART_SetConfig+0x506>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x4bc>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	0800433d 	.word	0x0800433d
 800431c:	08004345 	.word	0x08004345
 8004320:	0800434d 	.word	0x0800434d
 8004324:	08004363 	.word	0x08004363
 8004328:	08004353 	.word	0x08004353
 800432c:	08004363 	.word	0x08004363
 8004330:	08004363 	.word	0x08004363
 8004334:	08004363 	.word	0x08004363
 8004338:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fd fe28 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8004340:	61f8      	str	r0, [r7, #28]
        break;
 8004342:	e014      	b.n	800436e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fd fe3a 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8004348:	61f8      	str	r0, [r7, #28]
        break;
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <UART_SetConfig+0x56c>)
 800434e:	61fb      	str	r3, [r7, #28]
        break;
 8004350:	e00d      	b.n	800436e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fd fd85 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8004356:	61f8      	str	r0, [r7, #28]
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	61fb      	str	r3, [r7, #28]
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800436c:	bf00      	nop
    }

    if (pclk != 0U)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	085a      	lsrs	r2, r3, #1
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d909      	bls.n	80043a2 <UART_SetConfig+0x546>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d205      	bcs.n	80043a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e002      	b.n	80043a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c2:	bf00      	nop
 80043c4:	40008000 	.word	0x40008000
 80043c8:	00f42400 	.word	0x00f42400

080043cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ca:	d10a      	bne.n	80044e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b098      	sub	sp, #96	; 0x60
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004520:	f7fc fc96 	bl	8000e50 <HAL_GetTick>
 8004524:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d12e      	bne.n	8004592 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f88c 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d021      	beq.n	8004592 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456c:	647b      	str	r3, [r7, #68]	; 0x44
 800456e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e062      	b.n	8004658 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d149      	bne.n	8004634 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f856 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03c      	beq.n	8004634 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	623b      	str	r3, [r7, #32]
   return(result);
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	633b      	str	r3, [r7, #48]	; 0x30
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e6      	bne.n	80045ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800460c:	61fa      	str	r2, [r7, #28]
 800460e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	617b      	str	r3, [r7, #20]
   return(result);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e5      	bne.n	80045ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e011      	b.n	8004658 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3758      	adds	r7, #88	; 0x58
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	e049      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d045      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fc fbe9 	bl	8000e50 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <UART_WaitOnFlagUntilTimeout+0x30>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e048      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d031      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d110      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2208      	movs	r2, #8
 80046b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f838 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2208      	movs	r2, #8
 80046c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e029      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d111      	bne.n	8004706 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f81e 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00f      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d0a6      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472e:	b480      	push	{r7}
 8004730:	b095      	sub	sp, #84	; 0x54
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	643b      	str	r3, [r7, #64]	; 0x40
 8004756:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800475a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	61fb      	str	r3, [r7, #28]
   return(result);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d118      	bne.n	80047d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	613b      	str	r3, [r7, #16]
   return(result);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047ea:	bf00      	nop
 80047ec:	3754      	adds	r7, #84	; 0x54
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <std>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b510      	push	{r4, lr}
 80047fc:	4604      	mov	r4, r0
 80047fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004806:	6083      	str	r3, [r0, #8]
 8004808:	8181      	strh	r1, [r0, #12]
 800480a:	6643      	str	r3, [r0, #100]	; 0x64
 800480c:	81c2      	strh	r2, [r0, #14]
 800480e:	6183      	str	r3, [r0, #24]
 8004810:	4619      	mov	r1, r3
 8004812:	2208      	movs	r2, #8
 8004814:	305c      	adds	r0, #92	; 0x5c
 8004816:	f000 f8f4 	bl	8004a02 <memset>
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <std+0x38>)
 800481c:	6263      	str	r3, [r4, #36]	; 0x24
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <std+0x3c>)
 8004820:	62a3      	str	r3, [r4, #40]	; 0x28
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <std+0x40>)
 8004824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <std+0x44>)
 8004828:	6224      	str	r4, [r4, #32]
 800482a:	6323      	str	r3, [r4, #48]	; 0x30
 800482c:	bd10      	pop	{r4, pc}
 800482e:	bf00      	nop
 8004830:	0800497d 	.word	0x0800497d
 8004834:	0800499f 	.word	0x0800499f
 8004838:	080049d7 	.word	0x080049d7
 800483c:	080049fb 	.word	0x080049fb

08004840 <stdio_exit_handler>:
 8004840:	4a02      	ldr	r2, [pc, #8]	; (800484c <stdio_exit_handler+0xc>)
 8004842:	4903      	ldr	r1, [pc, #12]	; (8004850 <stdio_exit_handler+0x10>)
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <stdio_exit_handler+0x14>)
 8004846:	f000 b869 	b.w	800491c <_fwalk_sglue>
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c
 8004850:	0800539d 	.word	0x0800539d
 8004854:	20000018 	.word	0x20000018

08004858 <cleanup_stdio>:
 8004858:	6841      	ldr	r1, [r0, #4]
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <cleanup_stdio+0x34>)
 800485c:	4299      	cmp	r1, r3
 800485e:	b510      	push	{r4, lr}
 8004860:	4604      	mov	r4, r0
 8004862:	d001      	beq.n	8004868 <cleanup_stdio+0x10>
 8004864:	f000 fd9a 	bl	800539c <_fflush_r>
 8004868:	68a1      	ldr	r1, [r4, #8]
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <cleanup_stdio+0x38>)
 800486c:	4299      	cmp	r1, r3
 800486e:	d002      	beq.n	8004876 <cleanup_stdio+0x1e>
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fd93 	bl	800539c <_fflush_r>
 8004876:	68e1      	ldr	r1, [r4, #12]
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <cleanup_stdio+0x3c>)
 800487a:	4299      	cmp	r1, r3
 800487c:	d004      	beq.n	8004888 <cleanup_stdio+0x30>
 800487e:	4620      	mov	r0, r4
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	f000 bd8a 	b.w	800539c <_fflush_r>
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	20000168 	.word	0x20000168
 8004890:	200001d0 	.word	0x200001d0
 8004894:	20000238 	.word	0x20000238

08004898 <global_stdio_init.part.0>:
 8004898:	b510      	push	{r4, lr}
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <global_stdio_init.part.0+0x30>)
 800489c:	4c0b      	ldr	r4, [pc, #44]	; (80048cc <global_stdio_init.part.0+0x34>)
 800489e:	4a0c      	ldr	r2, [pc, #48]	; (80048d0 <global_stdio_init.part.0+0x38>)
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	4620      	mov	r0, r4
 80048a4:	2200      	movs	r2, #0
 80048a6:	2104      	movs	r1, #4
 80048a8:	f7ff ffa6 	bl	80047f8 <std>
 80048ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048b0:	2201      	movs	r2, #1
 80048b2:	2109      	movs	r1, #9
 80048b4:	f7ff ffa0 	bl	80047f8 <std>
 80048b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048bc:	2202      	movs	r2, #2
 80048be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c2:	2112      	movs	r1, #18
 80048c4:	f7ff bf98 	b.w	80047f8 <std>
 80048c8:	200002a0 	.word	0x200002a0
 80048cc:	20000168 	.word	0x20000168
 80048d0:	08004841 	.word	0x08004841

080048d4 <__sfp_lock_acquire>:
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <__sfp_lock_acquire+0x8>)
 80048d6:	f000 b90d 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 80048da:	bf00      	nop
 80048dc:	200002a9 	.word	0x200002a9

080048e0 <__sfp_lock_release>:
 80048e0:	4801      	ldr	r0, [pc, #4]	; (80048e8 <__sfp_lock_release+0x8>)
 80048e2:	f000 b908 	b.w	8004af6 <__retarget_lock_release_recursive>
 80048e6:	bf00      	nop
 80048e8:	200002a9 	.word	0x200002a9

080048ec <__sinit>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	f7ff fff0 	bl	80048d4 <__sfp_lock_acquire>
 80048f4:	6a23      	ldr	r3, [r4, #32]
 80048f6:	b11b      	cbz	r3, 8004900 <__sinit+0x14>
 80048f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fc:	f7ff bff0 	b.w	80048e0 <__sfp_lock_release>
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <__sinit+0x28>)
 8004902:	6223      	str	r3, [r4, #32]
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <__sinit+0x2c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f5      	bne.n	80048f8 <__sinit+0xc>
 800490c:	f7ff ffc4 	bl	8004898 <global_stdio_init.part.0>
 8004910:	e7f2      	b.n	80048f8 <__sinit+0xc>
 8004912:	bf00      	nop
 8004914:	08004859 	.word	0x08004859
 8004918:	200002a0 	.word	0x200002a0

0800491c <_fwalk_sglue>:
 800491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004920:	4607      	mov	r7, r0
 8004922:	4688      	mov	r8, r1
 8004924:	4614      	mov	r4, r2
 8004926:	2600      	movs	r6, #0
 8004928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800492c:	f1b9 0901 	subs.w	r9, r9, #1
 8004930:	d505      	bpl.n	800493e <_fwalk_sglue+0x22>
 8004932:	6824      	ldr	r4, [r4, #0]
 8004934:	2c00      	cmp	r4, #0
 8004936:	d1f7      	bne.n	8004928 <_fwalk_sglue+0xc>
 8004938:	4630      	mov	r0, r6
 800493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d907      	bls.n	8004954 <_fwalk_sglue+0x38>
 8004944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004948:	3301      	adds	r3, #1
 800494a:	d003      	beq.n	8004954 <_fwalk_sglue+0x38>
 800494c:	4629      	mov	r1, r5
 800494e:	4638      	mov	r0, r7
 8004950:	47c0      	blx	r8
 8004952:	4306      	orrs	r6, r0
 8004954:	3568      	adds	r5, #104	; 0x68
 8004956:	e7e9      	b.n	800492c <_fwalk_sglue+0x10>

08004958 <iprintf>:
 8004958:	b40f      	push	{r0, r1, r2, r3}
 800495a:	b507      	push	{r0, r1, r2, lr}
 800495c:	4906      	ldr	r1, [pc, #24]	; (8004978 <iprintf+0x20>)
 800495e:	ab04      	add	r3, sp, #16
 8004960:	6808      	ldr	r0, [r1, #0]
 8004962:	f853 2b04 	ldr.w	r2, [r3], #4
 8004966:	6881      	ldr	r1, [r0, #8]
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	f000 f9e7 	bl	8004d3c <_vfiprintf_r>
 800496e:	b003      	add	sp, #12
 8004970:	f85d eb04 	ldr.w	lr, [sp], #4
 8004974:	b004      	add	sp, #16
 8004976:	4770      	bx	lr
 8004978:	20000064 	.word	0x20000064

0800497c <__sread>:
 800497c:	b510      	push	{r4, lr}
 800497e:	460c      	mov	r4, r1
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	f000 f868 	bl	8004a58 <_read_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	bfab      	itete	ge
 800498c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800498e:	89a3      	ldrhlt	r3, [r4, #12]
 8004990:	181b      	addge	r3, r3, r0
 8004992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004996:	bfac      	ite	ge
 8004998:	6563      	strge	r3, [r4, #84]	; 0x54
 800499a:	81a3      	strhlt	r3, [r4, #12]
 800499c:	bd10      	pop	{r4, pc}

0800499e <__swrite>:
 800499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	461f      	mov	r7, r3
 80049a4:	898b      	ldrh	r3, [r1, #12]
 80049a6:	05db      	lsls	r3, r3, #23
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	4616      	mov	r6, r2
 80049ae:	d505      	bpl.n	80049bc <__swrite+0x1e>
 80049b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b4:	2302      	movs	r3, #2
 80049b6:	2200      	movs	r2, #0
 80049b8:	f000 f83c 	bl	8004a34 <_lseek_r>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	4632      	mov	r2, r6
 80049ca:	463b      	mov	r3, r7
 80049cc:	4628      	mov	r0, r5
 80049ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d2:	f000 b853 	b.w	8004a7c <_write_r>

080049d6 <__sseek>:
 80049d6:	b510      	push	{r4, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049de:	f000 f829 	bl	8004a34 <_lseek_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	bf15      	itete	ne
 80049e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80049ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049f2:	81a3      	strheq	r3, [r4, #12]
 80049f4:	bf18      	it	ne
 80049f6:	81a3      	strhne	r3, [r4, #12]
 80049f8:	bd10      	pop	{r4, pc}

080049fa <__sclose>:
 80049fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fe:	f000 b809 	b.w	8004a14 <_close_r>

08004a02 <memset>:
 8004a02:	4402      	add	r2, r0
 8004a04:	4603      	mov	r3, r0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d100      	bne.n	8004a0c <memset+0xa>
 8004a0a:	4770      	bx	lr
 8004a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a10:	e7f9      	b.n	8004a06 <memset+0x4>
	...

08004a14 <_close_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	; (8004a30 <_close_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fb ffa7 	bl	8000972 <_close>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_close_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_close_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	200002a4 	.word	0x200002a4

08004a34 <_lseek_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d07      	ldr	r5, [pc, #28]	; (8004a54 <_lseek_r+0x20>)
 8004a38:	4604      	mov	r4, r0
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	602a      	str	r2, [r5, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f7fb ffbc 	bl	80009c0 <_lseek>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_lseek_r+0x1e>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_lseek_r+0x1e>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	200002a4 	.word	0x200002a4

08004a58 <_read_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d07      	ldr	r5, [pc, #28]	; (8004a78 <_read_r+0x20>)
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4608      	mov	r0, r1
 8004a60:	4611      	mov	r1, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	602a      	str	r2, [r5, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7fb ff4a 	bl	8000900 <_read>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_read_r+0x1e>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_read_r+0x1e>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	200002a4 	.word	0x200002a4

08004a7c <_write_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d07      	ldr	r5, [pc, #28]	; (8004a9c <_write_r+0x20>)
 8004a80:	4604      	mov	r4, r0
 8004a82:	4608      	mov	r0, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	602a      	str	r2, [r5, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f7fb ff55 	bl	800093a <_write>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_write_r+0x1e>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_write_r+0x1e>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	200002a4 	.word	0x200002a4

08004aa0 <__errno>:
 8004aa0:	4b01      	ldr	r3, [pc, #4]	; (8004aa8 <__errno+0x8>)
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000064 	.word	0x20000064

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4d0d      	ldr	r5, [pc, #52]	; (8004ae4 <__libc_init_array+0x38>)
 8004ab0:	4c0d      	ldr	r4, [pc, #52]	; (8004ae8 <__libc_init_array+0x3c>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	4d0b      	ldr	r5, [pc, #44]	; (8004aec <__libc_init_array+0x40>)
 8004abe:	4c0c      	ldr	r4, [pc, #48]	; (8004af0 <__libc_init_array+0x44>)
 8004ac0:	f000 fdbe 	bl	8005640 <_init>
 8004ac4:	1b64      	subs	r4, r4, r5
 8004ac6:	10a4      	asrs	r4, r4, #2
 8004ac8:	2600      	movs	r6, #0
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	080056ec 	.word	0x080056ec
 8004ae8:	080056ec 	.word	0x080056ec
 8004aec:	080056ec 	.word	0x080056ec
 8004af0:	080056f0 	.word	0x080056f0

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <_free_r>:
 8004af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d044      	beq.n	8004b88 <_free_r+0x90>
 8004afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b02:	9001      	str	r0, [sp, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f1a1 0404 	sub.w	r4, r1, #4
 8004b0a:	bfb8      	it	lt
 8004b0c:	18e4      	addlt	r4, r4, r3
 8004b0e:	f000 f8df 	bl	8004cd0 <__malloc_lock>
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <_free_r+0x94>)
 8004b14:	9801      	ldr	r0, [sp, #4]
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	b933      	cbnz	r3, 8004b28 <_free_r+0x30>
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	6014      	str	r4, [r2, #0]
 8004b1e:	b003      	add	sp, #12
 8004b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b24:	f000 b8da 	b.w	8004cdc <__malloc_unlock>
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	d908      	bls.n	8004b3e <_free_r+0x46>
 8004b2c:	6825      	ldr	r5, [r4, #0]
 8004b2e:	1961      	adds	r1, r4, r5
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf01      	itttt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	1949      	addeq	r1, r1, r5
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	e7ed      	b.n	8004b1a <_free_r+0x22>
 8004b3e:	461a      	mov	r2, r3
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b10b      	cbz	r3, 8004b48 <_free_r+0x50>
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d9fa      	bls.n	8004b3e <_free_r+0x46>
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	1855      	adds	r5, r2, r1
 8004b4c:	42a5      	cmp	r5, r4
 8004b4e:	d10b      	bne.n	8004b68 <_free_r+0x70>
 8004b50:	6824      	ldr	r4, [r4, #0]
 8004b52:	4421      	add	r1, r4
 8004b54:	1854      	adds	r4, r2, r1
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	d1e0      	bne.n	8004b1e <_free_r+0x26>
 8004b5c:	681c      	ldr	r4, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	440c      	add	r4, r1
 8004b64:	6014      	str	r4, [r2, #0]
 8004b66:	e7da      	b.n	8004b1e <_free_r+0x26>
 8004b68:	d902      	bls.n	8004b70 <_free_r+0x78>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	e7d6      	b.n	8004b1e <_free_r+0x26>
 8004b70:	6825      	ldr	r5, [r4, #0]
 8004b72:	1961      	adds	r1, r4, r5
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf04      	itt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	bf04      	itt	eq
 8004b80:	1949      	addeq	r1, r1, r5
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	6054      	str	r4, [r2, #4]
 8004b86:	e7ca      	b.n	8004b1e <_free_r+0x26>
 8004b88:	b003      	add	sp, #12
 8004b8a:	bd30      	pop	{r4, r5, pc}
 8004b8c:	200002ac 	.word	0x200002ac

08004b90 <sbrk_aligned>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	4e0e      	ldr	r6, [pc, #56]	; (8004bcc <sbrk_aligned+0x3c>)
 8004b94:	460c      	mov	r4, r1
 8004b96:	6831      	ldr	r1, [r6, #0]
 8004b98:	4605      	mov	r5, r0
 8004b9a:	b911      	cbnz	r1, 8004ba2 <sbrk_aligned+0x12>
 8004b9c:	f000 fcbc 	bl	8005518 <_sbrk_r>
 8004ba0:	6030      	str	r0, [r6, #0]
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 fcb7 	bl	8005518 <_sbrk_r>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	d00a      	beq.n	8004bc4 <sbrk_aligned+0x34>
 8004bae:	1cc4      	adds	r4, r0, #3
 8004bb0:	f024 0403 	bic.w	r4, r4, #3
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d007      	beq.n	8004bc8 <sbrk_aligned+0x38>
 8004bb8:	1a21      	subs	r1, r4, r0
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 fcac 	bl	8005518 <_sbrk_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d101      	bne.n	8004bc8 <sbrk_aligned+0x38>
 8004bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004bc8:	4620      	mov	r0, r4
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	200002b0 	.word	0x200002b0

08004bd0 <_malloc_r>:
 8004bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	1ccd      	adds	r5, r1, #3
 8004bd6:	f025 0503 	bic.w	r5, r5, #3
 8004bda:	3508      	adds	r5, #8
 8004bdc:	2d0c      	cmp	r5, #12
 8004bde:	bf38      	it	cc
 8004be0:	250c      	movcc	r5, #12
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	4607      	mov	r7, r0
 8004be6:	db01      	blt.n	8004bec <_malloc_r+0x1c>
 8004be8:	42a9      	cmp	r1, r5
 8004bea:	d905      	bls.n	8004bf8 <_malloc_r+0x28>
 8004bec:	230c      	movs	r3, #12
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ccc <_malloc_r+0xfc>
 8004bfc:	f000 f868 	bl	8004cd0 <__malloc_lock>
 8004c00:	f8d8 3000 	ldr.w	r3, [r8]
 8004c04:	461c      	mov	r4, r3
 8004c06:	bb5c      	cbnz	r4, 8004c60 <_malloc_r+0x90>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f7ff ffc0 	bl	8004b90 <sbrk_aligned>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	4604      	mov	r4, r0
 8004c14:	d155      	bne.n	8004cc2 <_malloc_r+0xf2>
 8004c16:	f8d8 4000 	ldr.w	r4, [r8]
 8004c1a:	4626      	mov	r6, r4
 8004c1c:	2e00      	cmp	r6, #0
 8004c1e:	d145      	bne.n	8004cac <_malloc_r+0xdc>
 8004c20:	2c00      	cmp	r4, #0
 8004c22:	d048      	beq.n	8004cb6 <_malloc_r+0xe6>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	4631      	mov	r1, r6
 8004c28:	4638      	mov	r0, r7
 8004c2a:	eb04 0903 	add.w	r9, r4, r3
 8004c2e:	f000 fc73 	bl	8005518 <_sbrk_r>
 8004c32:	4581      	cmp	r9, r0
 8004c34:	d13f      	bne.n	8004cb6 <_malloc_r+0xe6>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	1a6d      	subs	r5, r5, r1
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ffa7 	bl	8004b90 <sbrk_aligned>
 8004c42:	3001      	adds	r0, #1
 8004c44:	d037      	beq.n	8004cb6 <_malloc_r+0xe6>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	442b      	add	r3, r5
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d038      	beq.n	8004cc6 <_malloc_r+0xf6>
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	42a2      	cmp	r2, r4
 8004c58:	d12b      	bne.n	8004cb2 <_malloc_r+0xe2>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	e00f      	b.n	8004c80 <_malloc_r+0xb0>
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	1b52      	subs	r2, r2, r5
 8004c64:	d41f      	bmi.n	8004ca6 <_malloc_r+0xd6>
 8004c66:	2a0b      	cmp	r2, #11
 8004c68:	d917      	bls.n	8004c9a <_malloc_r+0xca>
 8004c6a:	1961      	adds	r1, r4, r5
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	6025      	str	r5, [r4, #0]
 8004c70:	bf18      	it	ne
 8004c72:	6059      	strne	r1, [r3, #4]
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	bf08      	it	eq
 8004c78:	f8c8 1000 	streq.w	r1, [r8]
 8004c7c:	5162      	str	r2, [r4, r5]
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	4638      	mov	r0, r7
 8004c82:	f104 060b 	add.w	r6, r4, #11
 8004c86:	f000 f829 	bl	8004cdc <__malloc_unlock>
 8004c8a:	f026 0607 	bic.w	r6, r6, #7
 8004c8e:	1d23      	adds	r3, r4, #4
 8004c90:	1af2      	subs	r2, r6, r3
 8004c92:	d0ae      	beq.n	8004bf2 <_malloc_r+0x22>
 8004c94:	1b9b      	subs	r3, r3, r6
 8004c96:	50a3      	str	r3, [r4, r2]
 8004c98:	e7ab      	b.n	8004bf2 <_malloc_r+0x22>
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	6862      	ldr	r2, [r4, #4]
 8004c9e:	d1dd      	bne.n	8004c5c <_malloc_r+0x8c>
 8004ca0:	f8c8 2000 	str.w	r2, [r8]
 8004ca4:	e7ec      	b.n	8004c80 <_malloc_r+0xb0>
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	6864      	ldr	r4, [r4, #4]
 8004caa:	e7ac      	b.n	8004c06 <_malloc_r+0x36>
 8004cac:	4634      	mov	r4, r6
 8004cae:	6876      	ldr	r6, [r6, #4]
 8004cb0:	e7b4      	b.n	8004c1c <_malloc_r+0x4c>
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	e7cc      	b.n	8004c50 <_malloc_r+0x80>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f000 f80e 	bl	8004cdc <__malloc_unlock>
 8004cc0:	e797      	b.n	8004bf2 <_malloc_r+0x22>
 8004cc2:	6025      	str	r5, [r4, #0]
 8004cc4:	e7dc      	b.n	8004c80 <_malloc_r+0xb0>
 8004cc6:	605b      	str	r3, [r3, #4]
 8004cc8:	deff      	udf	#255	; 0xff
 8004cca:	bf00      	nop
 8004ccc:	200002ac 	.word	0x200002ac

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f7ff bf0f 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	200002a8 	.word	0x200002a8

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f7ff bf0a 	b.w	8004af6 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	200002a8 	.word	0x200002a8

08004ce8 <__sfputc_r>:
 8004ce8:	6893      	ldr	r3, [r2, #8]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	b410      	push	{r4}
 8004cf0:	6093      	str	r3, [r2, #8]
 8004cf2:	da08      	bge.n	8004d06 <__sfputc_r+0x1e>
 8004cf4:	6994      	ldr	r4, [r2, #24]
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	db01      	blt.n	8004cfe <__sfputc_r+0x16>
 8004cfa:	290a      	cmp	r1, #10
 8004cfc:	d103      	bne.n	8004d06 <__sfputc_r+0x1e>
 8004cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d02:	f000 bb73 	b.w	80053ec <__swbuf_r>
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	1c58      	adds	r0, r3, #1
 8004d0a:	6010      	str	r0, [r2, #0]
 8004d0c:	7019      	strb	r1, [r3, #0]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <__sfputs_r>:
 8004d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d18:	4606      	mov	r6, r0
 8004d1a:	460f      	mov	r7, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	18d5      	adds	r5, r2, r3
 8004d20:	42ac      	cmp	r4, r5
 8004d22:	d101      	bne.n	8004d28 <__sfputs_r+0x12>
 8004d24:	2000      	movs	r0, #0
 8004d26:	e007      	b.n	8004d38 <__sfputs_r+0x22>
 8004d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d2c:	463a      	mov	r2, r7
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7ff ffda 	bl	8004ce8 <__sfputc_r>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d1f3      	bne.n	8004d20 <__sfputs_r+0xa>
 8004d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d3c <_vfiprintf_r>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	460d      	mov	r5, r1
 8004d42:	b09d      	sub	sp, #116	; 0x74
 8004d44:	4614      	mov	r4, r2
 8004d46:	4698      	mov	r8, r3
 8004d48:	4606      	mov	r6, r0
 8004d4a:	b118      	cbz	r0, 8004d54 <_vfiprintf_r+0x18>
 8004d4c:	6a03      	ldr	r3, [r0, #32]
 8004d4e:	b90b      	cbnz	r3, 8004d54 <_vfiprintf_r+0x18>
 8004d50:	f7ff fdcc 	bl	80048ec <__sinit>
 8004d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d56:	07d9      	lsls	r1, r3, #31
 8004d58:	d405      	bmi.n	8004d66 <_vfiprintf_r+0x2a>
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	059a      	lsls	r2, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_vfiprintf_r+0x2a>
 8004d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d62:	f7ff fec7 	bl	8004af4 <__retarget_lock_acquire_recursive>
 8004d66:	89ab      	ldrh	r3, [r5, #12]
 8004d68:	071b      	lsls	r3, r3, #28
 8004d6a:	d501      	bpl.n	8004d70 <_vfiprintf_r+0x34>
 8004d6c:	692b      	ldr	r3, [r5, #16]
 8004d6e:	b99b      	cbnz	r3, 8004d98 <_vfiprintf_r+0x5c>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4630      	mov	r0, r6
 8004d74:	f000 fb78 	bl	8005468 <__swsetup_r>
 8004d78:	b170      	cbz	r0, 8004d98 <_vfiprintf_r+0x5c>
 8004d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d7c:	07dc      	lsls	r4, r3, #31
 8004d7e:	d504      	bpl.n	8004d8a <_vfiprintf_r+0x4e>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	b01d      	add	sp, #116	; 0x74
 8004d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	0598      	lsls	r0, r3, #22
 8004d8e:	d4f7      	bmi.n	8004d80 <_vfiprintf_r+0x44>
 8004d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d92:	f7ff feb0 	bl	8004af6 <__retarget_lock_release_recursive>
 8004d96:	e7f3      	b.n	8004d80 <_vfiprintf_r+0x44>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da6:	2330      	movs	r3, #48	; 0x30
 8004da8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f5c <_vfiprintf_r+0x220>
 8004dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db0:	f04f 0901 	mov.w	r9, #1
 8004db4:	4623      	mov	r3, r4
 8004db6:	469a      	mov	sl, r3
 8004db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dbc:	b10a      	cbz	r2, 8004dc2 <_vfiprintf_r+0x86>
 8004dbe:	2a25      	cmp	r2, #37	; 0x25
 8004dc0:	d1f9      	bne.n	8004db6 <_vfiprintf_r+0x7a>
 8004dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc6:	d00b      	beq.n	8004de0 <_vfiprintf_r+0xa4>
 8004dc8:	465b      	mov	r3, fp
 8004dca:	4622      	mov	r2, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff ffa1 	bl	8004d16 <__sfputs_r>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f000 80a9 	beq.w	8004f2c <_vfiprintf_r+0x1f0>
 8004dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ddc:	445a      	add	r2, fp
 8004dde:	9209      	str	r2, [sp, #36]	; 0x24
 8004de0:	f89a 3000 	ldrb.w	r3, [sl]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a1 	beq.w	8004f2c <_vfiprintf_r+0x1f0>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295
 8004df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df4:	f10a 0a01 	add.w	sl, sl, #1
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	9307      	str	r3, [sp, #28]
 8004dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e00:	931a      	str	r3, [sp, #104]	; 0x68
 8004e02:	4654      	mov	r4, sl
 8004e04:	2205      	movs	r2, #5
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4854      	ldr	r0, [pc, #336]	; (8004f5c <_vfiprintf_r+0x220>)
 8004e0c:	f7fb f9e0 	bl	80001d0 <memchr>
 8004e10:	9a04      	ldr	r2, [sp, #16]
 8004e12:	b9d8      	cbnz	r0, 8004e4c <_vfiprintf_r+0x110>
 8004e14:	06d1      	lsls	r1, r2, #27
 8004e16:	bf44      	itt	mi
 8004e18:	2320      	movmi	r3, #32
 8004e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e1e:	0713      	lsls	r3, r2, #28
 8004e20:	bf44      	itt	mi
 8004e22:	232b      	movmi	r3, #43	; 0x2b
 8004e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e28:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2e:	d015      	beq.n	8004e5c <_vfiprintf_r+0x120>
 8004e30:	9a07      	ldr	r2, [sp, #28]
 8004e32:	4654      	mov	r4, sl
 8004e34:	2000      	movs	r0, #0
 8004e36:	f04f 0c0a 	mov.w	ip, #10
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e40:	3b30      	subs	r3, #48	; 0x30
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d94d      	bls.n	8004ee2 <_vfiprintf_r+0x1a6>
 8004e46:	b1b0      	cbz	r0, 8004e76 <_vfiprintf_r+0x13a>
 8004e48:	9207      	str	r2, [sp, #28]
 8004e4a:	e014      	b.n	8004e76 <_vfiprintf_r+0x13a>
 8004e4c:	eba0 0308 	sub.w	r3, r0, r8
 8004e50:	fa09 f303 	lsl.w	r3, r9, r3
 8004e54:	4313      	orrs	r3, r2
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	46a2      	mov	sl, r4
 8004e5a:	e7d2      	b.n	8004e02 <_vfiprintf_r+0xc6>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	1d19      	adds	r1, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9103      	str	r1, [sp, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bfbb      	ittet	lt
 8004e68:	425b      	neglt	r3, r3
 8004e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e6e:	9307      	strge	r3, [sp, #28]
 8004e70:	9307      	strlt	r3, [sp, #28]
 8004e72:	bfb8      	it	lt
 8004e74:	9204      	strlt	r2, [sp, #16]
 8004e76:	7823      	ldrb	r3, [r4, #0]
 8004e78:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7a:	d10c      	bne.n	8004e96 <_vfiprintf_r+0x15a>
 8004e7c:	7863      	ldrb	r3, [r4, #1]
 8004e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e80:	d134      	bne.n	8004eec <_vfiprintf_r+0x1b0>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9203      	str	r2, [sp, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfb8      	it	lt
 8004e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e92:	3402      	adds	r4, #2
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f6c <_vfiprintf_r+0x230>
 8004e9a:	7821      	ldrb	r1, [r4, #0]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f7fb f996 	bl	80001d0 <memchr>
 8004ea4:	b138      	cbz	r0, 8004eb6 <_vfiprintf_r+0x17a>
 8004ea6:	9b04      	ldr	r3, [sp, #16]
 8004ea8:	eba0 000a 	sub.w	r0, r0, sl
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	4082      	lsls	r2, r0
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	3401      	adds	r4, #1
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eba:	4829      	ldr	r0, [pc, #164]	; (8004f60 <_vfiprintf_r+0x224>)
 8004ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec0:	2206      	movs	r2, #6
 8004ec2:	f7fb f985 	bl	80001d0 <memchr>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d03f      	beq.n	8004f4a <_vfiprintf_r+0x20e>
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <_vfiprintf_r+0x228>)
 8004ecc:	bb1b      	cbnz	r3, 8004f16 <_vfiprintf_r+0x1da>
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	3307      	adds	r3, #7
 8004ed2:	f023 0307 	bic.w	r3, r3, #7
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	9303      	str	r3, [sp, #12]
 8004eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004edc:	443b      	add	r3, r7
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee0:	e768      	b.n	8004db4 <_vfiprintf_r+0x78>
 8004ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	2001      	movs	r0, #1
 8004eea:	e7a6      	b.n	8004e3a <_vfiprintf_r+0xfe>
 8004eec:	2300      	movs	r3, #0
 8004eee:	3401      	adds	r4, #1
 8004ef0:	9305      	str	r3, [sp, #20]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f04f 0c0a 	mov.w	ip, #10
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004efe:	3a30      	subs	r2, #48	; 0x30
 8004f00:	2a09      	cmp	r2, #9
 8004f02:	d903      	bls.n	8004f0c <_vfiprintf_r+0x1d0>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0c6      	beq.n	8004e96 <_vfiprintf_r+0x15a>
 8004f08:	9105      	str	r1, [sp, #20]
 8004f0a:	e7c4      	b.n	8004e96 <_vfiprintf_r+0x15a>
 8004f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f10:	4604      	mov	r4, r0
 8004f12:	2301      	movs	r3, #1
 8004f14:	e7f0      	b.n	8004ef8 <_vfiprintf_r+0x1bc>
 8004f16:	ab03      	add	r3, sp, #12
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	462a      	mov	r2, r5
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <_vfiprintf_r+0x22c>)
 8004f1e:	a904      	add	r1, sp, #16
 8004f20:	4630      	mov	r0, r6
 8004f22:	f3af 8000 	nop.w
 8004f26:	4607      	mov	r7, r0
 8004f28:	1c78      	adds	r0, r7, #1
 8004f2a:	d1d6      	bne.n	8004eda <_vfiprintf_r+0x19e>
 8004f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f2e:	07d9      	lsls	r1, r3, #31
 8004f30:	d405      	bmi.n	8004f3e <_vfiprintf_r+0x202>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	059a      	lsls	r2, r3, #22
 8004f36:	d402      	bmi.n	8004f3e <_vfiprintf_r+0x202>
 8004f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3a:	f7ff fddc 	bl	8004af6 <__retarget_lock_release_recursive>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	065b      	lsls	r3, r3, #25
 8004f42:	f53f af1d 	bmi.w	8004d80 <_vfiprintf_r+0x44>
 8004f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f48:	e71c      	b.n	8004d84 <_vfiprintf_r+0x48>
 8004f4a:	ab03      	add	r3, sp, #12
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	462a      	mov	r2, r5
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <_vfiprintf_r+0x22c>)
 8004f52:	a904      	add	r1, sp, #16
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f879 	bl	800504c <_printf_i>
 8004f5a:	e7e4      	b.n	8004f26 <_vfiprintf_r+0x1ea>
 8004f5c:	080056b0 	.word	0x080056b0
 8004f60:	080056ba 	.word	0x080056ba
 8004f64:	00000000 	.word	0x00000000
 8004f68:	08004d17 	.word	0x08004d17
 8004f6c:	080056b6 	.word	0x080056b6

08004f70 <_printf_common>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	4616      	mov	r6, r2
 8004f76:	4699      	mov	r9, r3
 8004f78:	688a      	ldr	r2, [r1, #8]
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bfb8      	it	lt
 8004f84:	4613      	movlt	r3, r2
 8004f86:	6033      	str	r3, [r6, #0]
 8004f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	b10a      	cbz	r2, 8004f96 <_printf_common+0x26>
 8004f92:	3301      	adds	r3, #1
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	0699      	lsls	r1, r3, #26
 8004f9a:	bf42      	ittt	mi
 8004f9c:	6833      	ldrmi	r3, [r6, #0]
 8004f9e:	3302      	addmi	r3, #2
 8004fa0:	6033      	strmi	r3, [r6, #0]
 8004fa2:	6825      	ldr	r5, [r4, #0]
 8004fa4:	f015 0506 	ands.w	r5, r5, #6
 8004fa8:	d106      	bne.n	8004fb8 <_printf_common+0x48>
 8004faa:	f104 0a19 	add.w	sl, r4, #25
 8004fae:	68e3      	ldr	r3, [r4, #12]
 8004fb0:	6832      	ldr	r2, [r6, #0]
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	dc26      	bgt.n	8005006 <_printf_common+0x96>
 8004fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fbc:	1e13      	subs	r3, r2, #0
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	bf18      	it	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	0692      	lsls	r2, r2, #26
 8004fc6:	d42b      	bmi.n	8005020 <_printf_common+0xb0>
 8004fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fcc:	4649      	mov	r1, r9
 8004fce:	4638      	mov	r0, r7
 8004fd0:	47c0      	blx	r8
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d01e      	beq.n	8005014 <_printf_common+0xa4>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	f003 0306 	and.w	r3, r3, #6
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	bf02      	ittt	eq
 8004fe2:	68e5      	ldreq	r5, [r4, #12]
 8004fe4:	6833      	ldreq	r3, [r6, #0]
 8004fe6:	1aed      	subeq	r5, r5, r3
 8004fe8:	68a3      	ldr	r3, [r4, #8]
 8004fea:	bf0c      	ite	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	2500      	movne	r5, #0
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bfc4      	itt	gt
 8004ff6:	1a9b      	subgt	r3, r3, r2
 8004ff8:	18ed      	addgt	r5, r5, r3
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	341a      	adds	r4, #26
 8004ffe:	42b5      	cmp	r5, r6
 8005000:	d11a      	bne.n	8005038 <_printf_common+0xc8>
 8005002:	2000      	movs	r0, #0
 8005004:	e008      	b.n	8005018 <_printf_common+0xa8>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4649      	mov	r1, r9
 800500c:	4638      	mov	r0, r7
 800500e:	47c0      	blx	r8
 8005010:	3001      	adds	r0, #1
 8005012:	d103      	bne.n	800501c <_printf_common+0xac>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	3501      	adds	r5, #1
 800501e:	e7c6      	b.n	8004fae <_printf_common+0x3e>
 8005020:	18e1      	adds	r1, r4, r3
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	2030      	movs	r0, #48	; 0x30
 8005026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800502a:	4422      	add	r2, r4
 800502c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005034:	3302      	adds	r3, #2
 8005036:	e7c7      	b.n	8004fc8 <_printf_common+0x58>
 8005038:	2301      	movs	r3, #1
 800503a:	4622      	mov	r2, r4
 800503c:	4649      	mov	r1, r9
 800503e:	4638      	mov	r0, r7
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa4>
 8005046:	3601      	adds	r6, #1
 8005048:	e7d9      	b.n	8004ffe <_printf_common+0x8e>
	...

0800504c <_printf_i>:
 800504c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	7e0f      	ldrb	r7, [r1, #24]
 8005052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005054:	2f78      	cmp	r7, #120	; 0x78
 8005056:	4691      	mov	r9, r2
 8005058:	4680      	mov	r8, r0
 800505a:	460c      	mov	r4, r1
 800505c:	469a      	mov	sl, r3
 800505e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005062:	d807      	bhi.n	8005074 <_printf_i+0x28>
 8005064:	2f62      	cmp	r7, #98	; 0x62
 8005066:	d80a      	bhi.n	800507e <_printf_i+0x32>
 8005068:	2f00      	cmp	r7, #0
 800506a:	f000 80d4 	beq.w	8005216 <_printf_i+0x1ca>
 800506e:	2f58      	cmp	r7, #88	; 0x58
 8005070:	f000 80c0 	beq.w	80051f4 <_printf_i+0x1a8>
 8005074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800507c:	e03a      	b.n	80050f4 <_printf_i+0xa8>
 800507e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005082:	2b15      	cmp	r3, #21
 8005084:	d8f6      	bhi.n	8005074 <_printf_i+0x28>
 8005086:	a101      	add	r1, pc, #4	; (adr r1, 800508c <_printf_i+0x40>)
 8005088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050f9 	.word	0x080050f9
 8005094:	08005075 	.word	0x08005075
 8005098:	08005075 	.word	0x08005075
 800509c:	08005075 	.word	0x08005075
 80050a0:	08005075 	.word	0x08005075
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005075 	.word	0x08005075
 80050ac:	08005075 	.word	0x08005075
 80050b0:	08005075 	.word	0x08005075
 80050b4:	08005075 	.word	0x08005075
 80050b8:	080051fd 	.word	0x080051fd
 80050bc:	08005125 	.word	0x08005125
 80050c0:	080051b7 	.word	0x080051b7
 80050c4:	08005075 	.word	0x08005075
 80050c8:	08005075 	.word	0x08005075
 80050cc:	0800521f 	.word	0x0800521f
 80050d0:	08005075 	.word	0x08005075
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005075 	.word	0x08005075
 80050dc:	08005075 	.word	0x08005075
 80050e0:	080051bf 	.word	0x080051bf
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	602a      	str	r2, [r5, #0]
 80050ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f4:	2301      	movs	r3, #1
 80050f6:	e09f      	b.n	8005238 <_printf_i+0x1ec>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	0607      	lsls	r7, r0, #24
 80050fe:	f103 0104 	add.w	r1, r3, #4
 8005102:	6029      	str	r1, [r5, #0]
 8005104:	d501      	bpl.n	800510a <_printf_i+0xbe>
 8005106:	681e      	ldr	r6, [r3, #0]
 8005108:	e003      	b.n	8005112 <_printf_i+0xc6>
 800510a:	0646      	lsls	r6, r0, #25
 800510c:	d5fb      	bpl.n	8005106 <_printf_i+0xba>
 800510e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005112:	2e00      	cmp	r6, #0
 8005114:	da03      	bge.n	800511e <_printf_i+0xd2>
 8005116:	232d      	movs	r3, #45	; 0x2d
 8005118:	4276      	negs	r6, r6
 800511a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511e:	485a      	ldr	r0, [pc, #360]	; (8005288 <_printf_i+0x23c>)
 8005120:	230a      	movs	r3, #10
 8005122:	e012      	b.n	800514a <_printf_i+0xfe>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	6820      	ldr	r0, [r4, #0]
 8005128:	1d19      	adds	r1, r3, #4
 800512a:	6029      	str	r1, [r5, #0]
 800512c:	0605      	lsls	r5, r0, #24
 800512e:	d501      	bpl.n	8005134 <_printf_i+0xe8>
 8005130:	681e      	ldr	r6, [r3, #0]
 8005132:	e002      	b.n	800513a <_printf_i+0xee>
 8005134:	0641      	lsls	r1, r0, #25
 8005136:	d5fb      	bpl.n	8005130 <_printf_i+0xe4>
 8005138:	881e      	ldrh	r6, [r3, #0]
 800513a:	4853      	ldr	r0, [pc, #332]	; (8005288 <_printf_i+0x23c>)
 800513c:	2f6f      	cmp	r7, #111	; 0x6f
 800513e:	bf0c      	ite	eq
 8005140:	2308      	moveq	r3, #8
 8005142:	230a      	movne	r3, #10
 8005144:	2100      	movs	r1, #0
 8005146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800514a:	6865      	ldr	r5, [r4, #4]
 800514c:	60a5      	str	r5, [r4, #8]
 800514e:	2d00      	cmp	r5, #0
 8005150:	bfa2      	ittt	ge
 8005152:	6821      	ldrge	r1, [r4, #0]
 8005154:	f021 0104 	bicge.w	r1, r1, #4
 8005158:	6021      	strge	r1, [r4, #0]
 800515a:	b90e      	cbnz	r6, 8005160 <_printf_i+0x114>
 800515c:	2d00      	cmp	r5, #0
 800515e:	d04b      	beq.n	80051f8 <_printf_i+0x1ac>
 8005160:	4615      	mov	r5, r2
 8005162:	fbb6 f1f3 	udiv	r1, r6, r3
 8005166:	fb03 6711 	mls	r7, r3, r1, r6
 800516a:	5dc7      	ldrb	r7, [r0, r7]
 800516c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005170:	4637      	mov	r7, r6
 8005172:	42bb      	cmp	r3, r7
 8005174:	460e      	mov	r6, r1
 8005176:	d9f4      	bls.n	8005162 <_printf_i+0x116>
 8005178:	2b08      	cmp	r3, #8
 800517a:	d10b      	bne.n	8005194 <_printf_i+0x148>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07de      	lsls	r6, r3, #31
 8005180:	d508      	bpl.n	8005194 <_printf_i+0x148>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	6861      	ldr	r1, [r4, #4]
 8005186:	4299      	cmp	r1, r3
 8005188:	bfde      	ittt	le
 800518a:	2330      	movle	r3, #48	; 0x30
 800518c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005194:	1b52      	subs	r2, r2, r5
 8005196:	6122      	str	r2, [r4, #16]
 8005198:	f8cd a000 	str.w	sl, [sp]
 800519c:	464b      	mov	r3, r9
 800519e:	aa03      	add	r2, sp, #12
 80051a0:	4621      	mov	r1, r4
 80051a2:	4640      	mov	r0, r8
 80051a4:	f7ff fee4 	bl	8004f70 <_printf_common>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d14a      	bne.n	8005242 <_printf_i+0x1f6>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	b004      	add	sp, #16
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	f043 0320 	orr.w	r3, r3, #32
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	4833      	ldr	r0, [pc, #204]	; (800528c <_printf_i+0x240>)
 80051c0:	2778      	movs	r7, #120	; 0x78
 80051c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	6829      	ldr	r1, [r5, #0]
 80051ca:	061f      	lsls	r7, r3, #24
 80051cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80051d0:	d402      	bmi.n	80051d8 <_printf_i+0x18c>
 80051d2:	065f      	lsls	r7, r3, #25
 80051d4:	bf48      	it	mi
 80051d6:	b2b6      	uxthmi	r6, r6
 80051d8:	07df      	lsls	r7, r3, #31
 80051da:	bf48      	it	mi
 80051dc:	f043 0320 	orrmi.w	r3, r3, #32
 80051e0:	6029      	str	r1, [r5, #0]
 80051e2:	bf48      	it	mi
 80051e4:	6023      	strmi	r3, [r4, #0]
 80051e6:	b91e      	cbnz	r6, 80051f0 <_printf_i+0x1a4>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f023 0320 	bic.w	r3, r3, #32
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	2310      	movs	r3, #16
 80051f2:	e7a7      	b.n	8005144 <_printf_i+0xf8>
 80051f4:	4824      	ldr	r0, [pc, #144]	; (8005288 <_printf_i+0x23c>)
 80051f6:	e7e4      	b.n	80051c2 <_printf_i+0x176>
 80051f8:	4615      	mov	r5, r2
 80051fa:	e7bd      	b.n	8005178 <_printf_i+0x12c>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	6826      	ldr	r6, [r4, #0]
 8005200:	6961      	ldr	r1, [r4, #20]
 8005202:	1d18      	adds	r0, r3, #4
 8005204:	6028      	str	r0, [r5, #0]
 8005206:	0635      	lsls	r5, r6, #24
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	d501      	bpl.n	8005210 <_printf_i+0x1c4>
 800520c:	6019      	str	r1, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0x1ca>
 8005210:	0670      	lsls	r0, r6, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0x1c0>
 8005214:	8019      	strh	r1, [r3, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	4615      	mov	r5, r2
 800521c:	e7bc      	b.n	8005198 <_printf_i+0x14c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	1d1a      	adds	r2, r3, #4
 8005222:	602a      	str	r2, [r5, #0]
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	2100      	movs	r1, #0
 800522a:	4628      	mov	r0, r5
 800522c:	f7fa ffd0 	bl	80001d0 <memchr>
 8005230:	b108      	cbz	r0, 8005236 <_printf_i+0x1ea>
 8005232:	1b40      	subs	r0, r0, r5
 8005234:	6060      	str	r0, [r4, #4]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	2300      	movs	r3, #0
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005240:	e7aa      	b.n	8005198 <_printf_i+0x14c>
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	462a      	mov	r2, r5
 8005246:	4649      	mov	r1, r9
 8005248:	4640      	mov	r0, r8
 800524a:	47d0      	blx	sl
 800524c:	3001      	adds	r0, #1
 800524e:	d0ad      	beq.n	80051ac <_printf_i+0x160>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	079b      	lsls	r3, r3, #30
 8005254:	d413      	bmi.n	800527e <_printf_i+0x232>
 8005256:	68e0      	ldr	r0, [r4, #12]
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	4298      	cmp	r0, r3
 800525c:	bfb8      	it	lt
 800525e:	4618      	movlt	r0, r3
 8005260:	e7a6      	b.n	80051b0 <_printf_i+0x164>
 8005262:	2301      	movs	r3, #1
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d09d      	beq.n	80051ac <_printf_i+0x160>
 8005270:	3501      	adds	r5, #1
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	9903      	ldr	r1, [sp, #12]
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	42ab      	cmp	r3, r5
 800527a:	dcf2      	bgt.n	8005262 <_printf_i+0x216>
 800527c:	e7eb      	b.n	8005256 <_printf_i+0x20a>
 800527e:	2500      	movs	r5, #0
 8005280:	f104 0619 	add.w	r6, r4, #25
 8005284:	e7f5      	b.n	8005272 <_printf_i+0x226>
 8005286:	bf00      	nop
 8005288:	080056c1 	.word	0x080056c1
 800528c:	080056d2 	.word	0x080056d2

08005290 <__sflush_r>:
 8005290:	898a      	ldrh	r2, [r1, #12]
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	4605      	mov	r5, r0
 8005298:	0710      	lsls	r0, r2, #28
 800529a:	460c      	mov	r4, r1
 800529c:	d458      	bmi.n	8005350 <__sflush_r+0xc0>
 800529e:	684b      	ldr	r3, [r1, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc05      	bgt.n	80052b0 <__sflush_r+0x20>
 80052a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dc02      	bgt.n	80052b0 <__sflush_r+0x20>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d0f9      	beq.n	80052aa <__sflush_r+0x1a>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052bc:	682f      	ldr	r7, [r5, #0]
 80052be:	6a21      	ldr	r1, [r4, #32]
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	d032      	beq.n	800532a <__sflush_r+0x9a>
 80052c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	075a      	lsls	r2, r3, #29
 80052ca:	d505      	bpl.n	80052d8 <__sflush_r+0x48>
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	1ac0      	subs	r0, r0, r3
 80052d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052d2:	b10b      	cbz	r3, 80052d8 <__sflush_r+0x48>
 80052d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d6:	1ac0      	subs	r0, r0, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	4602      	mov	r2, r0
 80052dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052de:	6a21      	ldr	r1, [r4, #32]
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b0      	blx	r6
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	d106      	bne.n	80052f8 <__sflush_r+0x68>
 80052ea:	6829      	ldr	r1, [r5, #0]
 80052ec:	291d      	cmp	r1, #29
 80052ee:	d82b      	bhi.n	8005348 <__sflush_r+0xb8>
 80052f0:	4a29      	ldr	r2, [pc, #164]	; (8005398 <__sflush_r+0x108>)
 80052f2:	410a      	asrs	r2, r1
 80052f4:	07d6      	lsls	r6, r2, #31
 80052f6:	d427      	bmi.n	8005348 <__sflush_r+0xb8>
 80052f8:	2200      	movs	r2, #0
 80052fa:	6062      	str	r2, [r4, #4]
 80052fc:	04d9      	lsls	r1, r3, #19
 80052fe:	6922      	ldr	r2, [r4, #16]
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	d504      	bpl.n	800530e <__sflush_r+0x7e>
 8005304:	1c42      	adds	r2, r0, #1
 8005306:	d101      	bne.n	800530c <__sflush_r+0x7c>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b903      	cbnz	r3, 800530e <__sflush_r+0x7e>
 800530c:	6560      	str	r0, [r4, #84]	; 0x54
 800530e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005310:	602f      	str	r7, [r5, #0]
 8005312:	2900      	cmp	r1, #0
 8005314:	d0c9      	beq.n	80052aa <__sflush_r+0x1a>
 8005316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531a:	4299      	cmp	r1, r3
 800531c:	d002      	beq.n	8005324 <__sflush_r+0x94>
 800531e:	4628      	mov	r0, r5
 8005320:	f7ff fbea 	bl	8004af8 <_free_r>
 8005324:	2000      	movs	r0, #0
 8005326:	6360      	str	r0, [r4, #52]	; 0x34
 8005328:	e7c0      	b.n	80052ac <__sflush_r+0x1c>
 800532a:	2301      	movs	r3, #1
 800532c:	4628      	mov	r0, r5
 800532e:	47b0      	blx	r6
 8005330:	1c41      	adds	r1, r0, #1
 8005332:	d1c8      	bne.n	80052c6 <__sflush_r+0x36>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0c5      	beq.n	80052c6 <__sflush_r+0x36>
 800533a:	2b1d      	cmp	r3, #29
 800533c:	d001      	beq.n	8005342 <__sflush_r+0xb2>
 800533e:	2b16      	cmp	r3, #22
 8005340:	d101      	bne.n	8005346 <__sflush_r+0xb6>
 8005342:	602f      	str	r7, [r5, #0]
 8005344:	e7b1      	b.n	80052aa <__sflush_r+0x1a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e7ad      	b.n	80052ac <__sflush_r+0x1c>
 8005350:	690f      	ldr	r7, [r1, #16]
 8005352:	2f00      	cmp	r7, #0
 8005354:	d0a9      	beq.n	80052aa <__sflush_r+0x1a>
 8005356:	0793      	lsls	r3, r2, #30
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	bf08      	it	eq
 800535c:	694b      	ldreq	r3, [r1, #20]
 800535e:	600f      	str	r7, [r1, #0]
 8005360:	bf18      	it	ne
 8005362:	2300      	movne	r3, #0
 8005364:	eba6 0807 	sub.w	r8, r6, r7
 8005368:	608b      	str	r3, [r1, #8]
 800536a:	f1b8 0f00 	cmp.w	r8, #0
 800536e:	dd9c      	ble.n	80052aa <__sflush_r+0x1a>
 8005370:	6a21      	ldr	r1, [r4, #32]
 8005372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005374:	4643      	mov	r3, r8
 8005376:	463a      	mov	r2, r7
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	2800      	cmp	r0, #0
 800537e:	dc06      	bgt.n	800538e <__sflush_r+0xfe>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	e78e      	b.n	80052ac <__sflush_r+0x1c>
 800538e:	4407      	add	r7, r0
 8005390:	eba8 0800 	sub.w	r8, r8, r0
 8005394:	e7e9      	b.n	800536a <__sflush_r+0xda>
 8005396:	bf00      	nop
 8005398:	dfbffffe 	.word	0xdfbffffe

0800539c <_fflush_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b913      	cbnz	r3, 80053ac <_fflush_r+0x10>
 80053a6:	2500      	movs	r5, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	b118      	cbz	r0, 80053b6 <_fflush_r+0x1a>
 80053ae:	6a03      	ldr	r3, [r0, #32]
 80053b0:	b90b      	cbnz	r3, 80053b6 <_fflush_r+0x1a>
 80053b2:	f7ff fa9b 	bl	80048ec <__sinit>
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f3      	beq.n	80053a6 <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x32>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x32>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f7ff fb93 	bl	8004af4 <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff5d 	bl	8005290 <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d8:	07da      	lsls	r2, r3, #31
 80053da:	4605      	mov	r5, r0
 80053dc:	d4e4      	bmi.n	80053a8 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4e1      	bmi.n	80053a8 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f7ff fb86 	bl	8004af6 <__retarget_lock_release_recursive>
 80053ea:	e7dd      	b.n	80053a8 <_fflush_r+0xc>

080053ec <__swbuf_r>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	460e      	mov	r6, r1
 80053f0:	4614      	mov	r4, r2
 80053f2:	4605      	mov	r5, r0
 80053f4:	b118      	cbz	r0, 80053fe <__swbuf_r+0x12>
 80053f6:	6a03      	ldr	r3, [r0, #32]
 80053f8:	b90b      	cbnz	r3, 80053fe <__swbuf_r+0x12>
 80053fa:	f7ff fa77 	bl	80048ec <__sinit>
 80053fe:	69a3      	ldr	r3, [r4, #24]
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	071a      	lsls	r2, r3, #28
 8005406:	d525      	bpl.n	8005454 <__swbuf_r+0x68>
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	b31b      	cbz	r3, 8005454 <__swbuf_r+0x68>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	6922      	ldr	r2, [r4, #16]
 8005410:	1a98      	subs	r0, r3, r2
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	b2f6      	uxtb	r6, r6
 8005416:	4283      	cmp	r3, r0
 8005418:	4637      	mov	r7, r6
 800541a:	dc04      	bgt.n	8005426 <__swbuf_r+0x3a>
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f7ff ffbc 	bl	800539c <_fflush_r>
 8005424:	b9e0      	cbnz	r0, 8005460 <__swbuf_r+0x74>
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	3b01      	subs	r3, #1
 800542a:	60a3      	str	r3, [r4, #8]
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	701e      	strb	r6, [r3, #0]
 8005434:	6962      	ldr	r2, [r4, #20]
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	429a      	cmp	r2, r3
 800543a:	d004      	beq.n	8005446 <__swbuf_r+0x5a>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	07db      	lsls	r3, r3, #31
 8005440:	d506      	bpl.n	8005450 <__swbuf_r+0x64>
 8005442:	2e0a      	cmp	r6, #10
 8005444:	d104      	bne.n	8005450 <__swbuf_r+0x64>
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f7ff ffa7 	bl	800539c <_fflush_r>
 800544e:	b938      	cbnz	r0, 8005460 <__swbuf_r+0x74>
 8005450:	4638      	mov	r0, r7
 8005452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	f000 f806 	bl	8005468 <__swsetup_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	d0d5      	beq.n	800540c <__swbuf_r+0x20>
 8005460:	f04f 37ff 	mov.w	r7, #4294967295
 8005464:	e7f4      	b.n	8005450 <__swbuf_r+0x64>
	...

08005468 <__swsetup_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <__swsetup_r+0xac>)
 800546c:	4605      	mov	r5, r0
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	460c      	mov	r4, r1
 8005472:	b118      	cbz	r0, 800547c <__swsetup_r+0x14>
 8005474:	6a03      	ldr	r3, [r0, #32]
 8005476:	b90b      	cbnz	r3, 800547c <__swsetup_r+0x14>
 8005478:	f7ff fa38 	bl	80048ec <__sinit>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005482:	0718      	lsls	r0, r3, #28
 8005484:	d422      	bmi.n	80054cc <__swsetup_r+0x64>
 8005486:	06d9      	lsls	r1, r3, #27
 8005488:	d407      	bmi.n	800549a <__swsetup_r+0x32>
 800548a:	2309      	movs	r3, #9
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e034      	b.n	8005504 <__swsetup_r+0x9c>
 800549a:	0758      	lsls	r0, r3, #29
 800549c:	d512      	bpl.n	80054c4 <__swsetup_r+0x5c>
 800549e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054a0:	b141      	cbz	r1, 80054b4 <__swsetup_r+0x4c>
 80054a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a6:	4299      	cmp	r1, r3
 80054a8:	d002      	beq.n	80054b0 <__swsetup_r+0x48>
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7ff fb24 	bl	8004af8 <_free_r>
 80054b0:	2300      	movs	r3, #0
 80054b2:	6363      	str	r3, [r4, #52]	; 0x34
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	2300      	movs	r3, #0
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f043 0308 	orr.w	r3, r3, #8
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	b94b      	cbnz	r3, 80054e4 <__swsetup_r+0x7c>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054da:	d003      	beq.n	80054e4 <__swsetup_r+0x7c>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f850 	bl	8005584 <__smakebuf_r>
 80054e4:	89a0      	ldrh	r0, [r4, #12]
 80054e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054ea:	f010 0301 	ands.w	r3, r0, #1
 80054ee:	d00a      	beq.n	8005506 <__swsetup_r+0x9e>
 80054f0:	2300      	movs	r3, #0
 80054f2:	60a3      	str	r3, [r4, #8]
 80054f4:	6963      	ldr	r3, [r4, #20]
 80054f6:	425b      	negs	r3, r3
 80054f8:	61a3      	str	r3, [r4, #24]
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	b943      	cbnz	r3, 8005510 <__swsetup_r+0xa8>
 80054fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005502:	d1c4      	bne.n	800548e <__swsetup_r+0x26>
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	0781      	lsls	r1, r0, #30
 8005508:	bf58      	it	pl
 800550a:	6963      	ldrpl	r3, [r4, #20]
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	e7f4      	b.n	80054fa <__swsetup_r+0x92>
 8005510:	2000      	movs	r0, #0
 8005512:	e7f7      	b.n	8005504 <__swsetup_r+0x9c>
 8005514:	20000064 	.word	0x20000064

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fa5a 	bl	80009dc <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200002a4 	.word	0x200002a4

08005538 <__swhatbuf_r>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	2900      	cmp	r1, #0
 8005542:	b096      	sub	sp, #88	; 0x58
 8005544:	4615      	mov	r5, r2
 8005546:	461e      	mov	r6, r3
 8005548:	da0d      	bge.n	8005566 <__swhatbuf_r+0x2e>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	bf0c      	ite	eq
 8005556:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800555a:	2340      	movne	r3, #64	; 0x40
 800555c:	2000      	movs	r0, #0
 800555e:	6031      	str	r1, [r6, #0]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	b016      	add	sp, #88	; 0x58
 8005564:	bd70      	pop	{r4, r5, r6, pc}
 8005566:	466a      	mov	r2, sp
 8005568:	f000 f848 	bl	80055fc <_fstat_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	dbec      	blt.n	800554a <__swhatbuf_r+0x12>
 8005570:	9901      	ldr	r1, [sp, #4]
 8005572:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005576:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800557a:	4259      	negs	r1, r3
 800557c:	4159      	adcs	r1, r3
 800557e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005582:	e7eb      	b.n	800555c <__swhatbuf_r+0x24>

08005584 <__smakebuf_r>:
 8005584:	898b      	ldrh	r3, [r1, #12]
 8005586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005588:	079d      	lsls	r5, r3, #30
 800558a:	4606      	mov	r6, r0
 800558c:	460c      	mov	r4, r1
 800558e:	d507      	bpl.n	80055a0 <__smakebuf_r+0x1c>
 8005590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	2301      	movs	r3, #1
 800559a:	6163      	str	r3, [r4, #20]
 800559c:	b002      	add	sp, #8
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	ab01      	add	r3, sp, #4
 80055a2:	466a      	mov	r2, sp
 80055a4:	f7ff ffc8 	bl	8005538 <__swhatbuf_r>
 80055a8:	9900      	ldr	r1, [sp, #0]
 80055aa:	4605      	mov	r5, r0
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff fb0f 	bl	8004bd0 <_malloc_r>
 80055b2:	b948      	cbnz	r0, 80055c8 <__smakebuf_r+0x44>
 80055b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b8:	059a      	lsls	r2, r3, #22
 80055ba:	d4ef      	bmi.n	800559c <__smakebuf_r+0x18>
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e7e3      	b.n	8005590 <__smakebuf_r+0xc>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	6020      	str	r0, [r4, #0]
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	6163      	str	r3, [r4, #20]
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	6120      	str	r0, [r4, #16]
 80055da:	b15b      	cbz	r3, 80055f4 <__smakebuf_r+0x70>
 80055dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e0:	4630      	mov	r0, r6
 80055e2:	f000 f81d 	bl	8005620 <_isatty_r>
 80055e6:	b128      	cbz	r0, 80055f4 <__smakebuf_r+0x70>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	431d      	orrs	r5, r3
 80055f8:	81a5      	strh	r5, [r4, #12]
 80055fa:	e7cf      	b.n	800559c <__smakebuf_r+0x18>

080055fc <_fstat_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d07      	ldr	r5, [pc, #28]	; (800561c <_fstat_r+0x20>)
 8005600:	2300      	movs	r3, #0
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	f7fb f9be 	bl	800098a <_fstat>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	d102      	bne.n	8005618 <_fstat_r+0x1c>
 8005612:	682b      	ldr	r3, [r5, #0]
 8005614:	b103      	cbz	r3, 8005618 <_fstat_r+0x1c>
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	bd38      	pop	{r3, r4, r5, pc}
 800561a:	bf00      	nop
 800561c:	200002a4 	.word	0x200002a4

08005620 <_isatty_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	; (800563c <_isatty_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb f9bd 	bl	80009aa <_isatty>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_isatty_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_isatty_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	200002a4 	.word	0x200002a4

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
