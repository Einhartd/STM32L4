
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006350  08006350  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a200  20000014  0800636c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a214  0800636c  0002a214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001590a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f71  00000000  00000000  0003594e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000388c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029026  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015684  00000000  00000000  00063a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe6c7  00000000  00000000  000790c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  001777dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006250 	.word	0x08006250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006250 	.word	0x08006250

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ee:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <MX_ADC1_Init+0x114>)
 80004f0:	4a3c      	ldr	r2, [pc, #240]	; (80005e4 <MX_ADC1_Init+0x118>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <MX_ADC1_Init+0x114>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <MX_ADC1_Init+0x114>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b37      	ldr	r3, [pc, #220]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000508:	2201      	movs	r2, #1
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050c:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <MX_ADC1_Init+0x114>)
 800050e:	2204      	movs	r2, #4
 8000510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000514:	2200      	movs	r2, #0
 8000516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <MX_ADC1_Init+0x114>)
 800051a:	2201      	movs	r2, #1
 800051c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800051e:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000520:	2202      	movs	r2, #2
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <MX_ADC1_Init+0x114>)
 800052e:	2200      	movs	r2, #0
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000532:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_ADC1_Init+0x114>)
 800053a:	2201      	movs	r2, #1
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000548:	2201      	movs	r2, #1
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000550:	220c      	movs	r2, #12
 8000552:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800055a:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <MX_ADC1_Init+0x114>)
 800055c:	2200      	movs	r2, #0
 800055e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000562:	2201      	movs	r2, #1
 8000564:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000566:	481e      	ldr	r0, [pc, #120]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000568:	f000 fffe 	bl	8001568 <HAL_ADC_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000572:	f000 fb71 	bl	8000c58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	4619      	mov	r1, r3
 8000580:	4817      	ldr	r0, [pc, #92]	; (80005e0 <MX_ADC1_Init+0x114>)
 8000582:	f002 f83d 	bl	8002600 <HAL_ADCEx_MultiModeConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800058c:	f000 fb64 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_ADC1_Init+0x11c>)
 8000592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000594:	2306      	movs	r3, #6
 8000596:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000598:	2307      	movs	r3, #7
 800059a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800059c:	237f      	movs	r3, #127	; 0x7f
 800059e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005a0:	2304      	movs	r3, #4
 80005a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <MX_ADC1_Init+0x114>)
 80005ae:	f001 fa0b 	bl	80019c8 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80005b8:	f000 fb4e 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_ADC1_Init+0x120>)
 80005be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c0:	230c      	movs	r3, #12
 80005c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_ADC1_Init+0x114>)
 80005ca:	f001 f9fd 	bl	80019c8 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80005d4:	f000 fb40 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	; 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000030 	.word	0x20000030
 80005e4:	50040000 	.word	0x50040000
 80005e8:	04300002 	.word	0x04300002
 80005ec:	08600004 	.word	0x08600004

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0ac      	sub	sp, #176	; 0xb0
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2288      	movs	r2, #136	; 0x88
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fe15 	bl	8006240 <memset>
  if(adcHandle->Instance==ADC1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a3c      	ldr	r2, [pc, #240]	; (800070c <HAL_ADC_MspInit+0x11c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d171      	bne.n	8000704 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000624:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800062a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800063a:	2307      	movs	r3, #7
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fbb5 	bl	8003dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800065c:	f000 fafc 	bl	8000c58 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <HAL_ADC_MspInit+0x120>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <HAL_ADC_MspInit+0x120>)
 8000666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <HAL_ADC_MspInit+0x120>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <HAL_ADC_MspInit+0x120>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	4a24      	ldr	r2, [pc, #144]	; (8000710 <HAL_ADC_MspInit+0x120>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <HAL_ADC_MspInit+0x120>)
 8000686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000690:	2303      	movs	r3, #3
 8000692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000696:	230b      	movs	r3, #11
 8000698:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a6:	4619      	mov	r1, r3
 80006a8:	481a      	ldr	r0, [pc, #104]	; (8000714 <HAL_ADC_MspInit+0x124>)
 80006aa:	f002 fb63 	bl	8002d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <HAL_ADC_MspInit+0x12c>)
 80006b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006de:	2220      	movs	r2, #32
 80006e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006ea:	f002 f94b 	bl	8002984 <HAL_DMA_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006f4:	f000 fab0 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_ADC_MspInit+0x128>)
 80006fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_ADC_MspInit+0x128>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000704:	bf00      	nop
 8000706:	37b0      	adds	r7, #176	; 0xb0
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	50040000 	.word	0x50040000
 8000710:	40021000 	.word	0x40021000
 8000714:	48000800 	.word	0x48000800
 8000718:	20000094 	.word	0x20000094
 800071c:	40020008 	.word	0x40020008

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_DMA_Init+0x38>)
 8000728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <MX_DMA_Init+0x38>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6493      	str	r3, [r2, #72]	; 0x48
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_DMA_Init+0x38>)
 8000734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2103      	movs	r1, #3
 8000742:	200f      	movs	r0, #15
 8000744:	f002 f8e7 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000748:	200f      	movs	r0, #15
 800074a:	f002 f900 	bl	800294e <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_GPIO_Init+0x9c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <MX_GPIO_Init+0x9c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_GPIO_Init+0x9c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_GPIO_Init+0x9c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <MX_GPIO_Init+0x9c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_GPIO_Init+0x9c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_GPIO_Init+0x9c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x9c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f640 0104 	movw	r1, #2052	; 0x804
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_GPIO_Init+0xa0>)
 80007c2:	f002 fc81 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0xa0>)
 80007ce:	f002 fc7b 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80007d2:	f641 0304 	movw	r3, #6148	; 0x1804
 80007d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xa0>)
 80007ec:	f002 fac2 	bl	8002d74 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <lcd_cmd>:
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


//	FUNCTIONS

static void lcd_cmd(uint8_t cmd){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	//	Ustawienie linii dc na niska oznacza wysylanie komendy
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <lcd_cmd+0x44>)
 8000812:	f002 fc59 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <lcd_cmd+0x44>)
 800081e:	f002 fc53 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000822:	1df9      	adds	r1, r7, #7
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2201      	movs	r2, #1
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <lcd_cmd+0x48>)
 800082c:	f004 f827 	bl	800487e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <lcd_cmd+0x44>)
 8000838:	f002 fc46 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	48000400 	.word	0x48000400
 8000848:	2000a0e0 	.word	0x2000a0e0

0800084c <lcd_data>:


static void lcd_data(uint8_t data){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	//	Ustawienie linii dc na wysoka oznacza wysylanie danych
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <lcd_data+0x44>)
 800085e:	f002 fc33 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <lcd_data+0x44>)
 800086a:	f002 fc2d 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800086e:	1df9      	adds	r1, r7, #7
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2201      	movs	r2, #1
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <lcd_data+0x48>)
 8000878:	f004 f801 	bl	800487e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <lcd_data+0x44>)
 8000884:	f002 fc20 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400
 8000894:	2000a0e0 	.word	0x2000a0e0

08000898 <lcd_send>:


static void lcd_send(uint16_t value){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	//	0x100 oznacza 9 bit liczby 16-bitowej (0 to wyslanie komendy a 1 to wyslanie danych)
	//	jesli iloczyn binarny bedzie rozny od zera to wykona sie warunek
	if(value & 0x100){
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d005      	beq.n	80008b8 <lcd_send+0x20>
		lcd_cmd(value);
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ffa5 	bl	8000800 <lcd_cmd>
	}
	//	Mamy zero wiec wysylamy dane
	else{
		lcd_data(value);
	}
}
 80008b6:	e004      	b.n	80008c2 <lcd_send+0x2a>
		lcd_data(value);
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ffc5 	bl	800084c <lcd_data>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <lcd_init>:


void lcd_init(void){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	int i;
	//	Display reset (setting low on lcd_rst pin resets the display)
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2104      	movs	r1, #4
 80008d6:	4817      	ldr	r0, [pc, #92]	; (8000934 <lcd_init+0x68>)
 80008d8:	f002 fbf6 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f000 fc23 	bl	8001128 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2104      	movs	r1, #4
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <lcd_init+0x68>)
 80008e8:	f002 fbee 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f000 fc1b 	bl	8001128 <HAL_Delay>

	//	sending starting setup in this loop (lcd_send can distinguish command and data)
	for(i=0; i<sizeof(init_table)/sizeof(uint16_t); i++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e009      	b.n	800090c <lcd_init+0x40>
		lcd_send(init_table[i]);
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <lcd_init+0x6c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffc9 	bl	8000898 <lcd_send>
	for(i=0; i<sizeof(init_table)/sizeof(uint16_t); i++){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b4b      	cmp	r3, #75	; 0x4b
 8000910:	d9f2      	bls.n	80008f8 <lcd_init+0x2c>
	}
	HAL_Delay(200);
 8000912:	20c8      	movs	r0, #200	; 0xc8
 8000914:	f000 fc08 	bl	8001128 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8000918:	2011      	movs	r0, #17
 800091a:	f7ff ff71 	bl	8000800 <lcd_cmd>
	HAL_Delay(120);
 800091e:	2078      	movs	r0, #120	; 0x78
 8000920:	f000 fc02 	bl	8001128 <HAL_Delay>

	//	turning on display
	lcd_cmd(ST7735S_DISPON);
 8000924:	2029      	movs	r0, #41	; 0x29
 8000926:	f7ff ff6b 	bl	8000800 <lcd_cmd>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	48000400 	.word	0x48000400
 8000938:	08006268 	.word	0x08006268

0800093c <lcd_data16>:


static void lcd_data16(uint16_t value){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
/*	lcd_data przyjmuje jako argument 1 bajt danych (jezeli podamy dane dwobajtowa to bardziej znaczace bity zostana pominiete)
 *	by wyslac wartosc 2. bajtowa trzeba oddzielnie wyslac po bajcie zaczynajac od najbardziej znaczacego bitu
 *	pierwsza linia wysyla bajt najbardziej znaczacych bitow
 *	druga linia wysyla pozostaly bajt
 */
	lcd_data(value>>8);
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff7c 	bl	800084c <lcd_data>
	lcd_data(value);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff77 	bl	800084c <lcd_data>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <lcd_set_window>:
//	FUNCTION WHICH SETS THE DRAWING WINDOW

//	CASET - ustawia poczatkowa i koncowa kolumne rysowanego obszaru
//	RASET - ustawia poczatkowy i koncowy wiersz rysowanego obszaru
//	RAMWR - rozpoczyna przesylanie danych do zdefiniowanego obszaru
static void lcd_set_window(int x, int y, int width, int height){
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	603b      	str	r3, [r7, #0]

//	Ustawienie dlugosci na osi x
	lcd_cmd(ST7735S_CASET);
 8000974:	202a      	movs	r0, #42	; 0x2a
 8000976:	f7ff ff43 	bl	8000800 <lcd_cmd>
//	Rejestr wymaga wartosci 16 bitowych jednak spi ogarnia tylko 8 bitow, wiec po to uzywamy funkcji lcd_data16
	lcd_data16(LCD_OFFSET_X + x);	//	punkt poczatkowy
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	b29b      	uxth	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	b29b      	uxth	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ffda 	bl	800093c <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//	punkt koncowy
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	b29a      	uxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b29b      	uxth	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffd1 	bl	800093c <lcd_data16>

//	Ustawienie dlugosci na osi y
	lcd_cmd(ST7735S_RASET);
 800099a:	202b      	movs	r0, #43	; 0x2b
 800099c:	f7ff ff30 	bl	8000800 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//	punkt poczatkowy
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	3302      	adds	r3, #2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffc7 	bl	800093c <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//	punkt koncowy
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ffbc 	bl	800093c <lcd_data16>
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color){
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	4613      	mov	r3, r2
 80009d8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x+y*LCD_WIDTH] = color;
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	4905      	ldr	r1, [pc, #20]	; (8000a00 <lcd_put_pixel+0x34>)
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc

08000a04 <lcd_copy>:


void lcd_copy(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	lcd_set_window(0,0,LCD_WIDTH, LCD_HEIGHT);
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	22a0      	movs	r2, #160	; 0xa0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ffa9 	bl	8000966 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8000a14:	202c      	movs	r0, #44	; 0x2c
 8000a16:	f7ff fef3 	bl	8000800 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <lcd_copy+0x40>)
 8000a22:	f002 fb51 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <lcd_copy+0x40>)
 8000a2e:	f002 fb4b 	bl	80030c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000a32:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000a36:	4904      	ldr	r1, [pc, #16]	; (8000a48 <lcd_copy+0x44>)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <lcd_copy+0x48>)
 8000a3a:	f004 f88f 	bl	8004b5c <HAL_SPI_Transmit_DMA>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	48000400 	.word	0x48000400
 8000a48:	200000dc 	.word	0x200000dc
 8000a4c:	2000a0e0 	.word	0x2000a0e0

08000a50 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <lcd_transfer_done+0x14>)
 8000a5c:	f002 fb34 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000400 	.word	0x48000400

08000a68 <HAL_SPI_TxCpltCallback>:
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);

  return 1;
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if(hspi==&hspi2){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_SPI_TxCpltCallback+0x1c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d101      	bne.n	8000a7c <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 8000a78:	f7ff ffea 	bl	8000a50 <lcd_transfer_done>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000a0e0 	.word	0x2000a0e0

08000a88 <measure_potentiometers>:
}

*/

//	BALL MOVING FUNCS
void measure_potentiometers(uint16_t* buffer){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a90:	217f      	movs	r1, #127	; 0x7f
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <measure_potentiometers+0x24>)
 8000a94:	f001 fd54 	bl	8002540 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, 2);
 8000a98:	2202      	movs	r2, #2
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <measure_potentiometers+0x24>)
 8000a9e:	f000 feb9 	bl	8001814 <HAL_ADC_Start_DMA>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000030 	.word	0x20000030

08000ab0 <calc_ball_position>:

uint16_t* calc_ball_position(uint16_t* buffer){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint16_t buf[2] = {buffer[0], buffer[1]};
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	81bb      	strh	r3, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	885b      	ldrh	r3, [r3, #2]
 8000ac2:	81fb      	strh	r3, [r7, #14]
	static uint16_t position[2] = {0};

	if(buf[0]/26>=LCD_WIDTH-RADIUS-1){
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	f640 72d7 	movw	r2, #4055	; 0xfd7
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d903      	bls.n	8000ad6 <calc_ball_position+0x26>
		position[0] = LCD_WIDTH-RADIUS-1;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <calc_ball_position+0x7c>)
 8000ad0:	229c      	movs	r2, #156	; 0x9c
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	e00e      	b.n	8000af4 <calc_ball_position+0x44>
	}
	else if(buf[0]<=99){
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	2b63      	cmp	r3, #99	; 0x63
 8000ada:	d803      	bhi.n	8000ae4 <calc_ball_position+0x34>
		position[0] = RADIUS;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <calc_ball_position+0x7c>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	801a      	strh	r2, [r3, #0]
 8000ae2:	e007      	b.n	8000af4 <calc_ball_position+0x44>
	}
	else{
		position[0] = buf[0] / 26;
 8000ae4:	89bb      	ldrh	r3, [r7, #12]
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <calc_ball_position+0x80>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <calc_ball_position+0x7c>)
 8000af2:	801a      	strh	r2, [r3, #0]
	}


	if(buf[1]/32>=LCD_HEIGHT-RADIUS-1){
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8000afa:	d303      	bcc.n	8000b04 <calc_ball_position+0x54>
		position[1] = LCD_HEIGHT-RADIUS-1;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <calc_ball_position+0x7c>)
 8000afe:	227c      	movs	r2, #124	; 0x7c
 8000b00:	805a      	strh	r2, [r3, #2]
 8000b02:	e00b      	b.n	8000b1c <calc_ball_position+0x6c>
	}
	else if(buf[1]<=90){
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	2b5a      	cmp	r3, #90	; 0x5a
 8000b08:	d803      	bhi.n	8000b12 <calc_ball_position+0x62>
		position[1] = RADIUS;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <calc_ball_position+0x7c>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	805a      	strh	r2, [r3, #2]
 8000b10:	e004      	b.n	8000b1c <calc_ball_position+0x6c>
	}
	else{
		position[1] = buf[1] / 32;
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	095b      	lsrs	r3, r3, #5
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <calc_ball_position+0x7c>)
 8000b1a:	805a      	strh	r2, [r3, #2]
	}
	return position;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <calc_ball_position+0x7c>)
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2000a0dc 	.word	0x2000a0dc
 8000b30:	4ec4ec4f 	.word	0x4ec4ec4f

08000b34 <draw_ball_scene>:

void draw_ball_scene(uint16_t* position){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	hagl_fill_rectangle(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT, BLACK);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	22a0      	movs	r2, #160	; 0xa0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2000      	movs	r0, #0
 8000b48:	f005 fa24 	bl	8005f94 <hagl_fill_rectangle>
	hagl_fill_circle(position[0], position[1], RADIUS, WHITE);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b218      	sxth	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3302      	adds	r3, #2
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b219      	sxth	r1, r3
 8000b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5e:	2203      	movs	r2, #3
 8000b60:	f005 fabc 	bl	80060dc <hagl_fill_circle>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 fa64 	bl	800103e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f81d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f7ff fdef 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7e:	f7ff fdcf 	bl	8000720 <MX_DMA_Init>
  MX_SPI2_Init();
 8000b82:	f000 f86f 	bl	8000c64 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000b86:	f000 f9a5 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b8a:	f7ff fc9f 	bl	80004cc <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//	BUFFER
  uint16_t value[2] = {0};
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 //ADC (PHOTORESISTOR)
  measure_photoresistor(value);
  uint16_t length = 0;
*/

  lcd_init();
 8000b92:	f7ff fe9b 	bl	80008cc <lcd_init>
	  draw_progress_bar(length);
	  lcd_copy();
*/

//	START BALL MOVING
	  measure_potentiometers(value);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff75 	bl	8000a88 <measure_potentiometers>
	  uint16_t* ball_position = calc_ball_position(value);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff85 	bl	8000ab0 <calc_ball_position>
 8000ba6:	6078      	str	r0, [r7, #4]
	  draw_ball_scene(ball_position);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffc3 	bl	8000b34 <draw_ball_scene>
	  lcd_copy();
 8000bae:	f7ff ff29 	bl	8000a04 <lcd_copy>
  {
 8000bb2:	e7f0      	b.n	8000b96 <main+0x2a>

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b096      	sub	sp, #88	; 0x58
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2244      	movs	r2, #68	; 0x44
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fb3c 	bl	8006240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bda:	f002 fa9b 	bl	8003114 <HAL_PWREx_ControlVoltageScaling>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000be4:	f000 f838 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000be8:	2310      	movs	r3, #16
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf4:	2360      	movs	r3, #96	; 0x60
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c04:	2328      	movs	r3, #40	; 0x28
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fad1 	bl	80031c0 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c24:	f000 f818 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fe99 	bl	8003978 <HAL_RCC_ClockConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c4c:	f000 f804 	bl	8000c58 <Error_Handler>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3758      	adds	r7, #88	; 0x58
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_SPI2_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_SPI2_Init+0x74>)
 8000cc4:	f003 fd38 	bl	8004738 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f7ff ffc3 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000a0e0 	.word	0x2000a0e0
 8000cdc:	40003800 	.word	0x40003800

08000ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a3a      	ldr	r2, [pc, #232]	; (8000de8 <HAL_SPI_MspInit+0x108>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d16d      	bne.n	8000dde <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a39      	ldr	r2, [pc, #228]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a33      	ldr	r2, [pc, #204]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_SPI_MspInit+0x10c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4822      	ldr	r0, [pc, #136]	; (8000df0 <HAL_SPI_MspInit+0x110>)
 8000d66:	f002 f805 	bl	8002d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	481b      	ldr	r0, [pc, #108]	; (8000df4 <HAL_SPI_MspInit+0x114>)
 8000d88:	f001 fff4 	bl	8002d74 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_SPI_MspInit+0x11c>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dc4:	f001 fdde 	bl	8002984 <HAL_DMA_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8000dce:	f7ff ff43 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dd6:	655a      	str	r2, [r3, #84]	; 0x54
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_SPI_MspInit+0x118>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40003800 	.word	0x40003800
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48000400 	.word	0x48000400
 8000df8:	2000a144 	.word	0x2000a144
 8000dfc:	40020058 	.word	0x40020058

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_MspInit+0x44>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x44>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f928 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA1_Channel5_IRQHandler+0x10>)
 8000ea2:	f001 fe87 	bl	8002bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000a144 	.word	0x2000a144

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_USART2_UART_Init+0x5c>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f18:	f004 f90e 	bl	8005138 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff fe99 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000a18c 	.word	0x2000a18c
 8000f30:	40004400 	.word	0x40004400

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ac      	sub	sp, #176	; 0xb0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2288      	movs	r2, #136	; 0x88
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 f973 	bl	8006240 <memset>
  if(uartHandle->Instance==USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_UART_MspInit+0xb0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13b      	bne.n	8000fdc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 ff25 	bl	8003dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff fe6c 	bl	8000c58 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f001 fecc 	bl	8002d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	37b0      	adds	r7, #176	; 0xb0
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40021000 	.word	0x40021000

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff0:	f7ff ff5e 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f005 f8ed 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fda5 	bl	8000b6c <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001030:	08006358 	.word	0x08006358
  ldr r2, =_sbss
 8001034:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001038:	2000a214 	.word	0x2000a214

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>

0800103e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f001 fc59 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f80e 	bl	8001070 <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e001      	b.n	8001064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001060:	f7ff fece 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001064:	79fb      	ldrb	r3, [r7, #7]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d023      	beq.n	80010cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_InitTick+0x70>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_InitTick+0x6c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fc65 	bl	800296a <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d809      	bhi.n	80010c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f001 fc2f 	bl	8002916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0x74>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e007      	b.n	80010d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e004      	b.n	80010d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e001      	b.n	80010d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	2000a210 	.word	0x2000a210

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000a210 	.word	0x2000a210

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3360      	adds	r3, #96	; 0x60
 80011ea:	461a      	mov	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <LL_ADC_SetOffset+0x44>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	4313      	orrs	r3, r2
 8001208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	03fff000 	.word	0x03fff000

08001220 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3360      	adds	r3, #96	; 0x60
 800122e:	461a      	mov	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3360      	adds	r3, #96	; 0x60
 800125c:	461a      	mov	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3330      	adds	r3, #48	; 0x30
 80012b8:	461a      	mov	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	4413      	add	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	211f      	movs	r1, #31
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0e9b      	lsrs	r3, r3, #26
 80012e0:	f003 011f 	and.w	r1, r3, #31
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	431a      	orrs	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3314      	adds	r3, #20
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	0e5b      	lsrs	r3, r3, #25
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0d1b      	lsrs	r3, r3, #20
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	2107      	movs	r1, #7
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	0d1b      	lsrs	r3, r3, #20
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0318 	and.w	r3, r3, #24
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <LL_ADC_SetChannelSingleDiff+0x44>)
 800137c:	40d9      	lsrs	r1, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	400b      	ands	r3, r1
 8001382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	0007ffff 	.word	0x0007ffff

080013a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f4:	d101      	bne.n	80013fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800141c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001444:	d101      	bne.n	800144a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	f043 0202 	orr.w	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <LL_ADC_IsEnabled+0x18>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <LL_ADC_IsEnabled+0x1a>
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_IsDisableOngoing+0x18>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_IsDisableOngoing+0x1a>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b04      	cmp	r3, #4
 800152e:	d101      	bne.n	8001534 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b08      	cmp	r3, #8
 8001554:	d101      	bne.n	800155a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e136      	b.n	80017f0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	2b00      	cmp	r3, #0
 800158e:	d109      	bne.n	80015a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff f82d 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff19 	bl	80013e0 <LL_ADC_IsDeepPowerDownEnabled>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff feff 	bl	80013bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff34 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff18 	bl	8001408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015d8:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <HAL_ADC_Init+0x290>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	4a87      	ldr	r2, [pc, #540]	; (80017fc <HAL_ADC_Init+0x294>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	3301      	adds	r3, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f9      	bne.n	80015ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff16 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10d      	bne.n	8001626 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0210 	orr.w	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff76 	bl	800151c <LL_ADC_REG_IsConversionOngoing>
 8001630:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80cf 	bne.w	80017de <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80cb 	bne.w	80017de <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff23 	bl	80014a8 <LL_ADC_IsEnabled>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d115      	bne.n	8001694 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001668:	4865      	ldr	r0, [pc, #404]	; (8001800 <HAL_ADC_Init+0x298>)
 800166a:	f7ff ff1d 	bl	80014a8 <LL_ADC_IsEnabled>
 800166e:	4604      	mov	r4, r0
 8001670:	4864      	ldr	r0, [pc, #400]	; (8001804 <HAL_ADC_Init+0x29c>)
 8001672:	f7ff ff19 	bl	80014a8 <LL_ADC_IsEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	431c      	orrs	r4, r3
 800167a:	4863      	ldr	r0, [pc, #396]	; (8001808 <HAL_ADC_Init+0x2a0>)
 800167c:	f7ff ff14 	bl	80014a8 <LL_ADC_IsEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	4323      	orrs	r3, r4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4619      	mov	r1, r3
 800168e:	485f      	ldr	r0, [pc, #380]	; (800180c <HAL_ADC_Init+0x2a4>)
 8001690:	f7ff fd6e 	bl	8001170 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e5b      	ldrb	r3, [r3, #25]
 8001698:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800169e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	3b01      	subs	r3, #1
 80016c8:	045b      	lsls	r3, r3, #17
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_ADC_Init+0x2a8>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff09 	bl	800151c <LL_ADC_REG_IsConversionOngoing>
 800170a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff16 	bl	8001542 <LL_ADC_INJ_IsConversionOngoing>
 8001716:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d13d      	bne.n	800179a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d13a      	bne.n	800179a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001728:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001730:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001740:	f023 0302 	bic.w	r3, r3, #2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	430b      	orrs	r3, r1
 800174c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001754:	2b01      	cmp	r3, #1
 8001756:	d118      	bne.n	800178a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800177a:	430a      	orrs	r2, r1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	e007      	b.n	800179a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10c      	bne.n	80017bc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f023 010f 	bic.w	r1, r3, #15
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ba:	e007      	b.n	80017cc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020f 	bic.w	r2, r2, #15
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
 80017dc:	e007      	b.n	80017ee <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3724      	adds	r7, #36	; 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	20000000 	.word	0x20000000
 80017fc:	053e2d63 	.word	0x053e2d63
 8001800:	50040000 	.word	0x50040000
 8001804:	50040100 	.word	0x50040100
 8001808:	50040200 	.word	0x50040200
 800180c:	50040300 	.word	0x50040300
 8001810:	fff0c007 	.word	0xfff0c007

08001814 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001820:	4853      	ldr	r0, [pc, #332]	; (8001970 <HAL_ADC_Start_DMA+0x15c>)
 8001822:	f7ff fdbd 	bl	80013a0 <LL_ADC_GetMultimode>
 8001826:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe75 	bl	800151c <LL_ADC_REG_IsConversionOngoing>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 8093 	bne.w	8001960 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Start_DMA+0x34>
 8001844:	2302      	movs	r3, #2
 8001846:	e08e      	b.n	8001966 <HAL_ADC_Start_DMA+0x152>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a47      	ldr	r2, [pc, #284]	; (8001974 <HAL_ADC_Start_DMA+0x160>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d008      	beq.n	800186c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d002      	beq.n	800186c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d172      	bne.n	8001952 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fc9b 	bl	80021a8 <ADC_Enable>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d165      	bne.n	8001948 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_ADC_Start_DMA+0x164>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d002      	beq.n	80018a0 <HAL_ADC_Start_DMA+0x8c>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e000      	b.n	80018a2 <HAL_ADC_Start_DMA+0x8e>
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_ADC_Start_DMA+0x168>)
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d002      	beq.n	80018b0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f023 0206 	bic.w	r2, r3, #6
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_ADC_Start_DMA+0x16c>)
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_ADC_Start_DMA+0x170>)
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_ADC_Start_DMA+0x174>)
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	221c      	movs	r2, #28
 80018fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0210 	orr.w	r2, r2, #16
 8001912:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3340      	adds	r3, #64	; 0x40
 800192e:	4619      	mov	r1, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f001 f8de 	bl	8002af4 <HAL_DMA_Start_IT>
 8001938:	4603      	mov	r3, r0
 800193a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fdd7 	bl	80014f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001946:	e00d      	b.n	8001964 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001950:	e008      	b.n	8001964 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800195e:	e001      	b.n	8001964 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001960:	2302      	movs	r3, #2
 8001962:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001964:	7dfb      	ldrb	r3, [r7, #23]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	50040300 	.word	0x50040300
 8001974:	50040200 	.word	0x50040200
 8001978:	50040100 	.word	0x50040100
 800197c:	50040000 	.word	0x50040000
 8001980:	08002373 	.word	0x08002373
 8001984:	0800244b 	.word	0x0800244b
 8001988:	08002467 	.word	0x08002467

0800198c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b6      	sub	sp, #216	; 0xd8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x22>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e3c7      	b.n	800217a <HAL_ADC_ConfigChannel+0x7b2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fd90 	bl	800151c <LL_ADC_REG_IsConversionOngoing>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 83a8 	bne.w	8002154 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d824      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	3b02      	subs	r3, #2
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d81b      	bhi.n	8001a4e <HAL_ADC_ConfigChannel+0x86>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <HAL_ADC_ConfigChannel+0x54>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a35 	.word	0x08001a35
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a45 	.word	0x08001a45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	220c      	movs	r2, #12
 8001a30:	605a      	str	r2, [r3, #4]
          break;
 8001a32:	e011      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2212      	movs	r2, #18
 8001a38:	605a      	str	r2, [r3, #4]
          break;
 8001a3a:	e00d      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2218      	movs	r2, #24
 8001a40:	605a      	str	r2, [r3, #4]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	605a      	str	r2, [r3, #4]
          break;
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2206      	movs	r2, #6
 8001a52:	605a      	str	r2, [r3, #4]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fc1f 	bl	80012a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fd54 	bl	800151c <LL_ADC_REG_IsConversionOngoing>
 8001a74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd60 	bl	8001542 <LL_ADC_INJ_IsConversionOngoing>
 8001a82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 81a6 	bne.w	8001ddc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 81a1 	bne.w	8001ddc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7ff fc2a 	bl	8001300 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d00a      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ade:	f7ff fb7b 	bl	80011d8 <LL_ADC_SetOffset>
 8001ae2:	e17b      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fb98 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x148>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fb8d 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 021f 	and.w	r2, r3, #31
 8001b0e:	e01e      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x186>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fb82 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x19e>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	e018      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1d0>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e004      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb51 	bl	800124c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fb35 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x20e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb2a 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	e01e      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x24c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fb1f 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e004      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x264>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	e018      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x296>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d106      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff faee 	bl	800124c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2102      	movs	r1, #2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fad2 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x2d4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fac7 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	f003 021f 	and.w	r2, r3, #31
 8001c9a:	e01e      	b.n	8001cda <HAL_ADC_ConfigChannel+0x312>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fabc 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e004      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x32a>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	e016      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x358>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e004      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fa8d 	bl	800124c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2103      	movs	r1, #3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fa71 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10a      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x396>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa66 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	e017      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x3c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2103      	movs	r1, #3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa5b 	bl	8001220 <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e003      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x3de>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	e011      	b.n	8001dca <HAL_ADC_ConfigChannel+0x402>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d106      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fa38 	bl	800124c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fb61 	bl	80014a8 <LL_ADC_IsEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 813f 	bne.w	800206c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f7ff faac 	bl	8001358 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_ADC_ConfigChannel+0x678>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f040 8130 	bne.w	800206c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x46c>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e019      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4a0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	bf94      	ite	ls
 8001e62:	2301      	movls	r3, #1
 8001e64:	2300      	movhi	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d079      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x4c0>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	069b      	lsls	r3, r3, #26
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e86:	e015      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x4ec>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	069b      	lsls	r3, r3, #26
 8001eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x50c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	e017      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x53c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e003      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	ea42 0103 	orr.w	r1, r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x562>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	e018      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x594>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e003      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	e080      	b.n	8002062 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x5b4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	069b      	lsls	r3, r3, #26
 8001f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7a:	e015      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x5e0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x600>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	e017      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x630>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	61fb      	str	r3, [r7, #28]
  return result;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e003      	b.n	8001fec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	ea42 0103 	orr.w	r1, r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x65c>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	3b1e      	subs	r3, #30
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002022:	e01d      	b.n	8002060 <HAL_ADC_ConfigChannel+0x698>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	613b      	str	r3, [r7, #16]
  return result;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e005      	b.n	800204c <HAL_ADC_ConfigChannel+0x684>
 8002040:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	3b1e      	subs	r3, #30
 800205a:	051b      	lsls	r3, r3, #20
 800205c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002060:	430b      	orrs	r3, r1
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6892      	ldr	r2, [r2, #8]
 8002066:	4619      	mov	r1, r3
 8002068:	f7ff f94a 	bl	8001300 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b44      	ldr	r3, [pc, #272]	; (8002184 <HAL_ADC_ConfigChannel+0x7bc>)
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d07a      	beq.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002078:	4843      	ldr	r0, [pc, #268]	; (8002188 <HAL_ADC_ConfigChannel+0x7c0>)
 800207a:	f7ff f89f 	bl	80011bc <LL_ADC_GetCommonPathInternalCh>
 800207e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_ADC_ConfigChannel+0x7c4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d12c      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800208c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d126      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3c      	ldr	r2, [pc, #240]	; (8002190 <HAL_ADC_ConfigChannel+0x7c8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x6e4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_ADC_ConfigChannel+0x7cc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d15d      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b4:	4619      	mov	r1, r3
 80020b6:	4834      	ldr	r0, [pc, #208]	; (8002188 <HAL_ADC_ConfigChannel+0x7c0>)
 80020b8:	f7ff f86d 	bl	8001196 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_ADC_ConfigChannel+0x7d0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	4a36      	ldr	r2, [pc, #216]	; (800219c <HAL_ADC_ConfigChannel+0x7d4>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020d6:	e002      	b.n	80020de <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e4:	e040      	b.n	8002168 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d118      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x75a>
 80020f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d112      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <HAL_ADC_ConfigChannel+0x7c8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x748>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_ADC_ConfigChannel+0x7cc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12d      	bne.n	800216c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002118:	4619      	mov	r1, r3
 800211a:	481b      	ldr	r0, [pc, #108]	; (8002188 <HAL_ADC_ConfigChannel+0x7c0>)
 800211c:	f7ff f83b 	bl	8001196 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002120:	e024      	b.n	800216c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d120      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800212c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_ADC_ConfigChannel+0x7c8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d115      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800214a:	4619      	mov	r1, r3
 800214c:	480e      	ldr	r0, [pc, #56]	; (8002188 <HAL_ADC_ConfigChannel+0x7c0>)
 800214e:	f7ff f822 	bl	8001196 <LL_ADC_SetCommonPathInternalCh>
 8002152:	e00c      	b.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002166:	e002      	b.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002168:	bf00      	nop
 800216a:	e000      	b.n	800216e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800217a:	4618      	mov	r0, r3
 800217c:	37d8      	adds	r7, #216	; 0xd8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	80080000 	.word	0x80080000
 8002188:	50040300 	.word	0x50040300
 800218c:	c7520000 	.word	0xc7520000
 8002190:	50040000 	.word	0x50040000
 8002194:	50040200 	.word	0x50040200
 8002198:	20000000 	.word	0x20000000
 800219c:	053e2d63 	.word	0x053e2d63
 80021a0:	cb840000 	.word	0xcb840000
 80021a4:	80000001 	.word	0x80000001

080021a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f975 	bl	80014a8 <LL_ADC_IsEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d169      	bne.n	8002298 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <ADC_Enable+0xfc>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e055      	b.n	800229a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f930 	bl	8001458 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021f8:	482b      	ldr	r0, [pc, #172]	; (80022a8 <ADC_Enable+0x100>)
 80021fa:	f7fe ffdf 	bl	80011bc <LL_ADC_GetCommonPathInternalCh>
 80021fe:	4603      	mov	r3, r0
 8002200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <ADC_Enable+0x104>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <ADC_Enable+0x108>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002222:	e002      	b.n	800222a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3b01      	subs	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002230:	f7fe ff6e 	bl	8001110 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002236:	e028      	b.n	800228a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f933 	bl	80014a8 <LL_ADC_IsEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f903 	bl	8001458 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002252:	f7fe ff5d 	bl	8001110 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d914      	bls.n	800228a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d00d      	beq.n	800228a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e007      	b.n	800229a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d1cf      	bne.n	8002238 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	8000003f 	.word	0x8000003f
 80022a8:	50040300 	.word	0x50040300
 80022ac:	20000000 	.word	0x20000000
 80022b0:	053e2d63 	.word	0x053e2d63

080022b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f904 	bl	80014ce <LL_ADC_IsDisableOngoing>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f8eb 	bl	80014a8 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d047      	beq.n	8002368 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d144      	bne.n	8002368 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030d 	and.w	r3, r3, #13
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10c      	bne.n	8002306 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f8c5 	bl	8001480 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2203      	movs	r2, #3
 80022fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022fe:	f7fe ff07 	bl	8001110 <HAL_GetTick>
 8002302:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002304:	e029      	b.n	800235a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e023      	b.n	800236a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002322:	f7fe fef5 	bl	8001110 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d914      	bls.n	800235a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e007      	b.n	800236a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1dc      	bne.n	8002322 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002388:	2b00      	cmp	r3, #0
 800238a:	d14b      	bne.n	8002424 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d021      	beq.n	80023ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff69 	bl	8001282 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d12b      	bne.n	800241c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11f      	bne.n	800241c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
 80023e8:	e018      	b.n	800241c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fab5 	bl	800198c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002422:	e00e      	b.n	8002442 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fabf 	bl	80019b4 <HAL_ADC_ErrorCallback>
}
 8002436:	e004      	b.n	8002442 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff faa1 	bl	80019a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff fa91 	bl	80019b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <LL_ADC_IsEnabled>:
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_IsEnabled+0x18>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_IsEnabled+0x1a>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_StartCalibration>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024dc:	4313      	orrs	r3, r2
 80024de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002506:	d101      	bne.n	800250c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_REG_IsConversionOngoing>:
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d101      	bne.n	8002532 <LL_ADC_REG_IsConversionOngoing+0x18>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_ADCEx_Calibration_Start+0x1c>
 8002558:	2302      	movs	r3, #2
 800255a:	e04d      	b.n	80025f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fea5 	bl	80022b4 <ADC_Disable>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d136      	bne.n	80025e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	f043 0202 	orr.w	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff96 	bl	80024c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002594:	e014      	b.n	80025c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80025a2:	d30d      	bcc.n	80025c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f023 0312 	bic.w	r3, r3, #18
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01b      	b.n	80025f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff94 	bl	80024f2 <LL_ADC_IsCalibrationOnGoing>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e2      	bne.n	8002596 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f023 0303 	bic.w	r3, r3, #3
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
 80025e0:	e005      	b.n	80025ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b09f      	sub	sp, #124	; 0x7c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800261a:	2302      	movs	r3, #2
 800261c:	e093      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002626:	2300      	movs	r3, #0
 8002628:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800262a:	2300      	movs	r3, #0
 800262c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	e001      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e072      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff59 	bl	800251a <LL_ADC_REG_IsConversionOngoing>
 8002668:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff53 	bl	800251a <LL_ADC_REG_IsConversionOngoing>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d154      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800267a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800267c:	2b00      	cmp	r3, #0
 800267e:	d151      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002682:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02c      	beq.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269e:	035b      	lsls	r3, r3, #13
 80026a0:	430b      	orrs	r3, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a8:	4829      	ldr	r0, [pc, #164]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026aa:	f7ff fef6 	bl	800249a <LL_ADC_IsEnabled>
 80026ae:	4604      	mov	r4, r0
 80026b0:	4828      	ldr	r0, [pc, #160]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026b2:	f7ff fef2 	bl	800249a <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	431c      	orrs	r4, r3
 80026ba:	4828      	ldr	r0, [pc, #160]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026bc:	f7ff feed 	bl	800249a <LL_ADC_IsEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4323      	orrs	r3, r4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d137      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026d0:	f023 030f 	bic.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	430a      	orrs	r2, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e4:	e028      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f2:	4817      	ldr	r0, [pc, #92]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026f4:	f7ff fed1 	bl	800249a <LL_ADC_IsEnabled>
 80026f8:	4604      	mov	r4, r0
 80026fa:	4816      	ldr	r0, [pc, #88]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026fc:	f7ff fecd 	bl	800249a <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	431c      	orrs	r4, r3
 8002704:	4815      	ldr	r0, [pc, #84]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002706:	f7ff fec8 	bl	800249a <LL_ADC_IsEnabled>
 800270a:	4603      	mov	r3, r0
 800270c:	4323      	orrs	r3, r4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d112      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002720:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002722:	e009      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002736:	e000      	b.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002738:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002742:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002746:	4618      	mov	r0, r3
 8002748:	377c      	adds	r7, #124	; 0x7c
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	50040000 	.word	0x50040000
 8002754:	50040100 	.word	0x50040100
 8002758:	50040300 	.word	0x50040300
 800275c:	50040200 	.word	0x50040200

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e098      	b.n	8002ac8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <HAL_DMA_Init+0x150>)
 800299e:	429a      	cmp	r2, r3
 80029a0:	d80f      	bhi.n	80029c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <HAL_DMA_Init+0x154>)
 80029aa:	4413      	add	r3, r2
 80029ac:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_DMA_Init+0x158>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	009a      	lsls	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_DMA_Init+0x15c>)
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
 80029c0:	e00e      	b.n	80029e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_DMA_Init+0x160>)
 80029ca:	4413      	add	r3, r2
 80029cc:	4a43      	ldr	r2, [pc, #268]	; (8002adc <HAL_DMA_Init+0x158>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a42      	ldr	r2, [pc, #264]	; (8002ae8 <HAL_DMA_Init+0x164>)
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3a:	d039      	beq.n	8002ab0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <HAL_DMA_Init+0x15c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11a      	bne.n	8002a7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_DMA_Init+0x168>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	210f      	movs	r1, #15
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4924      	ldr	r1, [pc, #144]	; (8002aec <HAL_DMA_Init+0x168>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_DMA_Init+0x168>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	f003 031c 	and.w	r3, r3, #28
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	491d      	ldr	r1, [pc, #116]	; (8002aec <HAL_DMA_Init+0x168>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
 8002a7a:	e019      	b.n	8002ab0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_DMA_Init+0x16c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f003 031c 	and.w	r3, r3, #28
 8002a88:	210f      	movs	r1, #15
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4917      	ldr	r1, [pc, #92]	; (8002af0 <HAL_DMA_Init+0x16c>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_DMA_Init+0x16c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 031c 	and.w	r3, r3, #28
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	4911      	ldr	r1, [pc, #68]	; (8002af0 <HAL_DMA_Init+0x16c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40020407 	.word	0x40020407
 8002ad8:	bffdfff8 	.word	0xbffdfff8
 8002adc:	cccccccd 	.word	0xcccccccd
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	bffdfbf8 	.word	0xbffdfbf8
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	400200a8 	.word	0x400200a8
 8002af0:	400204a8 	.word	0x400204a8

08002af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e04b      	b.n	8002bac <HAL_DMA_Start_IT+0xb8>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13a      	bne.n	8002b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f8e0 	bl	8002d12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e005      	b.n	8002baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	f003 031c 	and.w	r3, r3, #28
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d026      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x7a>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d021      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f003 021c 	and.w	r2, r3, #28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2104      	movs	r1, #4
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d071      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	e06c      	b.n	8002d08 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f003 031c 	and.w	r3, r3, #28
 8002c36:	2202      	movs	r2, #2
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02e      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xec>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d029      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 020a 	bic.w	r2, r2, #10
 8002c68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f003 021c 	and.w	r2, r3, #28
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2102      	movs	r1, #2
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d038      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c9e:	e033      	b.n	8002d08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f003 031c 	and.w	r3, r3, #28
 8002ca8:	2208      	movs	r2, #8
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02a      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d025      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 020e 	bic.w	r2, r2, #14
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 021c 	and.w	r2, r3, #28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
}
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f003 021c 	and.w	r2, r3, #28
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d108      	bne.n	8002d56 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d54:	e007      	b.n	8002d66 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d82:	e17f      	b.n	8003084 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8171 	beq.w	800307e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d005      	beq.n	8002db4 <HAL_GPIO_Init+0x40>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d130      	bne.n	8002e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dea:	2201      	movs	r2, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 0201 	and.w	r2, r3, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d118      	bne.n	8002e54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80ac 	beq.w	800307e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	4a5e      	ldr	r2, [pc, #376]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6613      	str	r3, [r2, #96]	; 0x60
 8002f32:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3e:	4a5a      	ldr	r2, [pc, #360]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f68:	d025      	beq.n	8002fb6 <HAL_GPIO_Init+0x242>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_GPIO_Init+0x338>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01f      	beq.n	8002fb2 <HAL_GPIO_Init+0x23e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <HAL_GPIO_Init+0x33c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x23a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4d      	ldr	r2, [pc, #308]	; (80030b4 <HAL_GPIO_Init+0x340>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x236>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_GPIO_Init+0x344>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x232>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <HAL_GPIO_Init+0x348>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x22e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <HAL_GPIO_Init+0x34c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x22a>
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x244>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fc8:	4937      	ldr	r1, [pc, #220]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ffa:	4a32      	ldr	r2, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003000:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003024:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_GPIO_Init+0x350>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003078:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <HAL_GPIO_Init+0x350>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	3301      	adds	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	f47f ae78 	bne.w	8002d84 <HAL_GPIO_Init+0x10>
  }
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010000 	.word	0x40010000
 80030ac:	48000400 	.word	0x48000400
 80030b0:	48000800 	.word	0x48000800
 80030b4:	48000c00 	.word	0x48000c00
 80030b8:	48001000 	.word	0x48001000
 80030bc:	48001400 	.word	0x48001400
 80030c0:	48001800 	.word	0x48001800
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_PWREx_GetVoltageRange+0x18>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000

08003114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d130      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d038      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2232      	movs	r2, #50	; 0x32
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003158:	e002      	b.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316c:	d102      	bne.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f2      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d110      	bne.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e00f      	b.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d007      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40007000 	.word	0x40007000
 80031b8:	20000000 	.word	0x20000000
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e3ca      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4b97      	ldr	r3, [pc, #604]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4b94      	ldr	r3, [pc, #592]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80e4 	beq.w	80033bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_RCC_OscConfig+0x4a>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f040 808b 	bne.w	8003318 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 8087 	bne.w	8003318 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320a:	4b89      	ldr	r3, [pc, #548]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e3a2      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	4b82      	ldr	r3, [pc, #520]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_RCC_OscConfig+0x7c>
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323a:	e005      	b.n	8003248 <HAL_RCC_OscConfig+0x88>
 800323c:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	4293      	cmp	r3, r2
 800324a:	d223      	bcs.n	8003294 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fd55 	bl	8003d00 <RCC_SetFlashLatencyFromMSIRange>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e383      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003260:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	496d      	ldr	r1, [pc, #436]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327e:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	4968      	ldr	r1, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
 8003292:	e025      	b.n	80032e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4960      	ldr	r1, [pc, #384]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	495b      	ldr	r1, [pc, #364]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd15 	bl	8003d00 <RCC_SetFlashLatencyFromMSIRange>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e343      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e0:	f000 fc4a 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4950      	ldr	r1, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_RCC_OscConfig+0x278>)
 80032fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003300:	4b4e      	ldr	r3, [pc, #312]	; (800343c <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd feb3 	bl	8001070 <HAL_InitTick>
 800330a:	4603      	mov	r3, r0
 800330c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d052      	beq.n	80033ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	e327      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d032      	beq.n	8003386 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332c:	f7fd fef0 	bl	8001110 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003334:	f7fd feec 	bl	8001110 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e310      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003346:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003358:	f043 0308 	orr.w	r3, r3, #8
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4931      	ldr	r1, [pc, #196]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003370:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	492c      	ldr	r1, [pc, #176]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
 8003384:	e01a      	b.n	80033bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003392:	f7fd febd 	bl	8001110 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800339a:	f7fd feb9 	bl	8001110 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e2dd      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x1da>
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d074      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x21a>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d10e      	bne.n	80033f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d10b      	bne.n	80033f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d064      	beq.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d160      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e2ba      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x24a>
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	e026      	b.n	8003458 <HAL_RCC_OscConfig+0x298>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003412:	d115      	bne.n	8003440 <HAL_RCC_OscConfig+0x280>
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800341a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a02      	ldr	r2, [pc, #8]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x298>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	08006300 	.word	0x08006300
 8003438:	20000000 	.word	0x20000000
 800343c:	20000004 	.word	0x20000004
 8003440:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a9f      	ldr	r2, [pc, #636]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b9d      	ldr	r3, [pc, #628]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a9c      	ldr	r2, [pc, #624]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd fe56 	bl	8001110 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fe52 	bl	8001110 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e276      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347a:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x2a8>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fe42 	bl	8001110 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fe3e 	bl	8001110 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e262      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d0>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d060      	beq.n	8003580 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x310>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d116      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x328>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e23f      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4973      	ldr	r1, [pc, #460]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e040      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d023      	beq.n	800354e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd fdfd 	bl	8001110 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd fdf9 	bl	8001110 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e21d      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352c:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	495f      	ldr	r1, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e018      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5c      	ldr	r2, [pc, #368]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fdd9 	bl	8001110 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fdd5 	bl	8001110 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1f9      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fd fdb4 	bl	8001110 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fd fdb0 	bl	8001110 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1d4      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x3ec>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd fd97 	bl	8001110 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fd fd93 	bl	8001110 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1b7      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a6 	beq.w	8003760 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fd fd5a 	bl	8001110 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fd fd56 	bl	8001110 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e17a      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_RCC_OscConfig+0x4d8>
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003696:	e029      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d115      	bne.n	80036cc <HAL_RCC_OscConfig+0x50c>
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
 80036cc:	4b9c      	ldr	r3, [pc, #624]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	4a9b      	ldr	r2, [pc, #620]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036dc:	4b98      	ldr	r3, [pc, #608]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a97      	ldr	r2, [pc, #604]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fd fd0c 	bl	8001110 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fd fd08 	bl	8001110 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e12a      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b8b      	ldr	r3, [pc, #556]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ed      	beq.n	80036fc <HAL_RCC_OscConfig+0x53c>
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd fcf5 	bl	8001110 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd fcf1 	bl	8001110 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e113      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ed      	bne.n	800372a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b7a      	ldr	r3, [pc, #488]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a79      	ldr	r2, [pc, #484]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80fe 	beq.w	8003966 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	2b02      	cmp	r3, #2
 8003770:	f040 80d0 	bne.w	8003914 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003774:	4b72      	ldr	r3, [pc, #456]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0203 	and.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	d130      	bne.n	80037ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d127      	bne.n	80037ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d11f      	bne.n	80037ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037b4:	2a07      	cmp	r2, #7
 80037b6:	bf14      	ite	ne
 80037b8:	2201      	movne	r2, #1
 80037ba:	2200      	moveq	r2, #0
 80037bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d109      	bne.n	80037ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d06e      	beq.n	80038c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	d069      	beq.n	80038c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0ad      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003818:	f7fd fc7a 	bl	8001110 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd fc76 	bl	8001110 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e09a      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003832:	4b43      	ldr	r3, [pc, #268]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383e:	4b40      	ldr	r3, [pc, #256]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x784>)
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800384e:	3a01      	subs	r2, #1
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003858:	0212      	lsls	r2, r2, #8
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003860:	0852      	lsrs	r2, r2, #1
 8003862:	3a01      	subs	r2, #1
 8003864:	0552      	lsls	r2, r2, #21
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800386c:	0852      	lsrs	r2, r2, #1
 800386e:	3a01      	subs	r2, #1
 8003870:	0652      	lsls	r2, r2, #25
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003878:	0912      	lsrs	r2, r2, #4
 800387a:	0452      	lsls	r2, r2, #17
 800387c:	430a      	orrs	r2, r1
 800387e:	4930      	ldr	r1, [pc, #192]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003880:	4313      	orrs	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800389c:	f7fd fc38 	bl	8001110 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fc34 	bl	8001110 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e058      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c2:	e050      	b.n	8003966 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04f      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d148      	bne.n	8003966 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a16      	ldr	r2, [pc, #88]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ec:	f7fd fc10 	bl	8001110 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fc0c 	bl	8001110 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e030      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x734>
 8003912:	e028      	b.n	8003966 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d023      	beq.n	8003962 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x780>)
 8003920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fbf3 	bl	8001110 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	e00c      	b.n	8003948 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd fbef 	bl	8001110 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d905      	bls.n	8003948 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e013      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
 8003940:	40021000 	.word	0x40021000
 8003944:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_OscConfig+0x7b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ec      	bne.n	800392e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x7b0>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4905      	ldr	r1, [pc, #20]	; (8003970 <HAL_RCC_OscConfig+0x7b0>)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x7b4>)
 800395c:	4013      	ands	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
 8003960:	e001      	b.n	8003966 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	feeefffc 	.word	0xfeeefffc

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0e7      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b75      	ldr	r3, [pc, #468]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b72      	ldr	r3, [pc, #456]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4970      	ldr	r1, [pc, #448]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b6e      	ldr	r3, [pc, #440]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cf      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d908      	bls.n	80039ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4960      	ldr	r1, [pc, #384]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04c      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fe:	4b5a      	ldr	r3, [pc, #360]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0a6      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a16:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d115      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e09a      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a2e:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08e      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e086      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4943      	ldr	r1, [pc, #268]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fb56 	bl	8001110 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fd fb52 	bl	8001110 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e06e      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d208      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	492b      	ldr	r1, [pc, #172]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d210      	bcs.n	8003aee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4923      	ldr	r1, [pc, #140]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e036      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4918      	ldr	r1, [pc, #96]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4910      	ldr	r1, [pc, #64]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b2c:	f000 f824 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1f4>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1fc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd fa8d 	bl	8001070 <HAL_InitTick>
 8003b56:	4603      	mov	r3, r0
 8003b58:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	08006300 	.word	0x08006300
 8003b70:	20000000 	.word	0x20000000
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b86:	4b3e      	ldr	r3, [pc, #248]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x34>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d121      	bne.n	8003bea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d11e      	bne.n	8003bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bac:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb8:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d102      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	e004      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d134      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xac>
 8003c1c:	e005      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c20:	617b      	str	r3, [r7, #20]
      break;
 8003c22:	e005      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e002      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	617b      	str	r3, [r7, #20]
      break;
 8003c2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	fb03 f202 	mul.w	r2, r3, r2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0e5b      	lsrs	r3, r3, #25
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	3301      	adds	r3, #1
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c70:	69bb      	ldr	r3, [r7, #24]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08006318 	.word	0x08006318
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	007a1200 	.word	0x007a1200

08003c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4904      	ldr	r1, [pc, #16]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	08006310 	.word	0x08006310

08003cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cd8:	f7ff ffda 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0adb      	lsrs	r3, r3, #11
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4904      	ldr	r1, [pc, #16]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08006310 	.word	0x08006310

08003d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d18:	f7ff f9ee 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003d1c:	6178      	str	r0, [r7, #20]
 8003d1e:	e014      	b.n	8003d4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d38:	f7ff f9de 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d50:	d10b      	bne.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d919      	bls.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d5c:	d902      	bls.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d5e:	2302      	movs	r3, #2
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e013      	b.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d64:	2301      	movs	r3, #1
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	e010      	b.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d902      	bls.n	8003d76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d70:	2303      	movs	r3, #3
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	e00a      	b.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d102      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e004      	b.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b70      	cmp	r3, #112	; 0x70
 8003d86:	d101      	bne.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d88:	2301      	movs	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 0207 	bic.w	r2, r3, #7
 8003d94:	4909      	ldr	r1, [pc, #36]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40022000 	.word	0x40022000

08003dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dcc:	2300      	movs	r3, #0
 8003dce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d041      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003de4:	d02a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003de6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dea:	d824      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df6:	d81e      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d010      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e02:	e018      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e04:	4b86      	ldr	r3, [pc, #536]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a85      	ldr	r2, [pc, #532]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e10:	e015      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fabb 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e22:	e00c      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3320      	adds	r3, #32
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fba6 	bl	800457c <RCCEx_PLLSAI2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e34:	e003      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	74fb      	strb	r3, [r7, #19]
      break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e44:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e52:	4973      	ldr	r1, [pc, #460]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e5a:	e001      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d041      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e74:	d02a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e7a:	d824      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e86:	d81e      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e92:	e018      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e94:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ea0:	e015      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fa73 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb2:	e00c      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3320      	adds	r3, #32
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fb5e 	bl	800457c <RCCEx_PLLSAI2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8003eca:	e000      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ed4:	4b52      	ldr	r3, [pc, #328]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee2:	494f      	ldr	r1, [pc, #316]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a0 	beq.w	800403e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	4a40      	ldr	r2, [pc, #256]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f34:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3a      	ldr	r2, [pc, #232]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f40:	f7fd f8e6 	bl	8001110 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f46:	e009      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f48:	f7fd f8e2 	bl	8001110 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	74fb      	strb	r3, [r7, #19]
        break;
 8003f5a:	e005      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f5c:	4b31      	ldr	r3, [pc, #196]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d15c      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f6e:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01f      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d019      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fd f8a1 	bl	8001110 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd0:	e00b      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd f89d 	bl	8001110 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d902      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ec      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004016:	e009      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402c:	7c7b      	ldrb	r3, [r7, #17]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b9e      	ldr	r3, [pc, #632]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	4a9d      	ldr	r2, [pc, #628]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800404a:	4b98      	ldr	r3, [pc, #608]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 0203 	bic.w	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	4994      	ldr	r1, [pc, #592]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800406c:	4b8f      	ldr	r3, [pc, #572]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 020c 	bic.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	498c      	ldr	r1, [pc, #560]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800408e:	4b87      	ldr	r3, [pc, #540]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	4983      	ldr	r1, [pc, #524]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040b0:	4b7e      	ldr	r3, [pc, #504]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	497b      	ldr	r1, [pc, #492]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	4972      	ldr	r1, [pc, #456]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	496a      	ldr	r1, [pc, #424]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	4961      	ldr	r1, [pc, #388]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004138:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004146:	4959      	ldr	r1, [pc, #356]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800415a:	4b54      	ldr	r3, [pc, #336]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	4950      	ldr	r1, [pc, #320]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800417c:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	4948      	ldr	r1, [pc, #288]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	493f      	ldr	r1, [pc, #252]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d028      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c0:	4b3a      	ldr	r3, [pc, #232]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ce:	4937      	ldr	r1, [pc, #220]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d106      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b32      	ldr	r3, [pc, #200]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
 80041ec:	e011      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f6:	d10c      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f8c8 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d028      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	491f      	ldr	r1, [pc, #124]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423c:	d106      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004248:	60d3      	str	r3, [r2, #12]
 800424a:	e011      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004254:	d10c      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	2101      	movs	r1, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f899 	bl	8004394 <RCCEx_PLLSAI1_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02b      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429a:	d109      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a02      	ldr	r2, [pc, #8]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a6:	60d3      	str	r3, [r2, #12]
 80042a8:	e014      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f867 	bl	8004394 <RCCEx_PLLSAI1_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02f      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ee:	4928      	ldr	r1, [pc, #160]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fe:	d10d      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f844 	bl	8004394 <RCCEx_PLLSAI1_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d014      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	74bb      	strb	r3, [r7, #18]
 800431a:	e011      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3320      	adds	r3, #32
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f925 	bl	800457c <RCCEx_PLLSAI2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435a:	490d      	ldr	r1, [pc, #52]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004386:	7cbb      	ldrb	r3, [r7, #18]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000

08004394 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043a2:	4b75      	ldr	r3, [pc, #468]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0203 	and.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d10d      	bne.n	80043da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
       ||
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043c6:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
       ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d047      	beq.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	e044      	b.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d018      	beq.n	800441a <RCCEx_PLLSAI1_Config+0x86>
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d825      	bhi.n	8004438 <RCCEx_PLLSAI1_Config+0xa4>
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d002      	beq.n	80043f6 <RCCEx_PLLSAI1_Config+0x62>
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d009      	beq.n	8004408 <RCCEx_PLLSAI1_Config+0x74>
 80043f4:	e020      	b.n	8004438 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043f6:	4b60      	ldr	r3, [pc, #384]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004406:	e01a      	b.n	800443e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004418:	e013      	b.n	8004442 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800441a:	4b57      	ldr	r3, [pc, #348]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004426:	4b54      	ldr	r3, [pc, #336]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004436:	e006      	b.n	8004446 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e004      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004446:	bf00      	nop
    }

    if(status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800444e:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	430b      	orrs	r3, r1
 8004464:	4944      	ldr	r1, [pc, #272]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004466:	4313      	orrs	r3, r2
 8004468:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d17d      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004470:	4b41      	ldr	r3, [pc, #260]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a40      	ldr	r2, [pc, #256]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447c:	f7fc fe48 	bl	8001110 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004484:	f7fc fe44 	bl	8001110 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
        break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004498:	4b37      	ldr	r3, [pc, #220]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ef      	bne.n	8004484 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d160      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d111      	bne.n	80044d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b0:	4b31      	ldr	r3, [pc, #196]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6892      	ldr	r2, [r2, #8]
 80044c0:	0211      	lsls	r1, r2, #8
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68d2      	ldr	r2, [r2, #12]
 80044c6:	0912      	lsrs	r2, r2, #4
 80044c8:	0452      	lsls	r2, r2, #17
 80044ca:	430a      	orrs	r2, r1
 80044cc:	492a      	ldr	r1, [pc, #168]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
 80044d2:	e027      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d112      	bne.n	8004500 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	0211      	lsls	r1, r2, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6912      	ldr	r2, [r2, #16]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0552      	lsls	r2, r2, #21
 80044f6:	430a      	orrs	r2, r1
 80044f8:	491f      	ldr	r1, [pc, #124]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
 80044fe:	e011      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004508:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6892      	ldr	r2, [r2, #8]
 8004510:	0211      	lsls	r1, r2, #8
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6952      	ldr	r2, [r2, #20]
 8004516:	0852      	lsrs	r2, r2, #1
 8004518:	3a01      	subs	r2, #1
 800451a:	0652      	lsls	r2, r2, #25
 800451c:	430a      	orrs	r2, r1
 800451e:	4916      	ldr	r1, [pc, #88]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fc fdee 	bl	8001110 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004536:	e009      	b.n	800454c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004538:	f7fc fdea 	bl	8001110 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	73fb      	strb	r3, [r7, #15]
          break;
 800454a:	e005      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	4904      	ldr	r1, [pc, #16]	; (8004578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000

0800457c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d018      	beq.n	80045c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004596:	4b67      	ldr	r3, [pc, #412]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0203 	and.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d10d      	bne.n	80045c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
       ||
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ae:	4b61      	ldr	r3, [pc, #388]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
       ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d047      	beq.n	8004652 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e044      	b.n	8004652 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d018      	beq.n	8004602 <RCCEx_PLLSAI2_Config+0x86>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d825      	bhi.n	8004620 <RCCEx_PLLSAI2_Config+0xa4>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d002      	beq.n	80045de <RCCEx_PLLSAI2_Config+0x62>
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d009      	beq.n	80045f0 <RCCEx_PLLSAI2_Config+0x74>
 80045dc:	e020      	b.n	8004620 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045de:	4b55      	ldr	r3, [pc, #340]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11d      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ee:	e01a      	b.n	8004626 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f0:	4b50      	ldr	r3, [pc, #320]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d116      	bne.n	800462a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004600:	e013      	b.n	800462a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004602:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800461e:	e006      	b.n	800462e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      break;
 8004624:	e004      	b.n	8004630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004626:	bf00      	nop
 8004628:	e002      	b.n	8004630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800462e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004636:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	430b      	orrs	r3, r1
 800464c:	4939      	ldr	r1, [pc, #228]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d167      	bne.n	8004728 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a35      	ldr	r2, [pc, #212]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004664:	f7fc fd54 	bl	8001110 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800466a:	e009      	b.n	8004680 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800466c:	f7fc fd50 	bl	8001110 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	73fb      	strb	r3, [r7, #15]
        break;
 800467e:	e005      	b.n	800468c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ef      	bne.n	800466c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d14a      	bne.n	8004728 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d111      	bne.n	80046bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	0211      	lsls	r1, r2, #8
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68d2      	ldr	r2, [r2, #12]
 80046ae:	0912      	lsrs	r2, r2, #4
 80046b0:	0452      	lsls	r2, r2, #17
 80046b2:	430a      	orrs	r2, r1
 80046b4:	491f      	ldr	r1, [pc, #124]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	614b      	str	r3, [r1, #20]
 80046ba:	e011      	b.n	80046e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046bc:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6892      	ldr	r2, [r2, #8]
 80046cc:	0211      	lsls	r1, r2, #8
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6912      	ldr	r2, [r2, #16]
 80046d2:	0852      	lsrs	r2, r2, #1
 80046d4:	3a01      	subs	r2, #1
 80046d6:	0652      	lsls	r2, r2, #25
 80046d8:	430a      	orrs	r2, r1
 80046da:	4916      	ldr	r1, [pc, #88]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fc fd10 	bl	8001110 <HAL_GetTick>
 80046f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046f2:	e009      	b.n	8004708 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046f4:	f7fc fd0c 	bl	8001110 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d902      	bls.n	8004708 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	73fb      	strb	r3, [r7, #15]
          break;
 8004706:	e005      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ef      	beq.n	80046f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4904      	ldr	r1, [pc, #16]	; (8004734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000

08004738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e095      	b.n	8004876 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d009      	beq.n	8004770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
 8004762:	e005      	b.n	8004770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc faa8 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047b0:	d902      	bls.n	80047b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e002      	b.n	80047be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047c6:	d007      	beq.n	80047d8 <HAL_SPI_Init+0xa0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	ea42 0103 	orr.w	r1, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	0c1b      	lsrs	r3, r3, #16
 8004834:	f003 0204 	and.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004854:	ea42 0103 	orr.w	r1, r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_SPI_Transmit+0x22>
 800489c:	2302      	movs	r3, #2
 800489e:	e158      	b.n	8004b52 <HAL_SPI_Transmit+0x2d4>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048a8:	f7fc fc32 	bl	8001110 <HAL_GetTick>
 80048ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c2:	e13d      	b.n	8004b40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Transmit+0x52>
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048d4:	e134      	b.n	8004b40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2203      	movs	r2, #3
 80048da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004920:	d10f      	bne.n	8004942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d007      	beq.n	8004960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004968:	d94b      	bls.n	8004a02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0xfa>
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d13e      	bne.n	80049f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800499c:	e02b      	b.n	80049f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d112      	bne.n	80049d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049d0:	e011      	b.n	80049f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d2:	f7fc fb9d 	bl	8001110 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d803      	bhi.n	80049ea <HAL_SPI_Transmit+0x16c>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d102      	bne.n	80049f0 <HAL_SPI_Transmit+0x172>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049f4:	e0a4      	b.n	8004b40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ce      	bne.n	800499e <HAL_SPI_Transmit+0x120>
 8004a00:	e07c      	b.n	8004afc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Transmit+0x192>
 8004a0a:	8afb      	ldrh	r3, [r7, #22]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d170      	bne.n	8004af2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d912      	bls.n	8004a40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b02      	subs	r3, #2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a3e:	e058      	b.n	8004af2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a66:	e044      	b.n	8004af2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d12b      	bne.n	8004ace <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d912      	bls.n	8004aa6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b02      	subs	r3, #2
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa4:	e025      	b.n	8004af2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004acc:	e011      	b.n	8004af2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ace:	f7fc fb1f 	bl	8001110 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d803      	bhi.n	8004ae6 <HAL_SPI_Transmit+0x268>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_Transmit+0x26e>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004af0:	e026      	b.n	8004b40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1b5      	bne.n	8004a68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	6839      	ldr	r1, [r7, #0]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fad3 	bl	80050ac <SPI_EndRxTxTransaction>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e000      	b.n	8004b40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Transmit_DMA+0x20>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0d8      	b.n	8004d2e <HAL_SPI_Transmit_DMA+0x1d2>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
 8004b92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b94:	e0c6      	b.n	8004d24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_SPI_Transmit_DMA+0x46>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ba6:	e0bd      	b.n	8004d24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2203      	movs	r2, #3
 8004bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf2:	d10f      	bne.n	8004c14 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	4a47      	ldr	r2, [pc, #284]	; (8004d38 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	4a46      	ldr	r2, [pc, #280]	; (8004d3c <HAL_SPI_Transmit_DMA+0x1e0>)
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	4a45      	ldr	r2, [pc, #276]	; (8004d40 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c42:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4c:	d82d      	bhi.n	8004caa <HAL_SPI_Transmit_DMA+0x14e>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d127      	bne.n	8004caa <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10f      	bne.n	8004c88 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c86:	e010      	b.n	8004caa <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c96:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cc2:	f7fd ff17 	bl	8002af4 <HAL_DMA_Start_IT>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f043 0210 	orr.w	r2, r3, #16
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004ce4:	e01e      	b.n	8004d24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d007      	beq.n	8004d04 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0220 	orr.w	r2, r2, #32
 8004d12:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0202 	orr.w	r2, r2, #2
 8004d22:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	08004e13 	.word	0x08004e13
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004e2f 	.word	0x08004e2f

08004d44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d7a:	f7fc f9c9 	bl	8001110 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d03b      	beq.n	8004e06 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0220 	bic.w	r2, r2, #32
 8004d9c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0202 	bic.w	r2, r2, #2
 8004dac:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	2164      	movs	r1, #100	; 0x64
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	f000 f97a 	bl	80050ac <SPI_EndRxTxTransaction>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004dfe:	6978      	ldr	r0, [r7, #20]
 8004e00:	f7ff ffaa 	bl	8004d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e04:	e002      	b.n	8004e0c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f7fb fe2e 	bl	8000a68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff ff8f 	bl	8004d44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0203 	bic.w	r2, r2, #3
 8004e4a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	f043 0210 	orr.w	r2, r3, #16
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ff79 	bl	8004d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e80:	f7fc f946 	bl	8001110 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e90:	f7fc f93e 	bl	8001110 <HAL_GetTick>
 8004e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	0d1b      	lsrs	r3, r3, #20
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	e054      	b.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d050      	beq.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eb0:	f7fc f92e 	bl	8001110 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13d      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d111      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee8:	d004      	beq.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d107      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d10f      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e017      	b.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d19b      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000

08004f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f92:	f7fc f8bd 	bl	8001110 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fa2:	f7fc f8b5 	bl	8001110 <HAL_GetTick>
 8004fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fb0:	4b3d      	ldr	r3, [pc, #244]	; (80050a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	0d1b      	lsrs	r3, r3, #20
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fc8:	e060      	b.n	800508c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fd0:	d107      	bne.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d050      	beq.n	800508c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fea:	f7fc f891 	bl	8001110 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d902      	bls.n	8005000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d13d      	bne.n	800507c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800500e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005018:	d111      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d004      	beq.n	800502e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d107      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005046:	d10f      	bne.n	8005068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e010      	b.n	800509e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3b01      	subs	r3, #1
 800508a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d196      	bne.n	8004fca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3728      	adds	r7, #40	; 0x28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000000 	.word	0x20000000

080050ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff5b 	bl	8004f80 <SPI_WaitFifoStateUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e027      	b.n	8005130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fec0 	bl	8004e70 <SPI_WaitFlagStateUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e014      	b.n	8005130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff34 	bl	8004f80 <SPI_WaitFifoStateUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e000      	b.n	8005130 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e040      	b.n	80051cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb feea 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2224      	movs	r2, #36	; 0x24
 8005164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f82c 	bl	80051d4 <UART_SetConfig>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e022      	b.n	80051cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fad8 	bl	8005744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fb5f 	bl	8005888 <UART_CheckIdleState>
 80051ca:	4603      	mov	r3, r0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b08a      	sub	sp, #40	; 0x28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4ba4      	ldr	r3, [pc, #656]	; (8005494 <UART_SetConfig+0x2c0>)
 8005204:	4013      	ands	r3, r2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520c:	430b      	orrs	r3, r1
 800520e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a99      	ldr	r2, [pc, #612]	; (8005498 <UART_SetConfig+0x2c4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	4313      	orrs	r3, r2
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	430a      	orrs	r2, r1
 8005252:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a90      	ldr	r2, [pc, #576]	; (800549c <UART_SetConfig+0x2c8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d126      	bne.n	80052ac <UART_SetConfig+0xd8>
 800525e:	4b90      	ldr	r3, [pc, #576]	; (80054a0 <UART_SetConfig+0x2cc>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b03      	cmp	r3, #3
 800526a:	d81b      	bhi.n	80052a4 <UART_SetConfig+0xd0>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0xa0>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005285 	.word	0x08005285
 8005278:	08005295 	.word	0x08005295
 800527c:	0800528d 	.word	0x0800528d
 8005280:	0800529d 	.word	0x0800529d
 8005284:	2301      	movs	r3, #1
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e116      	b.n	80054ba <UART_SetConfig+0x2e6>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e112      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e10e      	b.n	80054ba <UART_SetConfig+0x2e6>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e10a      	b.n	80054ba <UART_SetConfig+0x2e6>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e106      	b.n	80054ba <UART_SetConfig+0x2e6>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7c      	ldr	r2, [pc, #496]	; (80054a4 <UART_SetConfig+0x2d0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d138      	bne.n	8005328 <UART_SetConfig+0x154>
 80052b6:	4b7a      	ldr	r3, [pc, #488]	; (80054a0 <UART_SetConfig+0x2cc>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d82d      	bhi.n	8005320 <UART_SetConfig+0x14c>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0xf8>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005321 	.word	0x08005321
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005321 	.word	0x08005321
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005321 	.word	0x08005321
 80052f4:	08005321 	.word	0x08005321
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005319 	.word	0x08005319
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e0d8      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005308:	2302      	movs	r3, #2
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e0d4      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e0d0      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e0cc      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e0c8      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <UART_SetConfig+0x2d4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d125      	bne.n	800537e <UART_SetConfig+0x1aa>
 8005332:	4b5b      	ldr	r3, [pc, #364]	; (80054a0 <UART_SetConfig+0x2cc>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d016      	beq.n	800536e <UART_SetConfig+0x19a>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d818      	bhi.n	8005376 <UART_SetConfig+0x1a2>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d00a      	beq.n	800535e <UART_SetConfig+0x18a>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d814      	bhi.n	8005376 <UART_SetConfig+0x1a2>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <UART_SetConfig+0x182>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d008      	beq.n	8005366 <UART_SetConfig+0x192>
 8005354:	e00f      	b.n	8005376 <UART_SetConfig+0x1a2>
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535c:	e0ad      	b.n	80054ba <UART_SetConfig+0x2e6>
 800535e:	2302      	movs	r3, #2
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005364:	e0a9      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005366:	2304      	movs	r3, #4
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536c:	e0a5      	b.n	80054ba <UART_SetConfig+0x2e6>
 800536e:	2308      	movs	r3, #8
 8005370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005374:	e0a1      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005376:	2310      	movs	r3, #16
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537c:	e09d      	b.n	80054ba <UART_SetConfig+0x2e6>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a4a      	ldr	r2, [pc, #296]	; (80054ac <UART_SetConfig+0x2d8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d125      	bne.n	80053d4 <UART_SetConfig+0x200>
 8005388:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <UART_SetConfig+0x2cc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005392:	2bc0      	cmp	r3, #192	; 0xc0
 8005394:	d016      	beq.n	80053c4 <UART_SetConfig+0x1f0>
 8005396:	2bc0      	cmp	r3, #192	; 0xc0
 8005398:	d818      	bhi.n	80053cc <UART_SetConfig+0x1f8>
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d00a      	beq.n	80053b4 <UART_SetConfig+0x1e0>
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d814      	bhi.n	80053cc <UART_SetConfig+0x1f8>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <UART_SetConfig+0x1d8>
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x1e8>
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x1f8>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e082      	b.n	80054ba <UART_SetConfig+0x2e6>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e07e      	b.n	80054ba <UART_SetConfig+0x2e6>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c2:	e07a      	b.n	80054ba <UART_SetConfig+0x2e6>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ca:	e076      	b.n	80054ba <UART_SetConfig+0x2e6>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d2:	e072      	b.n	80054ba <UART_SetConfig+0x2e6>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a35      	ldr	r2, [pc, #212]	; (80054b0 <UART_SetConfig+0x2dc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d12a      	bne.n	8005434 <UART_SetConfig+0x260>
 80053de:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <UART_SetConfig+0x2cc>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ec:	d01a      	beq.n	8005424 <UART_SetConfig+0x250>
 80053ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f2:	d81b      	bhi.n	800542c <UART_SetConfig+0x258>
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f8:	d00c      	beq.n	8005414 <UART_SetConfig+0x240>
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fe:	d815      	bhi.n	800542c <UART_SetConfig+0x258>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <UART_SetConfig+0x238>
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d008      	beq.n	800541c <UART_SetConfig+0x248>
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0x258>
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e052      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005414:	2302      	movs	r3, #2
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e04e      	b.n	80054ba <UART_SetConfig+0x2e6>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e04a      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e046      	b.n	80054ba <UART_SetConfig+0x2e6>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e042      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a17      	ldr	r2, [pc, #92]	; (8005498 <UART_SetConfig+0x2c4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d13a      	bne.n	80054b4 <UART_SetConfig+0x2e0>
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <UART_SetConfig+0x2cc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800544c:	d01a      	beq.n	8005484 <UART_SetConfig+0x2b0>
 800544e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005452:	d81b      	bhi.n	800548c <UART_SetConfig+0x2b8>
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005458:	d00c      	beq.n	8005474 <UART_SetConfig+0x2a0>
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545e:	d815      	bhi.n	800548c <UART_SetConfig+0x2b8>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <UART_SetConfig+0x298>
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d008      	beq.n	800547c <UART_SetConfig+0x2a8>
 800546a:	e00f      	b.n	800548c <UART_SetConfig+0x2b8>
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e022      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005474:	2302      	movs	r3, #2
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e01e      	b.n	80054ba <UART_SetConfig+0x2e6>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e01a      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e016      	b.n	80054ba <UART_SetConfig+0x2e6>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e012      	b.n	80054ba <UART_SetConfig+0x2e6>
 8005494:	efff69f3 	.word	0xefff69f3
 8005498:	40008000 	.word	0x40008000
 800549c:	40013800 	.word	0x40013800
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40004400 	.word	0x40004400
 80054a8:	40004800 	.word	0x40004800
 80054ac:	40004c00 	.word	0x40004c00
 80054b0:	40005000 	.word	0x40005000
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a9f      	ldr	r2, [pc, #636]	; (800573c <UART_SetConfig+0x568>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d17a      	bne.n	80055ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d824      	bhi.n	8005516 <UART_SetConfig+0x342>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0x300>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005517 	.word	0x08005517
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005517 	.word	0x08005517
 80054e4:	08005507 	.word	0x08005507
 80054e8:	08005517 	.word	0x08005517
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005517 	.word	0x08005517
 80054f4:	0800550f 	.word	0x0800550f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fe fbd6 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80054fc:	61f8      	str	r0, [r7, #28]
        break;
 80054fe:	e010      	b.n	8005522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005500:	4b8f      	ldr	r3, [pc, #572]	; (8005740 <UART_SetConfig+0x56c>)
 8005502:	61fb      	str	r3, [r7, #28]
        break;
 8005504:	e00d      	b.n	8005522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005506:	f7fe fb37 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 800550a:	61f8      	str	r0, [r7, #28]
        break;
 800550c:	e009      	b.n	8005522 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005512:	61fb      	str	r3, [r7, #28]
        break;
 8005514:	e005      	b.n	8005522 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80fb 	beq.w	8005720 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	429a      	cmp	r2, r3
 8005538:	d305      	bcc.n	8005546 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800554c:	e0e8      	b.n	8005720 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2200      	movs	r2, #0
 8005552:	461c      	mov	r4, r3
 8005554:	4615      	mov	r5, r2
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	022b      	lsls	r3, r5, #8
 8005560:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005564:	0222      	lsls	r2, r4, #8
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6849      	ldr	r1, [r1, #4]
 800556a:	0849      	lsrs	r1, r1, #1
 800556c:	2000      	movs	r0, #0
 800556e:	4688      	mov	r8, r1
 8005570:	4681      	mov	r9, r0
 8005572:	eb12 0a08 	adds.w	sl, r2, r8
 8005576:	eb43 0b09 	adc.w	fp, r3, r9
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	f7fa fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4613      	mov	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559e:	d308      	bcc.n	80055b2 <UART_SetConfig+0x3de>
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d204      	bcs.n	80055b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	e0b6      	b.n	8005720 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055b8:	e0b2      	b.n	8005720 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c2:	d15e      	bne.n	8005682 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d828      	bhi.n	800561e <UART_SetConfig+0x44a>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x400>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	0800561f 	.word	0x0800561f
 80055e4:	0800560f 	.word	0x0800560f
 80055e8:	0800561f 	.word	0x0800561f
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	0800561f 	.word	0x0800561f
 80055f4:	08005617 	.word	0x08005617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f8:	f7fe fb56 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80055fc:	61f8      	str	r0, [r7, #28]
        break;
 80055fe:	e014      	b.n	800562a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7fe fb68 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 8005604:	61f8      	str	r0, [r7, #28]
        break;
 8005606:	e010      	b.n	800562a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005608:	4b4d      	ldr	r3, [pc, #308]	; (8005740 <UART_SetConfig+0x56c>)
 800560a:	61fb      	str	r3, [r7, #28]
        break;
 800560c:	e00d      	b.n	800562a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560e:	f7fe fab3 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 8005612:	61f8      	str	r0, [r7, #28]
        break;
 8005614:	e009      	b.n	800562a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561a:	61fb      	str	r3, [r7, #28]
        break;
 800561c:	e005      	b.n	800562a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d077      	beq.n	8005720 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005a      	lsls	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	441a      	add	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d916      	bls.n	800567a <UART_SetConfig+0x4a6>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005652:	d212      	bcs.n	800567a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f023 030f 	bic.w	r3, r3, #15
 800565c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	b29a      	uxth	r2, r3
 800566a:	8afb      	ldrh	r3, [r7, #22]
 800566c:	4313      	orrs	r3, r2
 800566e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	8afa      	ldrh	r2, [r7, #22]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e052      	b.n	8005720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005680:	e04e      	b.n	8005720 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005686:	2b08      	cmp	r3, #8
 8005688:	d827      	bhi.n	80056da <UART_SetConfig+0x506>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0x4bc>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056db 	.word	0x080056db
 80056a0:	080056cb 	.word	0x080056cb
 80056a4:	080056db 	.word	0x080056db
 80056a8:	080056db 	.word	0x080056db
 80056ac:	080056db 	.word	0x080056db
 80056b0:	080056d3 	.word	0x080056d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fe faf8 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80056b8:	61f8      	str	r0, [r7, #28]
        break;
 80056ba:	e014      	b.n	80056e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7fe fb0a 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 80056c0:	61f8      	str	r0, [r7, #28]
        break;
 80056c2:	e010      	b.n	80056e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c4:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <UART_SetConfig+0x56c>)
 80056c6:	61fb      	str	r3, [r7, #28]
        break;
 80056c8:	e00d      	b.n	80056e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ca:	f7fe fa55 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 80056ce:	61f8      	str	r0, [r7, #28]
        break;
 80056d0:	e009      	b.n	80056e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d6:	61fb      	str	r3, [r7, #28]
        break;
 80056d8:	e005      	b.n	80056e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e4:	bf00      	nop
    }

    if (pclk != 0U)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d019      	beq.n	8005720 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	085a      	lsrs	r2, r3, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d909      	bls.n	800571a <UART_SetConfig+0x546>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d205      	bcs.n	800571a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	e002      	b.n	8005720 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800572c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	40008000 	.word	0x40008000
 8005740:	00f42400 	.word	0x00f42400

08005744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005842:	d10a      	bne.n	800585a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005898:	f7fb fc3a 	bl	8001110 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d10e      	bne.n	80058ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f82d 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e023      	b.n	8005912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d10e      	bne.n	80058f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f817 	bl	800591a <UART_WaitOnFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e00d      	b.n	8005912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b09c      	sub	sp, #112	; 0x70
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	e0a5      	b.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	f000 80a1 	beq.w	8005a78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005936:	f7fb fbeb 	bl	8001110 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
 8005946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005948:	2b00      	cmp	r3, #0
 800594a:	d13e      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005960:	667b      	str	r3, [r7, #100]	; 0x64
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800596c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	663b      	str	r3, [r7, #96]	; 0x60
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800599e:	64ba      	str	r2, [r7, #72]	; 0x48
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e067      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d04f      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e6:	d147      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
 8005a12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	613b      	str	r3, [r7, #16]
   return(result);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a44:	623a      	str	r2, [r7, #32]
 8005a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	69f9      	ldr	r1, [r7, #28]
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e010      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f43f af4a 	beq.w	800592c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3770      	adds	r7, #112	; 0x70
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005aa2:	b490      	push	{r4, r7}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	1d39      	adds	r1, r7, #4
 8005aae:	e881 000c 	stmia.w	r1, {r2, r3}
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	81fb      	strh	r3, [r7, #14]
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ac2:	88ba      	ldrh	r2, [r7, #4]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	da04      	bge.n	8005ad2 <code+0x30>
        code |= LEFT;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	75fb      	strb	r3, [r7, #23]
 8005ad0:	e008      	b.n	8005ae4 <code+0x42>
    } else if (x0 > window.x1) {
 8005ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ad6:	893a      	ldrh	r2, [r7, #8]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	dd03      	ble.n	8005ae4 <code+0x42>
        code |= RIGHT;
 8005adc:	2202      	movs	r2, #2
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	da04      	bge.n	8005af8 <code+0x56>
        code |= BOTTOM;
 8005aee:	2204      	movs	r2, #4
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	75fb      	strb	r3, [r7, #23]
 8005af6:	e008      	b.n	8005b0a <code+0x68>
    } else if (y0 > window.y1) {
 8005af8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005afc:	897a      	ldrh	r2, [r7, #10]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	dd03      	ble.n	8005b0a <code+0x68>
        code |= TOP;
 8005b02:	2208      	movs	r2, #8
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc90      	pop	{r4, r7}
 8005b14:	4770      	bx	lr

08005b16 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b088      	sub	sp, #32
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b34:	cb0c      	ldmia	r3, {r2, r3}
 8005b36:	f7ff ffb4 	bl	8005aa2 <code>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b4e:	cb0c      	ldmia	r3, {r2, r3}
 8005b50:	f7ff ffa7 	bl	8005aa2 <code>
 8005b54:	4603      	mov	r3, r0
 8005b56:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005b5c:	7ffa      	ldrb	r2, [r7, #31]
 8005b5e:	7fbb      	ldrb	r3, [r7, #30]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	777b      	strb	r3, [r7, #29]
            break;
 8005b6c:	e0e9      	b.n	8005d42 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005b6e:	7ffa      	ldrb	r2, [r7, #31]
 8005b70:	7fbb      	ldrb	r3, [r7, #30]
 8005b72:	4013      	ands	r3, r2
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 80e2 	bne.w	8005d40 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <clip_line+0x78>
 8005b8a:	7ffb      	ldrb	r3, [r7, #31]
 8005b8c:	e000      	b.n	8005b90 <clip_line+0x7a>
 8005b8e:	7fbb      	ldrb	r3, [r7, #30]
 8005b90:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005b92:	2208      	movs	r2, #8
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	4013      	ands	r3, r2
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d024      	beq.n	8005be8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bac:	4619      	mov	r1, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bb4:	1acb      	subs	r3, r1, r3
 8005bb6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8005bb8:	4608      	mov	r0, r1
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005bc0:	1a41      	subs	r1, r0, r1
 8005bc2:	fb03 f101 	mul.w	r1, r3, r1
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd4:	1ac3      	subs	r3, r0, r3
 8005bd6:	fb91 f3f3 	sdiv	r3, r1, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005be4:	833b      	strh	r3, [r7, #24]
 8005be6:	e07f      	b.n	8005ce8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005be8:	2204      	movs	r2, #4
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	4013      	ands	r3, r2
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d024      	beq.n	8005c3e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c02:	4619      	mov	r1, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c0a:	1acb      	subs	r3, r1, r3
 8005c0c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005c0e:	4608      	mov	r0, r1
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005c16:	1a41      	subs	r1, r0, r1
 8005c18:	fb03 f101 	mul.w	r1, r3, r1
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c22:	4618      	mov	r0, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c2a:	1ac3      	subs	r3, r0, r3
 8005c2c:	fb91 f3f3 	sdiv	r3, r1, r3
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c3a:	833b      	strh	r3, [r7, #24]
 8005c3c:	e054      	b.n	8005ce8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005c3e:	2202      	movs	r2, #2
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d024      	beq.n	8005c94 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c60:	1acb      	subs	r3, r1, r3
 8005c62:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005c64:	4608      	mov	r0, r1
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005c6c:	1a41      	subs	r1, r0, r1
 8005c6e:	fb03 f101 	mul.w	r1, r3, r1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c80:	1ac3      	subs	r3, r0, r3
 8005c82:	fb91 f3f3 	sdiv	r3, r1, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8005c8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c90:	837b      	strh	r3, [r7, #26]
 8005c92:	e029      	b.n	8005ce8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005c94:	2201      	movs	r2, #1
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d023      	beq.n	8005ce8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb6:	1acb      	subs	r3, r1, r3
 8005cb8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005cba:	4608      	mov	r0, r1
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005cc2:	1a41      	subs	r1, r0, r1
 8005cc4:	fb03 f101 	mul.w	r1, r3, r1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd6:	1ac3      	subs	r3, r0, r3
 8005cd8:	fb91 f3f3 	sdiv	r3, r1, r3
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ce6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005ce8:	7dfa      	ldrb	r2, [r7, #23]
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d113      	bne.n	8005d18 <clip_line+0x202>
                *x0 = x;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8b7a      	ldrh	r2, [r7, #26]
 8005cf4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	8b3a      	ldrh	r2, [r7, #24]
 8005cfa:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d0c:	cb0c      	ldmia	r3, {r2, r3}
 8005d0e:	f7ff fec8 	bl	8005aa2 <code>
 8005d12:	4603      	mov	r3, r0
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e721      	b.n	8005b5c <clip_line+0x46>
            } else {
                *x1 = x;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8b7a      	ldrh	r2, [r7, #26]
 8005d1c:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	8b3a      	ldrh	r2, [r7, #24]
 8005d22:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d34:	cb0c      	ldmia	r3, {r2, r3}
 8005d36:	f7ff feb4 	bl	8005aa2 <code>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8005d3e:	e70d      	b.n	8005b5c <clip_line+0x46>
            break;
 8005d40:	bf00      	nop
            }
        }
    }

    return accept;
 8005d42:	7f7b      	ldrb	r3, [r7, #29]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dd01      	ble.n	8005d62 <min+0x16>
        return b;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	e000      	b.n	8005d64 <min+0x18>
    };
    return a;
 8005d62:	687b      	ldr	r3, [r7, #4]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <max>:

static inline int max(int a, int b) {
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	dd01      	ble.n	8005d86 <max+0x16>
        return a;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	e000      	b.n	8005d88 <max+0x18>
    }
    return b;
 8005d86:	683b      	ldr	r3, [r7, #0]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80fb      	strh	r3, [r7, #6]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	80bb      	strh	r3, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8005da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005daa:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <hagl_put_pixel+0x60>)
 8005dac:	8812      	ldrh	r2, [r2, #0]
 8005dae:	4293      	cmp	r3, r2
 8005db0:	db1a      	blt.n	8005de8 <hagl_put_pixel+0x54>
 8005db2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005db6:	4a0f      	ldr	r2, [pc, #60]	; (8005df4 <hagl_put_pixel+0x60>)
 8005db8:	8852      	ldrh	r2, [r2, #2]
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	db14      	blt.n	8005de8 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <hagl_put_pixel+0x60>)
 8005dc4:	8892      	ldrh	r2, [r2, #4]
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	dc10      	bgt.n	8005dec <hagl_put_pixel+0x58>
 8005dca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <hagl_put_pixel+0x60>)
 8005dd0:	88d2      	ldrh	r2, [r2, #6]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	dc0a      	bgt.n	8005dec <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8005dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dda:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fdf3 	bl	80009cc <lcd_put_pixel>
 8005de6:	e002      	b.n	8005dee <hagl_put_pixel+0x5a>
        return;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <hagl_put_pixel+0x5a>
        return;
 8005dec:	bf00      	nop
}
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	2000000c 	.word	0x2000000c

08005df8 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	80fb      	strh	r3, [r7, #6]
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	80bb      	strh	r3, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	807b      	strh	r3, [r7, #2]
 8005e12:	4613      	mov	r3, r2
 8005e14:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	b21a      	sxth	r2, r3
 8005e20:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005e24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005e28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005e2c:	883b      	ldrh	r3, [r7, #0]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4623      	mov	r3, r4
 8005e32:	f000 f805 	bl	8005e40 <hagl_draw_line>
#endif
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd90      	pop	{r4, r7, pc}
	...

08005e40 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	4604      	mov	r4, r0
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4623      	mov	r3, r4
 8005e50:	80fb      	strh	r3, [r7, #6]
 8005e52:	4603      	mov	r3, r0
 8005e54:	80bb      	strh	r3, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	807b      	strh	r3, [r7, #2]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8005e5e:	463b      	mov	r3, r7
 8005e60:	1cba      	adds	r2, r7, #2
 8005e62:	1d3d      	adds	r5, r7, #4
 8005e64:	1dbc      	adds	r4, r7, #6
 8005e66:	494a      	ldr	r1, [pc, #296]	; (8005f90 <hagl_draw_line+0x150>)
 8005e68:	466e      	mov	r6, sp
 8005e6a:	c903      	ldmia	r1, {r0, r1}
 8005e6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8005e70:	4629      	mov	r1, r5
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff fe4f 	bl	8005b16 <clip_line>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f083 0301 	eor.w	r3, r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d17e      	bne.n	8005f82 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8005e84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bfb8      	it	lt
 8005e94:	425b      	neglt	r3, r3
 8005e96:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8005e98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	da01      	bge.n	8005ea8 <hagl_draw_line+0x68>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e001      	b.n	8005eac <hagl_draw_line+0x6c>
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eac:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8005eae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bfb8      	it	lt
 8005ebe:	425b      	neglt	r3, r3
 8005ec0:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8005ec2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ec6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	da01      	bge.n	8005ed2 <hagl_draw_line+0x92>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e001      	b.n	8005ed6 <hagl_draw_line+0x96>
 8005ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed6:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8005ed8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005edc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	dd06      	ble.n	8005ef2 <hagl_draw_line+0xb2>
 8005ee4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ee8:	0fda      	lsrs	r2, r3, #31
 8005eea:	4413      	add	r3, r2
 8005eec:	105b      	asrs	r3, r3, #1
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	e006      	b.n	8005f00 <hagl_draw_line+0xc0>
 8005ef2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ef6:	0fda      	lsrs	r2, r3, #31
 8005ef8:	4413      	add	r3, r2
 8005efa:	105b      	asrs	r3, r3, #1
 8005efc:	425b      	negs	r3, r3
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8005f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f06:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f0a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff41 	bl	8005d94 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8005f12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d105      	bne.n	8005f2a <hagl_draw_line+0xea>
 8005f1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d02d      	beq.n	8005f86 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8005f2a:	8afb      	ldrh	r3, [r7, #22]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8005f32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005f36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f3a:	425b      	negs	r3, r3
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	dd0c      	ble.n	8005f5a <hagl_draw_line+0x11a>
            err -= dy;
 8005f40:	8afa      	ldrh	r2, [r7, #22]
 8005f42:	8a3b      	ldrh	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8005f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	4413      	add	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8005f5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005f5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	dacd      	bge.n	8005f02 <hagl_draw_line+0xc2>
            err += dx;
 8005f66:	8afa      	ldrh	r2, [r7, #22]
 8005f68:	8abb      	ldrh	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8005f70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	4413      	add	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8005f80:	e7bf      	b.n	8005f02 <hagl_draw_line+0xc2>
        return;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <hagl_draw_line+0x148>
            break;
 8005f86:	bf00      	nop
        }
    }
}
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000000c 	.word	0x2000000c

08005f94 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	80fb      	strh	r3, [r7, #6]
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80bb      	strh	r3, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	807b      	strh	r3, [r7, #2]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dd0e      	ble.n	8005fdc <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	887b      	ldrh	r3, [r7, #2]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	887b      	ldrh	r3, [r7, #2]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8005fdc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fe0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	dd0e      	ble.n	8006006 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8005fe8:	88ba      	ldrh	r2, [r7, #4]
 8005fea:	883b      	ldrh	r3, [r7, #0]
 8005fec:	4413      	add	r3, r2
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8005ff2:	88ba      	ldrh	r2, [r7, #4]
 8005ff4:	883b      	ldrh	r3, [r7, #0]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8005ffc:	88ba      	ldrh	r2, [r7, #4]
 8005ffe:	883b      	ldrh	r3, [r7, #0]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	b29b      	uxth	r3, r3
 8006004:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800600a:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <hagl_fill_rectangle+0x144>)
 800600c:	8812      	ldrh	r2, [r2, #0]
 800600e:	4293      	cmp	r3, r2
 8006010:	db5b      	blt.n	80060ca <hagl_fill_rectangle+0x136>
 8006012:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006016:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006018:	8852      	ldrh	r2, [r2, #2]
 800601a:	4293      	cmp	r3, r2
 800601c:	db55      	blt.n	80060ca <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800601e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006024:	8892      	ldrh	r2, [r2, #4]
 8006026:	4293      	cmp	r3, r2
 8006028:	dc51      	bgt.n	80060ce <hagl_fill_rectangle+0x13a>
 800602a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006030:	88d2      	ldrh	r2, [r2, #6]
 8006032:	4293      	cmp	r3, r2
 8006034:	dc4b      	bgt.n	80060ce <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8006036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603a:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <hagl_fill_rectangle+0x144>)
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fe95 	bl	8005d70 <max>
 8006046:	4603      	mov	r3, r0
 8006048:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800604a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800604e:	4a22      	ldr	r2, [pc, #136]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006050:	8852      	ldrh	r2, [r2, #2]
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fe8b 	bl	8005d70 <max>
 800605a:	4603      	mov	r3, r0
 800605c:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800605e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006062:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006064:	8892      	ldrh	r2, [r2, #4]
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fe6f 	bl	8005d4c <min>
 800606e:	4603      	mov	r3, r0
 8006070:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8006072:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006076:	4a18      	ldr	r2, [pc, #96]	; (80060d8 <hagl_fill_rectangle+0x144>)
 8006078:	88d2      	ldrh	r2, [r2, #6]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fe65 	bl	8005d4c <min>
 8006082:	4603      	mov	r3, r0
 8006084:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	3301      	adds	r3, #1
 8006090:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8006092:	883a      	ldrh	r2, [r7, #0]
 8006094:	88bb      	ldrh	r3, [r7, #4]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	3301      	adds	r3, #1
 800609c:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800609e:	2300      	movs	r3, #0
 80060a0:	81fb      	strh	r3, [r7, #14]
 80060a2:	e00d      	b.n	80060c0 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80060a4:	88ba      	ldrh	r2, [r7, #4]
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	4413      	add	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b219      	sxth	r1, r3
 80060ae:	8c3b      	ldrh	r3, [r7, #32]
 80060b0:	89ba      	ldrh	r2, [r7, #12]
 80060b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80060b6:	f7ff fe9f 	bl	8005df8 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	3301      	adds	r3, #1
 80060be:	81fb      	strh	r3, [r7, #14]
 80060c0:	89fa      	ldrh	r2, [r7, #14]
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3ed      	bcc.n	80060a4 <hagl_fill_rectangle+0x110>
 80060c8:	e002      	b.n	80060d0 <hagl_fill_rectangle+0x13c>
        return;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <hagl_fill_rectangle+0x13c>
        return;
 80060ce:	bf00      	nop
#endif
    }
}
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c

080060dc <hagl_fill_circle>:
        hagl_put_pixel(xc + y, yc - x, color);
        hagl_put_pixel(xc - y, yc - x, color);
    }
}

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	80fb      	strh	r3, [r7, #6]
 80060ee:	4603      	mov	r3, r0
 80060f0:	80bb      	strh	r3, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	807b      	strh	r3, [r7, #2]
 80060f6:	4613      	mov	r3, r2
 80060f8:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	f1c3 0303 	rsb	r3, r3, #3
 800610c:	b29b      	uxth	r3, r3
 800610e:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006110:	e067      	b.n	80061e2 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	b29b      	uxth	r3, r3
 800611a:	b218      	sxth	r0, r3
 800611c:	88ba      	ldrh	r2, [r7, #4]
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	b219      	sxth	r1, r3
 8006126:	89fb      	ldrh	r3, [r7, #14]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	883b      	ldrh	r3, [r7, #0]
 800612e:	f7ff fe63 	bl	8005df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	b29b      	uxth	r3, r3
 800613a:	b218      	sxth	r0, r3
 800613c:	88ba      	ldrh	r2, [r7, #4]
 800613e:	89bb      	ldrh	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b29b      	uxth	r3, r3
 8006144:	b219      	sxth	r1, r3
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	883b      	ldrh	r3, [r7, #0]
 800614e:	f7ff fe53 	bl	8005df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	89bb      	ldrh	r3, [r7, #12]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	b29b      	uxth	r3, r3
 800615a:	b218      	sxth	r0, r3
 800615c:	88ba      	ldrh	r2, [r7, #4]
 800615e:	89fb      	ldrh	r3, [r7, #14]
 8006160:	4413      	add	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	b219      	sxth	r1, r3
 8006166:	89bb      	ldrh	r3, [r7, #12]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	883b      	ldrh	r3, [r7, #0]
 800616e:	f7ff fe43 	bl	8005df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	89bb      	ldrh	r3, [r7, #12]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	b29b      	uxth	r3, r3
 800617a:	b218      	sxth	r0, r3
 800617c:	88ba      	ldrh	r2, [r7, #4]
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	b29b      	uxth	r3, r3
 8006184:	b219      	sxth	r1, r3
 8006186:	89bb      	ldrh	r3, [r7, #12]
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	883b      	ldrh	r3, [r7, #0]
 800618e:	f7ff fe33 	bl	8005df8 <hagl_draw_hline>
        x++;
 8006192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006196:	b29b      	uxth	r3, r3
 8006198:	3301      	adds	r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 800619e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	dd14      	ble.n	80061d0 <hagl_fill_circle+0xf4>
            y--;
 80061a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80061b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80061b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	4413      	add	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	330a      	adds	r3, #10
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	817b      	strh	r3, [r7, #10]
 80061ce:	e008      	b.n	80061e2 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 80061d0:	89fb      	ldrh	r3, [r7, #14]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	4413      	add	r3, r2
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3306      	adds	r3, #6
 80061de:	b29b      	uxth	r3, r3
 80061e0:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 80061e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80061e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	da91      	bge.n	8006112 <hagl_fill_circle+0x36>
        }
    }
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd90      	pop	{r4, r7, pc}

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4d0d      	ldr	r5, [pc, #52]	; (8006230 <__libc_init_array+0x38>)
 80061fc:	4c0d      	ldr	r4, [pc, #52]	; (8006234 <__libc_init_array+0x3c>)
 80061fe:	1b64      	subs	r4, r4, r5
 8006200:	10a4      	asrs	r4, r4, #2
 8006202:	2600      	movs	r6, #0
 8006204:	42a6      	cmp	r6, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	4d0b      	ldr	r5, [pc, #44]	; (8006238 <__libc_init_array+0x40>)
 800620a:	4c0c      	ldr	r4, [pc, #48]	; (800623c <__libc_init_array+0x44>)
 800620c:	f000 f820 	bl	8006250 <_init>
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	2600      	movs	r6, #0
 8006216:	42a6      	cmp	r6, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006220:	4798      	blx	r3
 8006222:	3601      	adds	r6, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f855 3b04 	ldr.w	r3, [r5], #4
 800622a:	4798      	blx	r3
 800622c:	3601      	adds	r6, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	08006350 	.word	0x08006350
 8006234:	08006350 	.word	0x08006350
 8006238:	08006350 	.word	0x08006350
 800623c:	08006354 	.word	0x08006354

08006240 <memset>:
 8006240:	4402      	add	r2, r0
 8006242:	4603      	mov	r3, r0
 8006244:	4293      	cmp	r3, r2
 8006246:	d100      	bne.n	800624a <memset+0xa>
 8006248:	4770      	bx	lr
 800624a:	f803 1b01 	strb.w	r1, [r3], #1
 800624e:	e7f9      	b.n	8006244 <memset+0x4>

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
