
steering_diodes_with_timers_and_adcs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08008b68  08008b68  00018b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08008eb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08008eb8  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149bc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267f  00000000  00000000  00034a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  000370e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00038438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297ff  00000000  00000000  00039698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015502  00000000  00000000  00062e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107695  00000000  00000000  00078399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fa2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd8  00000000  00000000  0017fa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b4c 	.word	0x08008b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08008b4c 	.word	0x08008b4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468e      	mov	lr, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14d      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b152      	cbz	r2, 8000bc4 <__udivmoddi4+0x30>
 8000bae:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb2:	f1c2 0120 	rsb	r1, r2, #32
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc2:	4094      	lsls	r4, r2
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	0c21      	lsrs	r1, r4, #16
 8000bca:	fbbe f6f8 	udiv	r6, lr, r8
 8000bce:	fa1f f78c 	uxth.w	r7, ip
 8000bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bda:	fb06 f107 	mul.w	r1, r6, r7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bea:	f080 811f 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 811c 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf4:	3e02      	subs	r6, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 f707 	mul.w	r7, r0, r7
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	d90a      	bls.n	8000c26 <__udivmoddi4+0x92>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 810a 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	f240 8107 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c22:	4464      	add	r4, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	b11d      	cbz	r5, 8000c38 <__udivmoddi4+0xa4>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c5 4300 	strd	r4, r3, [r5]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 80ef 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f683 	clz	r6, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469e      	mov	lr, r3
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa4>
 8000c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8092 	bne.w	8000dae <__udivmoddi4+0x21a>
 8000c8a:	eba1 010c 	sub.w	r1, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	0c20      	lsrs	r0, r4, #16
 8000c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	4288      	cmp	r0, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x9a>
 8000cf4:	f1c6 0720 	rsb	r7, r6, #32
 8000cf8:	40b3      	lsls	r3, r6
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40f9      	lsrs	r1, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f306 	lsl.w	r3, r0, r6
 8000d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 1118 	mls	r1, r9, r8, r1
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d54:	fb09 1110 	mls	r1, r9, r0, r1
 8000d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	458e      	cmp	lr, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba1 010e 	sub.w	r1, r1, lr
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb61 010e 	sbc.w	r1, r1, lr
 8000d96:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9e:	40f1      	lsrs	r1, r6
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c5 7100 	strd	r7, r1, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	40d8      	lsrs	r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd0:	0c0b      	lsrs	r3, r1, #16
 8000dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1b9b      	subs	r3, r3, r6
 8000df6:	b289      	uxth	r1, r1
 8000df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb06 f30e 	mul.w	r3, r6, lr
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3e02      	subs	r6, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e705      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e3      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f8      	b.n	8000c26 <__udivmoddi4+0x92>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4646      	mov	r6, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//	FUNC WHICH ENABLES WRITING PRINTF ON UART
int __io_putchar(int ch)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d102      	bne.n	8000e7c <__io_putchar+0x14>
    __io_putchar('\r');
 8000e76:	200d      	movs	r0, #13
 8000e78:	f7ff fff6 	bl	8000e68 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e7c:	1d39      	adds	r1, r7, #4
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	2201      	movs	r2, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <__io_putchar+0x2c>)
 8000e86:	f005 f95d 	bl	8006144 <HAL_UART_Transmit>

  return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000184 	.word	0x20000184

08000e98 <calc_pwm>:

//	FUNC WHICH CALCULATES BRIGHTNESS OF DIODE
float calc_pwm(float val)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <calc_pwm+0x80>)
 8000ea4:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <calc_pwm+0x84>)
 8000ea8:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eae:	eeb1 7a67 	vneg.f32	s14, s15
 8000eb2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	ee17 0a90 	vmov	r0, s15
 8000ec6:	f7ff fae3 	bl	8000490 <__aeabi_f2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	ec43 2b10 	vmov	d0, r2, r3
 8000ed2:	f006 fc41 	bl	8007758 <exp>
 8000ed6:	ec51 0b10 	vmov	r0, r1, d0
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <calc_pwm+0x88>)
 8000ee0:	f7ff f978 	bl	80001d4 <__adddf3>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	a109      	add	r1, pc, #36	; (adr r1, 8000f10 <calc_pwm+0x78>)
 8000eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eee:	f7ff fc51 	bl	8000794 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fde3 	bl	8000ac4 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	ee07 3a90 	vmov	s15, r3
}
 8000f04:	eeb0 0a67 	vmov.f32	s0, s15
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	00000000 	.word	0x00000000
 8000f14:	40c38800 	.word	0x40c38800
 8000f18:	3e051eb8 	.word	0x3e051eb8
 8000f1c:	428c0000 	.word	0x428c0000
 8000f20:	3ff00000 	.word	0x3ff00000

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8000f2c:	f000 fd75 	bl	8001a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f904 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 fad0 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f38:	f000 fab6 	bl	80014a8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f3c:	f000 fa02 	bl	8001344 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 fa82 	bl	8001448 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f44:	f000 f94c 	bl	80011e0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //	CALIBRATING OF ADC1
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f48:	217f      	movs	r1, #127	; 0x7f
 8000f4a:	4873      	ldr	r0, [pc, #460]	; (8001118 <main+0x1f4>)
 8000f4c:	f001 ffe6 	bl	8002f1c <HAL_ADCEx_Calibration_Start>

  //	ACTIVATING DMA WHICH SAVES MEASURED VALUE ON ADC1 TO FREQ VAR
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)val, 4);
 8000f50:	2204      	movs	r2, #4
 8000f52:	4972      	ldr	r1, [pc, #456]	; (800111c <main+0x1f8>)
 8000f54:	4870      	ldr	r0, [pc, #448]	; (8001118 <main+0x1f4>)
 8000f56:	f001 f94b 	bl	80021f0 <HAL_ADC_Start_DMA>

  //	SETTING UP TIMER 3 WITH PWM CHANNELS
  HAL_TIM_Base_Start(&htim3);
 8000f5a:	4871      	ldr	r0, [pc, #452]	; (8001120 <main+0x1fc>)
 8000f5c:	f004 f83e 	bl	8004fdc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f60:	2100      	movs	r1, #0
 8000f62:	486f      	ldr	r0, [pc, #444]	; (8001120 <main+0x1fc>)
 8000f64:	f004 f904 	bl	8005170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f68:	2104      	movs	r1, #4
 8000f6a:	486d      	ldr	r0, [pc, #436]	; (8001120 <main+0x1fc>)
 8000f6c:	f004 f900 	bl	8005170 <HAL_TIM_PWM_Start>

  //	CREATING VARIABLE WHICH WILL BE USED IN SIN FUNC
  float counter = 0.0;
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  float pwm_level = 0.0;
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]

  //	CREATING FLAGS FOR JOYSTICK FOR X AND Y AXIS
  int x_flag = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  int y_flag = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]

  while (1)
  {

	  //	STEERING JOYSTICK ON X AXIS
	  if((int)val[2]<1970 && x_flag==0){
 8000f84:	4b65      	ldr	r3, [pc, #404]	; (800111c <main+0x1f8>)
 8000f86:	889b      	ldrh	r3, [r3, #4]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d808      	bhi.n	8000fa4 <main+0x80>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <main+0x80>
		  x_flag = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
		  printf("LEFT\n");
 8000f9c:	4861      	ldr	r0, [pc, #388]	; (8001124 <main+0x200>)
 8000f9e:	f005 fe6d 	bl	8006c7c <puts>
 8000fa2:	e00e      	b.n	8000fc2 <main+0x9e>
	  }
	  else if((int)val[2]>1980 && x_flag==1){
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	; (800111c <main+0x1f8>)
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d907      	bls.n	8000fc2 <main+0x9e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d104      	bne.n	8000fc2 <main+0x9e>
		  x_flag = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
		  printf("RIGHT\n");
 8000fbc:	485a      	ldr	r0, [pc, #360]	; (8001128 <main+0x204>)
 8000fbe:	f005 fe5d 	bl	8006c7c <puts>
	  }

	  //	STEERING JOYSTICK ON Y AXIS
	  if((int)val[3]<2010 && y_flag==0){
 8000fc2:	4b56      	ldr	r3, [pc, #344]	; (800111c <main+0x1f8>)
 8000fc4:	88db      	ldrh	r3, [r3, #6]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d808      	bhi.n	8000fe2 <main+0xbe>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <main+0xbe>
		  y_flag = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
		  printf("UP\n");
 8000fda:	4854      	ldr	r0, [pc, #336]	; (800112c <main+0x208>)
 8000fdc:	f005 fe4e 	bl	8006c7c <puts>
 8000fe0:	e00e      	b.n	8001000 <main+0xdc>
	  }
	  else if((int)val[3]>2030 && y_flag==1){
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <main+0x1f8>)
 8000fe4:	88db      	ldrh	r3, [r3, #6]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f240 72ee 	movw	r2, #2030	; 0x7ee
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d907      	bls.n	8001000 <main+0xdc>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d104      	bne.n	8001000 <main+0xdc>
		  y_flag = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
		  printf("DOWN\n");
 8000ffa:	484d      	ldr	r0, [pc, #308]	; (8001130 <main+0x20c>)
 8000ffc:	f005 fe3e 	bl	8006c7c <puts>




	  //	IF STATEMENT IS USED TO ENABLE FREQ EQUAL 0
	  if ((float)val[0]<100.0){
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <main+0x1f8>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	2b63      	cmp	r3, #99	; 0x63
 8001008:	d803      	bhi.n	8001012 <main+0xee>
		  pwm_level = 0;
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	e05c      	b.n	80010cc <main+0x1a8>
	  }
	  else{
		  //	CREATING SIN WAVE FOR DIODES (WHICH CHANGES PWM LEVEL) (CEIL IS USED TO SMOOTH DIODES BLINKING)
		  pwm_level = (LVL-((float)val[1]/100.0)) * sin(ceil(((float)val[0]/100.0)) * (counter / 100.0));
 8001012:	4b42      	ldr	r3, [pc, #264]	; (800111c <main+0x1f8>)
 8001014:	885b      	ldrh	r3, [r3, #2]
 8001016:	b29b      	uxth	r3, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	f7ff fa34 	bl	8000490 <__aeabi_f2d>
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b41      	ldr	r3, [pc, #260]	; (8001134 <main+0x210>)
 800102e:	f7ff fbb1 	bl	8000794 <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	493f      	ldr	r1, [pc, #252]	; (8001138 <main+0x214>)
 800103c:	f7ff f8c8 	bl	80001d0 <__aeabi_dsub>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4614      	mov	r4, r2
 8001046:	461d      	mov	r5, r3
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <main+0x1f8>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa19 	bl	8000490 <__aeabi_f2d>
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <main+0x210>)
 8001064:	f7ff fb96 	bl	8000794 <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	ec43 2b17 	vmov	d7, r2, r3
 8001070:	eeb0 0a47 	vmov.f32	s0, s14
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	f006 fa92 	bl	80075a0 <ceil>
 800107c:	ec59 8b10 	vmov	r8, r9, d0
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fa05 	bl	8000490 <__aeabi_f2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <main+0x210>)
 800108c:	f7ff fb82 	bl	8000794 <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4640      	mov	r0, r8
 8001096:	4649      	mov	r1, r9
 8001098:	f7ff fa52 	bl	8000540 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	ec43 2b17 	vmov	d7, r2, r3
 80010a4:	eeb0 0a47 	vmov.f32	s0, s14
 80010a8:	eef0 0a67 	vmov.f32	s1, s15
 80010ac:	f006 fafc 	bl	80076a8 <sin>
 80010b0:	ec53 2b10 	vmov	r2, r3, d0
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff fa42 	bl	8000540 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fcfe 	bl	8000ac4 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60bb      	str	r3, [r7, #8]
	  }

	  //	CHANGING PWM LEVELS IN TIMER 3
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(pwm_level));
 80010cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80010d0:	f7ff fee2 	bl	8000e98 <calc_pwm>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <main+0x1fc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e0:	ee17 2a90 	vmov	r2, s15
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(pwm_level));
 80010e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ea:	f7ff fed5 	bl	8000e98 <calc_pwm>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <main+0x1fc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fa:	ee17 2a90 	vmov	r2, s15
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 fcff 	bl	8001b04 <HAL_Delay>
	  counter++;
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800110e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
	  if((int)val[2]<1970 && x_flag==0){
 8001116:	e735      	b.n	8000f84 <main+0x60>
 8001118:	2000008c 	.word	0x2000008c
 800111c:	20000208 	.word	0x20000208
 8001120:	20000138 	.word	0x20000138
 8001124:	08008b68 	.word	0x08008b68
 8001128:	08008b70 	.word	0x08008b70
 800112c:	08008b78 	.word	0x08008b78
 8001130:	08008b7c 	.word	0x08008b7c
 8001134:	40590000 	.word	0x40590000
 8001138:	404e0000 	.word	0x404e0000

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b096      	sub	sp, #88	; 0x58
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2244      	movs	r2, #68	; 0x44
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fd20 	bl	8006b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001162:	f002 fbd1 	bl	8003908 <HAL_PWREx_ControlVoltageScaling>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800116c:	f000 f9d8 	bl	8001520 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001170:	2310      	movs	r3, #16
 8001172:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800117c:	2360      	movs	r3, #96	; 0x60
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001184:	2301      	movs	r3, #1
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800118c:	2328      	movs	r3, #40	; 0x28
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001190:	2307      	movs	r3, #7
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fc07 	bl	80039b4 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011ac:	f000 f9b8 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2303      	movs	r3, #3
 80011b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2104      	movs	r1, #4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 ffcf 	bl	800416c <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011d4:	f000 f9a4 	bl	8001520 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3758      	adds	r7, #88	; 0x58
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <MX_ADC1_Init+0x14c>)
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <MX_ADC1_Init+0x150>)
 8001206:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001208:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_ADC1_Init+0x14c>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <MX_ADC1_Init+0x14c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <MX_ADC1_Init+0x14c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <MX_ADC1_Init+0x14c>)
 800121c:	2201      	movs	r2, #1
 800121e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001220:	4b42      	ldr	r3, [pc, #264]	; (800132c <MX_ADC1_Init+0x14c>)
 8001222:	2204      	movs	r2, #4
 8001224:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_ADC1_Init+0x14c>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800122c:	4b3f      	ldr	r3, [pc, #252]	; (800132c <MX_ADC1_Init+0x14c>)
 800122e:	2201      	movs	r2, #1
 8001230:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_ADC1_Init+0x14c>)
 8001234:	2204      	movs	r2, #4
 8001236:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <MX_ADC1_Init+0x14c>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_ADC1_Init+0x14c>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MX_ADC1_Init+0x14c>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <MX_ADC1_Init+0x14c>)
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <MX_ADC1_Init+0x14c>)
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <MX_ADC1_Init+0x14c>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <MX_ADC1_Init+0x14c>)
 8001264:	220c      	movs	r2, #12
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <MX_ADC1_Init+0x14c>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_ADC1_Init+0x14c>)
 8001270:	2200      	movs	r2, #0
 8001272:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_ADC1_Init+0x14c>)
 8001276:	2201      	movs	r2, #1
 8001278:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127a:	482c      	ldr	r0, [pc, #176]	; (800132c <MX_ADC1_Init+0x14c>)
 800127c:	f000 fe62 	bl	8001f44 <HAL_ADC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001286:	f000 f94b 	bl	8001520 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <MX_ADC1_Init+0x14c>)
 8001296:	f001 fea1 	bl	8002fdc <HAL_ADCEx_MultiModeConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80012a0:	f000 f93e 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <MX_ADC1_Init+0x154>)
 80012a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a8:	2306      	movs	r3, #6
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012ac:	2307      	movs	r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b0:	237f      	movs	r3, #127	; 0x7f
 80012b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b4:	2304      	movs	r3, #4
 80012b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <MX_ADC1_Init+0x14c>)
 80012c2:	f001 f86f 	bl	80023a4 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80012cc:	f000 f928 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_ADC1_Init+0x158>)
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012d4:	230c      	movs	r3, #12
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_ADC1_Init+0x14c>)
 80012de:	f001 f861 	bl	80023a4 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80012e8:	f000 f91a 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_ADC1_Init+0x15c>)
 80012ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012f0:	2312      	movs	r3, #18
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_ADC1_Init+0x14c>)
 80012fa:	f001 f853 	bl	80023a4 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001304:	f000 f90c 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_ADC1_Init+0x160>)
 800130a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800130c:	2318      	movs	r3, #24
 800130e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_ADC1_Init+0x14c>)
 8001316:	f001 f845 	bl	80023a4 <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001320:	f000 f8fe 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000008c 	.word	0x2000008c
 8001330:	50040000 	.word	0x50040000
 8001334:	04300002 	.word	0x04300002
 8001338:	08600004 	.word	0x08600004
 800133c:	0c900008 	.word	0x0c900008
 8001340:	10c00010 	.word	0x10c00010

08001344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b32      	ldr	r3, [pc, #200]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001378:	4a32      	ldr	r2, [pc, #200]	; (8001444 <MX_TIM3_Init+0x100>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <MX_TIM3_Init+0xfc>)
 800137e:	224f      	movs	r2, #79	; 0x4f
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <MX_TIM3_Init+0xfc>)
 800138a:	f242 720f 	movw	r2, #9999	; 0x270f
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139c:	4828      	ldr	r0, [pc, #160]	; (8001440 <MX_TIM3_Init+0xfc>)
 800139e:	f003 fdc5 	bl	8004f2c <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013a8:	f000 f8ba 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_TIM3_Init+0xfc>)
 80013ba:	f004 f8f3 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 f8ac 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c8:	481d      	ldr	r0, [pc, #116]	; (8001440 <MX_TIM3_Init+0xfc>)
 80013ca:	f003 fe6f 	bl	80050ac <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 f8a4 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4816      	ldr	r0, [pc, #88]	; (8001440 <MX_TIM3_Init+0xfc>)
 80013e8:	f004 fdd6 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013f2:	f000 f895 	bl	8001520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_TIM3_Init+0xfc>)
 800140e:	f003 ffb5 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001418:	f000 f882 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2204      	movs	r2, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001424:	f003 ffaa 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800142e:	f000 f877 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM3_Init+0xfc>)
 8001434:	f000 f956 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000138 	.word	0x20000138
 8001444:	40000400 	.word	0x40000400

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <MX_USART2_UART_Init+0x5c>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800148c:	f004 fe0c 	bl	80060a8 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001496:	f000 f843 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000184 	.word	0x20000184
 80014a4:	40004400 	.word	0x40004400

080014a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_DMA_Init+0x2c>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <MX_DMA_Init+0x2c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6493      	str	r3, [r2, #72]	; 0x48
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_DMA_Init+0x2c>)
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_GPIO_Init+0x44>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <MX_GPIO_Init+0x44>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_GPIO_Init+0x44>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_GPIO_Init+0x44>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <MX_GPIO_Init+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_GPIO_Init+0x44>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ac      	sub	sp, #176	; 0xb0
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2288      	movs	r2, #136	; 0x88
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fafb 	bl	8006b90 <memset>
  if(hadc->Instance==ADC1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d171      	bne.n	8001688 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80015ba:	2310      	movs	r3, #16
 80015bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 ffed 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80015e0:	f7ff ff9e 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_ADC_MspInit+0x120>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_ADC_MspInit+0x120>)
 80015ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_ADC_MspInit+0x120>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_ADC_MspInit+0x120>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001614:	230f      	movs	r3, #15
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800161a:	230b      	movs	r3, #11
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800162a:	4619      	mov	r1, r3
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <HAL_ADC_MspInit+0x124>)
 800162e:	f001 ffb3 	bl	8003598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <HAL_ADC_MspInit+0x12c>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_ADC_MspInit+0x128>)
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_ADC_MspInit+0x128>)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_ADC_MspInit+0x128>)
 800165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001662:	2220      	movs	r2, #32
 8001664:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <HAL_ADC_MspInit+0x128>)
 800166e:	f001 fe4b 	bl	8003308 <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001678:	f7ff ff52 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001680:	64da      	str	r2, [r3, #76]	; 0x4c
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_ADC_MspInit+0x128>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	37b0      	adds	r7, #176	; 0xb0
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	50040000 	.word	0x50040000
 8001694:	40021000 	.word	0x40021000
 8001698:	48000800 	.word	0x48000800
 800169c:	200000f0 	.word	0x200000f0
 80016a0:	40020008 	.word	0x40020008

080016a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_TIM_Base_MspInit+0x38>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10b      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_TIM_MspPostInit+0x64>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11c      	bne.n	8001740 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_TIM_MspPostInit+0x68>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_TIM_MspPostInit+0x68>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_TIM_MspPostInit+0x68>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172e:	2302      	movs	r3, #2
 8001730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 ff2c 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40000400 	.word	0x40000400
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ac      	sub	sp, #176	; 0xb0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2288      	movs	r2, #136	; 0x88
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fa0d 	bl	8006b90 <memset>
  if(huart->Instance==USART2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_UART_MspInit+0xb0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d13b      	bne.n	80017f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4618      	mov	r0, r3
 800178e:	f002 ff11 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001798:	f7ff fec2 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017cc:	230c      	movs	r3, #12
 80017ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f001 fed0 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	37b0      	adds	r7, #176	; 0xb0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f936 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e00a      	b.n	8001884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186e:	f3af 8000 	nop.w
 8001872:	4601      	mov	r1, r0
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf0      	blt.n	800186e <_read+0x12>
  }

  return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e009      	b.n	80018bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fad9 	bl	8000e68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf1      	blt.n	80018a8 <_write+0x12>
  }
  return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_close>:

int _close(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f6:	605a      	str	r2, [r3, #4]
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_isatty>:

int _isatty(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f005 f8e8 	bl	8006b3c <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20018000 	.word	0x20018000
 8001998:	00000400 	.word	0x00000400
 800199c:	20000210 	.word	0x20000210
 80019a0:	20000228 	.word	0x20000228

080019a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff ffea 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	; (8001a14 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f005 f8a7 	bl	8006b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fa:	f7ff fa93 	bl	8000f24 <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a0c:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8001a10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a14:	20000228 	.word	0x20000228

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>

08001a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f001 fc3b 	bl	80032a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f80e 	bl	8001a4c <HAL_InitTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	e001      	b.n	8001a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3c:	f7ff fd76 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_InitTick+0x70>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fc39 	bl	80032ee <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d809      	bhi.n	8001a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f001 fc11 	bl	80032b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_InitTick+0x74>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e004      	b.n	8001aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e001      	b.n	8001aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000214 	.word	0x20000214

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000214 	.word	0x20000214

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3360      	adds	r3, #96	; 0x60
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <LL_ADC_SetOffset+0x44>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bec:	bf00      	nop
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	03fff000 	.word	0x03fff000

08001bfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3360      	adds	r3, #96	; 0x60
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3360      	adds	r3, #96	; 0x60
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3330      	adds	r3, #48	; 0x30
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	211f      	movs	r1, #31
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	f003 011f 	and.w	r1, r3, #31
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3314      	adds	r3, #20
 8001cec:	461a      	mov	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	0e5b      	lsrs	r3, r3, #25
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	0d1b      	lsrs	r3, r3, #20
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2107      	movs	r1, #7
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	0d1b      	lsrs	r3, r3, #20
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0318 	and.w	r3, r3, #24
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	0007ffff 	.word	0x0007ffff

08001d7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 031f 	and.w	r3, r3, #31
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6093      	str	r3, [r2, #8]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd0:	d101      	bne.n	8001dd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e20:	d101      	bne.n	8001e26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <LL_ADC_IsEnabled+0x18>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <LL_ADC_IsEnabled+0x1a>
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d101      	bne.n	8001ec2 <LL_ADC_IsDisableOngoing+0x18>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e136      	b.n	80021cc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fb01 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff19 	bl	8001dbc <LL_ADC_IsDeepPowerDownEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff feff 	bl	8001d98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff34 	bl	8001e0c <LL_ADC_IsInternalRegulatorEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff18 	bl	8001de4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb4:	4b87      	ldr	r3, [pc, #540]	; (80021d4 <HAL_ADC_Init+0x290>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <HAL_ADC_Init+0x294>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff16 	bl	8001e0c <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff76 	bl	8001ef8 <LL_ADC_REG_IsConversionOngoing>
 800200c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80cf 	bne.w	80021ba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80cb 	bne.w	80021ba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800202c:	f043 0202 	orr.w	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff23 	bl	8001e84 <LL_ADC_IsEnabled>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d115      	bne.n	8002070 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002044:	4865      	ldr	r0, [pc, #404]	; (80021dc <HAL_ADC_Init+0x298>)
 8002046:	f7ff ff1d 	bl	8001e84 <LL_ADC_IsEnabled>
 800204a:	4604      	mov	r4, r0
 800204c:	4864      	ldr	r0, [pc, #400]	; (80021e0 <HAL_ADC_Init+0x29c>)
 800204e:	f7ff ff19 	bl	8001e84 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	431c      	orrs	r4, r3
 8002056:	4863      	ldr	r0, [pc, #396]	; (80021e4 <HAL_ADC_Init+0x2a0>)
 8002058:	f7ff ff14 	bl	8001e84 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	485f      	ldr	r0, [pc, #380]	; (80021e8 <HAL_ADC_Init+0x2a4>)
 800206c:	f7ff fd6e 	bl	8001b4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7e5b      	ldrb	r3, [r3, #25]
 8002074:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_ADC_Init+0x2a8>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff09 	bl	8001ef8 <LL_ADC_REG_IsConversionOngoing>
 80020e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff16 	bl	8001f1e <LL_ADC_INJ_IsConversionOngoing>
 80020f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d13d      	bne.n	8002176 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13a      	bne.n	8002176 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002104:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800211c:	f023 0302 	bic.w	r3, r3, #2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	69b9      	ldr	r1, [r7, #24]
 8002126:	430b      	orrs	r3, r1
 8002128:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002130:	2b01      	cmp	r3, #1
 8002132:	d118      	bne.n	8002166 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002156:	430a      	orrs	r2, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	e007      	b.n	8002176 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f023 010f 	bic.w	r1, r3, #15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	1e5a      	subs	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e007      	b.n	80021a8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020f 	bic.w	r2, r2, #15
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f023 0303 	bic.w	r3, r3, #3
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
 80021b8:	e007      	b.n	80021ca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3724      	adds	r7, #36	; 0x24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}
 80021d4:	20000000 	.word	0x20000000
 80021d8:	053e2d63 	.word	0x053e2d63
 80021dc:	50040000 	.word	0x50040000
 80021e0:	50040100 	.word	0x50040100
 80021e4:	50040200 	.word	0x50040200
 80021e8:	50040300 	.word	0x50040300
 80021ec:	fff0c007 	.word	0xfff0c007

080021f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021fc:	4853      	ldr	r0, [pc, #332]	; (800234c <HAL_ADC_Start_DMA+0x15c>)
 80021fe:	f7ff fdbd 	bl	8001d7c <LL_ADC_GetMultimode>
 8002202:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fe75 	bl	8001ef8 <LL_ADC_REG_IsConversionOngoing>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 8093 	bne.w	800233c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_ADC_Start_DMA+0x34>
 8002220:	2302      	movs	r3, #2
 8002222:	e08e      	b.n	8002342 <HAL_ADC_Start_DMA+0x152>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_ADC_Start_DMA+0x160>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d008      	beq.n	8002248 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d002      	beq.n	8002248 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d172      	bne.n	800232e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fc9b 	bl	8002b84 <ADC_Enable>
 800224e:	4603      	mov	r3, r0
 8002250:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d165      	bne.n	8002324 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_ADC_Start_DMA+0x164>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d002      	beq.n	800227c <HAL_ADC_Start_DMA+0x8c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	e000      	b.n	800227e <HAL_ADC_Start_DMA+0x8e>
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_ADC_Start_DMA+0x168>)
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	4293      	cmp	r3, r2
 8002284:	d002      	beq.n	800228c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f023 0206 	bic.w	r2, r3, #6
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_ADC_Start_DMA+0x16c>)
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_ADC_Start_DMA+0x170>)
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <HAL_ADC_Start_DMA+0x174>)
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	221c      	movs	r2, #28
 80022d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0210 	orr.w	r2, r2, #16
 80022ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3340      	adds	r3, #64	; 0x40
 800230a:	4619      	mov	r1, r3
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f001 f8b2 	bl	8003478 <HAL_DMA_Start_IT>
 8002314:	4603      	mov	r3, r0
 8002316:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fdd7 	bl	8001ed0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002322:	e00d      	b.n	8002340 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800232c:	e008      	b.n	8002340 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800233a:	e001      	b.n	8002340 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800233c:	2302      	movs	r3, #2
 800233e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002340:	7dfb      	ldrb	r3, [r7, #23]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	50040300 	.word	0x50040300
 8002350:	50040200 	.word	0x50040200
 8002354:	50040100 	.word	0x50040100
 8002358:	50040000 	.word	0x50040000
 800235c:	08002d4f 	.word	0x08002d4f
 8002360:	08002e27 	.word	0x08002e27
 8002364:	08002e43 	.word	0x08002e43

08002368 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0b6      	sub	sp, #216	; 0xd8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x22>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e3c7      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x7b2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fd90 	bl	8001ef8 <LL_ADC_REG_IsConversionOngoing>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 83a8 	bne.w	8002b30 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d824      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	3b02      	subs	r3, #2
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d81b      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x86>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_ADC_ConfigChannel+0x54>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	08002411 	.word	0x08002411
 8002400:	08002419 	.word	0x08002419
 8002404:	08002421 	.word	0x08002421
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	220c      	movs	r2, #12
 800240c:	605a      	str	r2, [r3, #4]
          break;
 800240e:	e011      	b.n	8002434 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2212      	movs	r2, #18
 8002414:	605a      	str	r2, [r3, #4]
          break;
 8002416:	e00d      	b.n	8002434 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2218      	movs	r2, #24
 800241c:	605a      	str	r2, [r3, #4]
          break;
 800241e:	e009      	b.n	8002434 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002426:	605a      	str	r2, [r3, #4]
          break;
 8002428:	e004      	b.n	8002434 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2206      	movs	r2, #6
 800242e:	605a      	str	r2, [r3, #4]
          break;
 8002430:	e000      	b.n	8002434 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002432:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f7ff fc1f 	bl	8001c84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fd54 	bl	8001ef8 <LL_ADC_REG_IsConversionOngoing>
 8002450:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fd60 	bl	8001f1e <LL_ADC_INJ_IsConversionOngoing>
 800245e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002462:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 81a6 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 81a1 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	f7ff fc2a 	bl	8001cdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00a      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ba:	f7ff fb7b 	bl	8001bb4 <LL_ADC_SetOffset>
 80024be:	e17b      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fb98 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x148>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fb8d 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	e01e      	b.n	800252a <HAL_ADC_ConfigChannel+0x186>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fb82 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800250a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800250e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800251e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x19e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	e018      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800255e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800256a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fb51 	bl	8001c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb35 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x20e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb2a 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	e01e      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x24c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fb1f 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80025e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x264>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	e018      	b.n	800263a <HAL_ADC_ConfigChannel+0x296>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800261c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff faee 	bl	8001c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2102      	movs	r1, #2
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fad2 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x2d4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2102      	movs	r1, #2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fac7 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	e01e      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x312>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fabc 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800269e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80026aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x32a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	e016      	b.n	80026fc <HAL_ADC_ConfigChannel+0x358>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80026f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fa8d 	bl	8001c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2103      	movs	r1, #3
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fa71 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x396>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2103      	movs	r1, #3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fa66 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	e017      	b.n	800276a <HAL_ADC_ConfigChannel+0x3c6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2103      	movs	r1, #3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fa5b 	bl	8001bfc <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002754:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x3de>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	e011      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x402>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002792:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800279e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2103      	movs	r1, #3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fa38 	bl	8001c28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb61 	bl	8001e84 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 813f 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7ff faac 	bl	8001d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a8e      	ldr	r2, [pc, #568]	; (8002a1c <HAL_ADC_ConfigChannel+0x678>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 8130 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x46c>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b09      	cmp	r3, #9
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e019      	b.n	8002844 <HAL_ADC_ConfigChannel+0x4a0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800282c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2b09      	cmp	r3, #9
 800283c:	bf94      	ite	ls
 800283e:	2301      	movls	r3, #1
 8002840:	2300      	movhi	r3, #0
 8002842:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	2b00      	cmp	r3, #0
 8002846:	d079      	beq.n	800293c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x4c0>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002862:	e015      	b.n	8002890 <HAL_ADC_ConfigChannel+0x4ec>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002874:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x50c>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	e017      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x53c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80028cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	ea42 0103 	orr.w	r1, r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x562>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	3301      	adds	r3, #1
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	051b      	lsls	r3, r3, #20
 8002904:	e018      	b.n	8002938 <HAL_ADC_ConfigChannel+0x594>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002938:	430b      	orrs	r3, r1
 800293a:	e080      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x5b4>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002956:	e015      	b.n	8002984 <HAL_ADC_ConfigChannel+0x5e0>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e003      	b.n	800297c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x600>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	e017      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x630>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	61fb      	str	r3, [r7, #28]
  return result;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x65c>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	3b1e      	subs	r3, #30
 80029f8:	051b      	lsls	r3, r3, #20
 80029fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fe:	e01d      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x698>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	613b      	str	r3, [r7, #16]
  return result;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e005      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x684>
 8002a1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 021f 	and.w	r2, r3, #31
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	3b1e      	subs	r3, #30
 8002a36:	051b      	lsls	r3, r3, #20
 8002a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	6892      	ldr	r2, [r2, #8]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7ff f94a 	bl	8001cdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07a      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a54:	4843      	ldr	r0, [pc, #268]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a56:	f7ff f89f 	bl	8001b98 <LL_ADC_GetCommonPathInternalCh>
 8002a5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a41      	ldr	r2, [pc, #260]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d12c      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x6e4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d15d      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a90:	4619      	mov	r1, r3
 8002a92:	4834      	ldr	r0, [pc, #208]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a94:	f7ff f86d 	bl	8001b72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_ADC_ConfigChannel+0x7d4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ab2:	e002      	b.n	8002aba <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac0:	e040      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <HAL_ADC_ConfigChannel+0x7d8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d118      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x75a>
 8002acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d112      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <HAL_ADC_ConfigChannel+0x7c8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x748>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d12d      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af4:	4619      	mov	r1, r3
 8002af6:	481b      	ldr	r0, [pc, #108]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002af8:	f7ff f83b 	bl	8001b72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002afc:	e024      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d120      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11a      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d115      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b26:	4619      	mov	r1, r3
 8002b28:	480e      	ldr	r0, [pc, #56]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b2a:	f7ff f822 	bl	8001b72 <LL_ADC_SetCommonPathInternalCh>
 8002b2e:	e00c      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b42:	e002      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	37d8      	adds	r7, #216	; 0xd8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	80080000 	.word	0x80080000
 8002b64:	50040300 	.word	0x50040300
 8002b68:	c7520000 	.word	0xc7520000
 8002b6c:	50040000 	.word	0x50040000
 8002b70:	50040200 	.word	0x50040200
 8002b74:	20000000 	.word	0x20000000
 8002b78:	053e2d63 	.word	0x053e2d63
 8002b7c:	cb840000 	.word	0xcb840000
 8002b80:	80000001 	.word	0x80000001

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f975 	bl	8001e84 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d169      	bne.n	8002c74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <ADC_Enable+0xfc>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e055      	b.n	8002c76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f930 	bl	8001e34 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bd4:	482b      	ldr	r0, [pc, #172]	; (8002c84 <ADC_Enable+0x100>)
 8002bd6:	f7fe ffdf 	bl	8001b98 <LL_ADC_GetCommonPathInternalCh>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <ADC_Enable+0x104>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <ADC_Enable+0x108>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002bfe:	e002      	b.n	8002c06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe ff6e 	bl	8001aec <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c12:	e028      	b.n	8002c66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f933 	bl	8001e84 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f903 	bl	8001e34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c2e:	f7fe ff5d 	bl	8001aec <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d00d      	beq.n	8002c66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d1cf      	bne.n	8002c14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	8000003f 	.word	0x8000003f
 8002c84:	50040300 	.word	0x50040300
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	053e2d63 	.word	0x053e2d63

08002c90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff f904 	bl	8001eaa <LL_ADC_IsDisableOngoing>
 8002ca2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f8eb 	bl	8001e84 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d144      	bne.n	8002d44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030d 	and.w	r3, r3, #13
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10c      	bne.n	8002ce2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f8c5 	bl	8001e5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cda:	f7fe ff07 	bl	8001aec <HAL_GetTick>
 8002cde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce0:	e029      	b.n	8002d36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e023      	b.n	8002d46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cfe:	f7fe fef5 	bl	8001aec <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d914      	bls.n	8002d36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1dc      	bne.n	8002cfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d14b      	bne.n	8002e00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d021      	beq.n	8002dc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff69 	bl	8001c5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d032      	beq.n	8002df8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d12b      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11f      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
 8002dc4:	e018      	b.n	8002df8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fab5 	bl	8002368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dfe:	e00e      	b.n	8002e1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fabf 	bl	8002390 <HAL_ADC_ErrorCallback>
}
 8002e12:	e004      	b.n	8002e1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff faa1 	bl	800237c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff fa91 	bl	8002390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <LL_ADC_IsEnabled>:
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_IsEnabled+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_IsEnabled+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_StartCalibration>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002eae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_IsCalibrationOnGoing>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e04d      	b.n	8002fd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fea5 	bl	8002c90 <ADC_Disable>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d136      	bne.n	8002fbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff96 	bl	8002e9c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f70:	e014      	b.n	8002f9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002f7e:	d30d      	bcc.n	8002f9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f023 0312 	bic.w	r3, r3, #18
 8002f88:	f043 0210 	orr.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e01b      	b.n	8002fd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff94 	bl	8002ece <LL_ADC_IsCalibrationOnGoing>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e2      	bne.n	8002f72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f023 0303 	bic.w	r3, r3, #3
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
 8002fbc:	e005      	b.n	8002fca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f043 0210 	orr.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b09f      	sub	sp, #124	; 0x7c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e093      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003002:	2300      	movs	r3, #0
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003006:	2300      	movs	r3, #0
 8003008:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a47      	ldr	r2, [pc, #284]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e001      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e072      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff59 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8003044:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff53 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d154      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003058:	2b00      	cmp	r3, #0
 800305a:	d151      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800305e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02c      	beq.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307a:	035b      	lsls	r3, r3, #13
 800307c:	430b      	orrs	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003084:	4829      	ldr	r0, [pc, #164]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003086:	f7ff fef6 	bl	8002e76 <LL_ADC_IsEnabled>
 800308a:	4604      	mov	r4, r0
 800308c:	4828      	ldr	r0, [pc, #160]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800308e:	f7ff fef2 	bl	8002e76 <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	431c      	orrs	r4, r3
 8003096:	4828      	ldr	r0, [pc, #160]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003098:	f7ff feed 	bl	8002e76 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	4323      	orrs	r3, r4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d137      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030ac:	f023 030f 	bic.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c0:	e028      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ce:	4817      	ldr	r0, [pc, #92]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030d0:	f7ff fed1 	bl	8002e76 <LL_ADC_IsEnabled>
 80030d4:	4604      	mov	r4, r0
 80030d6:	4816      	ldr	r0, [pc, #88]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d8:	f7ff fecd 	bl	8002e76 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	431c      	orrs	r4, r3
 80030e0:	4815      	ldr	r0, [pc, #84]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030e2:	f7ff fec8 	bl	8002e76 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4323      	orrs	r3, r4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030fe:	e009      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003112:	e000      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003122:	4618      	mov	r0, r3
 8003124:	377c      	adds	r7, #124	; 0x7c
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	50040000 	.word	0x50040000
 8003130:	50040100 	.word	0x50040100
 8003134:	50040300 	.word	0x50040300
 8003138:	50040200 	.word	0x50040200

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	; (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	; (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800326c:	d301      	bcc.n	8003272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326e:	2301      	movs	r3, #1
 8003270:	e00f      	b.n	8003292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003272:	4a0a      	ldr	r2, [pc, #40]	; (800329c <SysTick_Config+0x40>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327a:	210f      	movs	r1, #15
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f7ff ff8e 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <SysTick_Config+0x40>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <SysTick_Config+0x40>)
 800328c:	2207      	movs	r2, #7
 800328e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff47 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c8:	f7ff ff5c 	bl	8003184 <__NVIC_GetPriorityGrouping>
 80032cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7ff ff8e 	bl	80031f4 <NVIC_EncodePriority>
 80032d8:	4602      	mov	r2, r0
 80032da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff5d 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffb0 	bl	800325c <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e098      	b.n	800344c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_DMA_Init+0x150>)
 8003322:	429a      	cmp	r2, r3
 8003324:	d80f      	bhi.n	8003346 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_DMA_Init+0x154>)
 800332e:	4413      	add	r3, r2
 8003330:	4a4b      	ldr	r2, [pc, #300]	; (8003460 <HAL_DMA_Init+0x158>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	009a      	lsls	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a48      	ldr	r2, [pc, #288]	; (8003464 <HAL_DMA_Init+0x15c>)
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
 8003344:	e00e      	b.n	8003364 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_DMA_Init+0x160>)
 800334e:	4413      	add	r3, r2
 8003350:	4a43      	ldr	r2, [pc, #268]	; (8003460 <HAL_DMA_Init+0x158>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_DMA_Init+0x164>)
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033be:	d039      	beq.n	8003434 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <HAL_DMA_Init+0x15c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d11a      	bne.n	8003400 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_DMA_Init+0x168>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f003 031c 	and.w	r3, r3, #28
 80033d6:	210f      	movs	r1, #15
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	4924      	ldr	r1, [pc, #144]	; (8003470 <HAL_DMA_Init+0x168>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_DMA_Init+0x168>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f003 031c 	and.w	r3, r3, #28
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	491d      	ldr	r1, [pc, #116]	; (8003470 <HAL_DMA_Init+0x168>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
 80033fe:	e019      	b.n	8003434 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_DMA_Init+0x16c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	210f      	movs	r1, #15
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	4917      	ldr	r1, [pc, #92]	; (8003474 <HAL_DMA_Init+0x16c>)
 8003416:	4013      	ands	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_DMA_Init+0x16c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f003 031c 	and.w	r3, r3, #28
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	4911      	ldr	r1, [pc, #68]	; (8003474 <HAL_DMA_Init+0x16c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40020407 	.word	0x40020407
 800345c:	bffdfff8 	.word	0xbffdfff8
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	40020000 	.word	0x40020000
 8003468:	bffdfbf8 	.word	0xbffdfbf8
 800346c:	40020400 	.word	0x40020400
 8003470:	400200a8 	.word	0x400200a8
 8003474:	400204a8 	.word	0x400204a8

08003478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e04b      	b.n	8003530 <HAL_DMA_Start_IT+0xb8>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d13a      	bne.n	8003522 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f831 	bl	8003538 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 020e 	orr.w	r2, r2, #14
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00f      	b.n	8003510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 020a 	orr.w	r2, r2, #10
 800350e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e005      	b.n	800352e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 021c 	and.w	r2, r3, #28
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2101      	movs	r1, #1
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d108      	bne.n	800357c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800357a:	e007      	b.n	800358c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	e17f      	b.n	80038a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8171 	beq.w	80038a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d118      	bne.n	8003678 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d017      	beq.n	80036b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d123      	bne.n	8003708 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80ac 	beq.w	80038a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_GPIO_Init+0x330>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	4a5e      	ldr	r2, [pc, #376]	; (80038c8 <HAL_GPIO_Init+0x330>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6613      	str	r3, [r2, #96]	; 0x60
 8003756:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_GPIO_Init+0x330>)
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003762:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_GPIO_Init+0x334>)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	220f      	movs	r2, #15
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800378c:	d025      	beq.n	80037da <HAL_GPIO_Init+0x242>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_GPIO_Init+0x338>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <HAL_GPIO_Init+0x23e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_GPIO_Init+0x33c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d019      	beq.n	80037d2 <HAL_GPIO_Init+0x23a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_GPIO_Init+0x340>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_GPIO_Init+0x236>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_GPIO_Init+0x344>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00d      	beq.n	80037ca <HAL_GPIO_Init+0x232>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_GPIO_Init+0x348>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <HAL_GPIO_Init+0x22e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <HAL_GPIO_Init+0x34c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d101      	bne.n	80037c2 <HAL_GPIO_Init+0x22a>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037c2:	2307      	movs	r3, #7
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037da:	2300      	movs	r3, #0
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_GPIO_Init+0x334>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_GPIO_Init+0x350>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f ae78 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	48000400 	.word	0x48000400
 80038d4:	48000800 	.word	0x48000800
 80038d8:	48000c00 	.word	0x48000c00
 80038dc:	48001000 	.word	0x48001000
 80038e0:	48001400 	.word	0x48001400
 80038e4:	48001800 	.word	0x48001800
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_PWREx_GetVoltageRange+0x18>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000

08003908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d130      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003924:	d038      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392e:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2232      	movs	r2, #50	; 0x32
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	e002      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b01      	subs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d102      	bne.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f2      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d110      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d007      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003996:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000
 80039ac:	20000000 	.word	0x20000000
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e3ca      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c6:	4b97      	ldr	r3, [pc, #604]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d0:	4b94      	ldr	r3, [pc, #592]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80e4 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_RCC_OscConfig+0x4a>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	f040 808b 	bne.w	8003b0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	f040 8087 	bne.w	8003b0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039fe:	4b89      	ldr	r3, [pc, #548]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e3a2      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_RCC_OscConfig+0x7c>
 8003a26:	4b7f      	ldr	r3, [pc, #508]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2e:	e005      	b.n	8003a3c <HAL_RCC_OscConfig+0x88>
 8003a30:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d223      	bcs.n	8003a88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fd55 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e383      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a54:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a72      	ldr	r2, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f043 0308 	orr.w	r3, r3, #8
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	496d      	ldr	r1, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	4968      	ldr	r1, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
 8003a86:	e025      	b.n	8003ad4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a88:	4b66      	ldr	r3, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4960      	ldr	r1, [pc, #384]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	495b      	ldr	r1, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fd15 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e343      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad4:	f000 fc4a 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	4950      	ldr	r1, [pc, #320]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	4a4e      	ldr	r2, [pc, #312]	; (8003c2c <HAL_RCC_OscConfig+0x278>)
 8003af2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003af4:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd ffa7 	bl	8001a4c <HAL_InitTick>
 8003afe:	4603      	mov	r3, r0
 8003b00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d052      	beq.n	8003bae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	e327      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d032      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a42      	ldr	r2, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b20:	f7fd ffe4 	bl	8001aec <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b28:	f7fd ffe0 	bl	8001aec <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e310      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b46:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a36      	ldr	r2, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4931      	ldr	r1, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b64:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	492c      	ldr	r1, [pc, #176]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
 8003b78:	e01a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b86:	f7fd ffb1 	bl	8001aec <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b8e:	f7fd ffad 	bl	8001aec <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e2dd      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ba0:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1da>
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d074      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x21a>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d10e      	bne.n	8003be6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d064      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d160      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e2ba      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x24a>
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e026      	b.n	8003c4c <HAL_RCC_OscConfig+0x298>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c06:	d115      	bne.n	8003c34 <HAL_RCC_OscConfig+0x280>
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a02      	ldr	r2, [pc, #8]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x298>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08008b84 	.word	0x08008b84
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	20000004 	.word	0x20000004
 8003c34:	4ba0      	ldr	r3, [pc, #640]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a9f      	ldr	r2, [pc, #636]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b9d      	ldr	r3, [pc, #628]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a9c      	ldr	r2, [pc, #624]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd ff4a 	bl	8001aec <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd ff46 	bl	8001aec <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e276      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	4b92      	ldr	r3, [pc, #584]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2a8>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd ff36 	bl	8001aec <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd ff32 	bl	8001aec <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e262      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c96:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2d0>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d060      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x310>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d119      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d116      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc4:	4b7c      	ldr	r3, [pc, #496]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_OscConfig+0x328>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e23f      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	4973      	ldr	r1, [pc, #460]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf0:	e040      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d023      	beq.n	8003d42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfa:	4b6f      	ldr	r3, [pc, #444]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fef1 	bl	8001aec <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fd feed 	bl	8001aec <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e21d      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d20:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	495f      	ldr	r1, [pc, #380]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	e018      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fecd 	bl	8001aec <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fd fec9 	bl	8001aec <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1f9      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d03c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd fea8 	bl	8001aec <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fd fea4 	bl	8001aec <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e1d4      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <HAL_RCC_OscConfig+0x3ec>
 8003dc0:	e01b      	b.n	8003dfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc8:	4a3b      	ldr	r2, [pc, #236]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fd fe8b 	bl	8001aec <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fd fe87 	bl	8001aec <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1b7      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ef      	bne.n	8003dda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80a6 	beq.w	8003f54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	; 0x58
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d118      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fe4e 	bl	8001aec <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fd fe4a 	bl	8001aec <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e17a      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4d8>
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e8a:	e029      	b.n	8003ee0 <HAL_RCC_OscConfig+0x52c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d115      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x50c>
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	4a03      	ldr	r2, [pc, #12]	; (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb4:	e014      	b.n	8003ee0 <HAL_RCC_OscConfig+0x52c>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	4b9c      	ldr	r3, [pc, #624]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	4a9b      	ldr	r2, [pc, #620]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed0:	4b98      	ldr	r3, [pc, #608]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	4a97      	ldr	r2, [pc, #604]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d016      	beq.n	8003f16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fe00 	bl	8001aec <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fdfc 	bl	8001aec <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e12a      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ed      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x53c>
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fde9 	bl	8001aec <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fde5 	bl	8001aec <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e113      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f34:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ed      	bne.n	8003f1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f48:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	4a79      	ldr	r2, [pc, #484]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80fe 	beq.w	800415a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	f040 80d0 	bne.w	8004108 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f68:	4b72      	ldr	r3, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0203 	and.w	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d130      	bne.n	8003fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	3b01      	subs	r3, #1
 8003f88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d127      	bne.n	8003fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11f      	bne.n	8003fde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa8:	2a07      	cmp	r2, #7
 8003faa:	bf14      	ite	ne
 8003fac:	2201      	movne	r2, #1
 8003fae:	2200      	moveq	r2, #0
 8003fb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d113      	bne.n	8003fde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d06e      	beq.n	80040bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d069      	beq.n	80040b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0ad      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004000:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fd fd6e 	bl	8001aec <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fd6a 	bl	8001aec <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e09a      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004032:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	4b40      	ldr	r3, [pc, #256]	; (8004138 <HAL_RCC_OscConfig+0x784>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004042:	3a01      	subs	r2, #1
 8004044:	0112      	lsls	r2, r2, #4
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800404c:	0212      	lsls	r2, r2, #8
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004054:	0852      	lsrs	r2, r2, #1
 8004056:	3a01      	subs	r2, #1
 8004058:	0552      	lsls	r2, r2, #21
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004060:	0852      	lsrs	r2, r2, #1
 8004062:	3a01      	subs	r2, #1
 8004064:	0652      	lsls	r2, r2, #25
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406c:	0912      	lsrs	r2, r2, #4
 800406e:	0452      	lsls	r2, r2, #17
 8004070:	430a      	orrs	r2, r1
 8004072:	4930      	ldr	r1, [pc, #192]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004074:	4313      	orrs	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2d      	ldr	r2, [pc, #180]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004090:	f7fd fd2c 	bl	8001aec <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fd28 	bl	8001aec <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e058      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b6:	e050      	b.n	800415a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e04f      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d148      	bne.n	800415a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a16      	ldr	r2, [pc, #88]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e0:	f7fd fd04 	bl	8001aec <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fd00 	bl	8001aec <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e030      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x734>
 8004106:	e028      	b.n	800415a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d023      	beq.n	8004156 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_RCC_OscConfig+0x780>)
 8004114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fd fce7 	bl	8001aec <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	e00c      	b.n	800413c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fd fce3 	bl	8001aec <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d905      	bls.n	800413c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e013      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
 8004134:	40021000 	.word	0x40021000
 8004138:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_RCC_OscConfig+0x7b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ec      	bne.n	8004122 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x7b0>)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4905      	ldr	r1, [pc, #20]	; (8004164 <HAL_RCC_OscConfig+0x7b0>)
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x7b4>)
 8004150:	4013      	ands	r3, r2
 8004152:	60cb      	str	r3, [r1, #12]
 8004154:	e001      	b.n	800415a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000
 8004168:	feeefffc 	.word	0xfeeefffc

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0e7      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b75      	ldr	r3, [pc, #468]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d910      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b72      	ldr	r3, [pc, #456]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 0207 	bic.w	r2, r3, #7
 8004196:	4970      	ldr	r1, [pc, #448]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b6e      	ldr	r3, [pc, #440]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0cf      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d010      	beq.n	80041de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d908      	bls.n	80041de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4960      	ldr	r1, [pc, #384]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04c      	beq.n	8004284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	4b5a      	ldr	r3, [pc, #360]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0a6      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420a:	4b54      	ldr	r3, [pc, #336]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e09a      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004222:	4b4e      	ldr	r3, [pc, #312]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e08e      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e086      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4943      	ldr	r1, [pc, #268]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd fc4a 	bl	8001aec <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd fc46 	bl	8001aec <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e06e      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b3a      	ldr	r3, [pc, #232]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	429a      	cmp	r2, r3
 800429e:	d208      	bcs.n	80042b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b2e      	ldr	r3, [pc, #184]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	492b      	ldr	r1, [pc, #172]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d210      	bcs.n	80042e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 0207 	bic.w	r2, r3, #7
 80042c8:	4923      	ldr	r1, [pc, #140]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d0:	4b21      	ldr	r3, [pc, #132]	; (8004358 <HAL_RCC_ClockConfig+0x1ec>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e036      	b.n	8004350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ee:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4918      	ldr	r1, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4910      	ldr	r1, [pc, #64]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004320:	f000 f824 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	490b      	ldr	r1, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x1f4>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <HAL_RCC_ClockConfig+0x1f8>)
 800433e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1fc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd fb81 	bl	8001a4c <HAL_InitTick>
 800434a:	4603      	mov	r3, r0
 800434c:	72fb      	strb	r3, [r7, #11]

  return status;
 800434e:	7afb      	ldrb	r3, [r7, #11]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	08008b84 	.word	0x08008b84
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d121      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d11e      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d102      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_GetSysClockFreq+0x110>)
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e004      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f0:	4b23      	ldr	r3, [pc, #140]	; (8004480 <HAL_RCC_GetSysClockFreq+0x114>)
 80043f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0c      	cmp	r3, #12
 80043f8:	d134      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0xa6>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d003      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0xac>
 8004410:	e005      	b.n	800441e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <HAL_RCC_GetSysClockFreq+0x110>)
 8004414:	617b      	str	r3, [r7, #20]
      break;
 8004416:	e005      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_GetSysClockFreq+0x114>)
 800441a:	617b      	str	r3, [r7, #20]
      break;
 800441c:	e002      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	617b      	str	r3, [r7, #20]
      break;
 8004422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	fb03 f202 	mul.w	r2, r3, r2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0e5b      	lsrs	r3, r3, #25
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	3301      	adds	r3, #1
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004464:	69bb      	ldr	r3, [r7, #24]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08008b9c 	.word	0x08008b9c
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200

08004484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044a0:	f7ff fff0 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4904      	ldr	r1, [pc, #16]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08008b94 	.word	0x08008b94

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044cc:	f7ff ffda 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0adb      	lsrs	r3, r3, #11
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4904      	ldr	r1, [pc, #16]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08008b94 	.word	0x08008b94

080044f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800450c:	f7ff f9ee 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 8004510:	6178      	str	r0, [r7, #20]
 8004512:	e014      	b.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6593      	str	r3, [r2, #88]	; 0x58
 8004520:	4b22      	ldr	r3, [pc, #136]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800452c:	f7ff f9de 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 8004530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004544:	d10b      	bne.n	800455e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d919      	bls.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2ba0      	cmp	r3, #160	; 0xa0
 8004550:	d902      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004552:	2302      	movs	r3, #2
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e013      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004558:	2301      	movs	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e010      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d902      	bls.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004564:	2303      	movs	r3, #3
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e00a      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d102      	bne.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004570:	2302      	movs	r3, #2
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e004      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d101      	bne.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800457c:	2301      	movs	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	4909      	ldr	r1, [pc, #36]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40022000 	.word	0x40022000

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045bc:	2300      	movs	r3, #0
 80045be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d041      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045d8:	d02a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045de:	d824      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e4:	d008      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ea:	d81e      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f4:	d010      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045f6:	e018      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045f8:	4b86      	ldr	r3, [pc, #536]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a85      	ldr	r2, [pc, #532]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004604:	e015      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fabb 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004616:	e00c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3320      	adds	r3, #32
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fba6 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	74fb      	strb	r3, [r7, #19]
      break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004638:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004646:	4973      	ldr	r1, [pc, #460]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800464e:	e001      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d041      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004668:	d02a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800466a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800466e:	d824      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004674:	d008      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800467a:	d81e      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004684:	d010      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004686:	e018      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004688:	4b62      	ldr	r3, [pc, #392]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a61      	ldr	r2, [pc, #388]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004694:	e015      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fa73 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a6:	e00c      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3320      	adds	r3, #32
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb5e 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b8:	e003      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	74fb      	strb	r3, [r7, #19]
      break;
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c8:	4b52      	ldr	r3, [pc, #328]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	494f      	ldr	r1, [pc, #316]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a0 	beq.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470c:	4b41      	ldr	r3, [pc, #260]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	4a40      	ldr	r2, [pc, #256]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6593      	str	r3, [r2, #88]	; 0x58
 8004718:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004724:	2301      	movs	r3, #1
 8004726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004734:	f7fd f9da 	bl	8001aec <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800473a:	e009      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fd f9d6 	bl	8001aec <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	74fb      	strb	r3, [r7, #19]
        break;
 800474e:	e005      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d15c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d019      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800479c:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ac:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fd f995 	bl	8001aec <HAL_GetTick>
 80047c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c4:	e00b      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd f991 	bl	8001aec <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d902      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	74fb      	strb	r3, [r7, #19]
            break;
 80047dc:	e006      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ec      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10c      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004802:	4904      	ldr	r1, [pc, #16]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800480a:	e009      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
 8004810:	e006      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004820:	7c7b      	ldrb	r3, [r7, #17]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b9e      	ldr	r3, [pc, #632]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	4a9d      	ldr	r2, [pc, #628]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483e:	4b98      	ldr	r3, [pc, #608]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f023 0203 	bic.w	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4994      	ldr	r1, [pc, #592]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004860:	4b8f      	ldr	r3, [pc, #572]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f023 020c 	bic.w	r2, r3, #12
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	498c      	ldr	r1, [pc, #560]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004882:	4b87      	ldr	r3, [pc, #540]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4983      	ldr	r1, [pc, #524]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a4:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	497b      	ldr	r1, [pc, #492]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	4972      	ldr	r1, [pc, #456]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e8:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	496a      	ldr	r1, [pc, #424]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	4961      	ldr	r1, [pc, #388]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800492c:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	4959      	ldr	r1, [pc, #356]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494e:	4b54      	ldr	r3, [pc, #336]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	4950      	ldr	r1, [pc, #320]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004970:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	4948      	ldr	r1, [pc, #288]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004992:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	493f      	ldr	r1, [pc, #252]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d028      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b4:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c2:	4937      	ldr	r1, [pc, #220]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d2:	d106      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a31      	ldr	r2, [pc, #196]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
 80049e0:	e011      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f8c8 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d028      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a12:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	491f      	ldr	r1, [pc, #124]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a30:	d106      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3c:	60d3      	str	r3, [r2, #12]
 8004a3e:	e011      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f899 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02b      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	4908      	ldr	r1, [pc, #32]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8e:	d109      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a02      	ldr	r2, [pc, #8]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9a:	60d3      	str	r3, [r2, #12]
 8004a9c:	e014      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f867 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d02f      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae2:	4928      	ldr	r1, [pc, #160]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af2:	d10d      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	2102      	movs	r1, #2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f844 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b04:	7cfb      	ldrb	r3, [r7, #19]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	74bb      	strb	r3, [r7, #18]
 8004b0e:	e011      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3320      	adds	r3, #32
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f925 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b40:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	490d      	ldr	r1, [pc, #52]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b72:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40021000 	.word	0x40021000

08004b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b96:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ba2:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0203 	and.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10d      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bba:	4b6c      	ldr	r3, [pc, #432]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d047      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
 8004bd2:	e044      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d018      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x86>
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d825      	bhi.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d002      	beq.n	8004bea <RCCEx_PLLSAI1_Config+0x62>
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d009      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x74>
 8004be8:	e020      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bea:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfa:	e01a      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfc:	4b5b      	ldr	r3, [pc, #364]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d116      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0c:	e013      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c0e:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c1a:	4b54      	ldr	r3, [pc, #336]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c2a:	e006      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e004      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	430b      	orrs	r3, r1
 8004c58:	4944      	ldr	r1, [pc, #272]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d17d      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c64:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fc ff3c 	bl	8001aec <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c76:	e009      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c78:	f7fc ff38 	bl	8001aec <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8a:	e005      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8c:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ef      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d160      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d111      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6892      	ldr	r2, [r2, #8]
 8004cb4:	0211      	lsls	r1, r2, #8
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	0912      	lsrs	r2, r2, #4
 8004cbc:	0452      	lsls	r2, r2, #17
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	492a      	ldr	r1, [pc, #168]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
 8004cc6:	e027      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d112      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	0211      	lsls	r1, r2, #8
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6912      	ldr	r2, [r2, #16]
 8004ce4:	0852      	lsrs	r2, r2, #1
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0552      	lsls	r2, r2, #21
 8004cea:	430a      	orrs	r2, r1
 8004cec:	491f      	ldr	r1, [pc, #124]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
 8004cf2:	e011      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6952      	ldr	r2, [r2, #20]
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0652      	lsls	r2, r2, #25
 8004d10:	430a      	orrs	r2, r1
 8004d12:	4916      	ldr	r1, [pc, #88]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d18:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fc fee2 	bl	8001aec <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d2a:	e009      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d2c:	f7fc fede 	bl	8001aec <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d902      	bls.n	8004d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3e:	e005      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ef      	beq.n	8004d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4904      	ldr	r1, [pc, #16]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000

08004d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d018      	beq.n	8004dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d8a:	4b67      	ldr	r3, [pc, #412]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0203 	and.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d10d      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004da2:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
       ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d047      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	e044      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d018      	beq.n	8004df6 <RCCEx_PLLSAI2_Config+0x86>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d825      	bhi.n	8004e14 <RCCEx_PLLSAI2_Config+0xa4>
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d002      	beq.n	8004dd2 <RCCEx_PLLSAI2_Config+0x62>
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d009      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x74>
 8004dd0:	e020      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dd2:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11d      	bne.n	8004e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de2:	e01a      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df4:	e013      	b.n	8004e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e12:	e006      	b.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e004      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	4939      	ldr	r1, [pc, #228]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d167      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a35      	ldr	r2, [pc, #212]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc fe48 	bl	8001aec <HAL_GetTick>
 8004e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e60:	f7fc fe44 	bl	8001aec <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d902      	bls.n	8004e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	73fb      	strb	r3, [r7, #15]
        break;
 8004e72:	e005      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ef      	bne.n	8004e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d14a      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d111      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e8c:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6892      	ldr	r2, [r2, #8]
 8004e9c:	0211      	lsls	r1, r2, #8
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	0912      	lsrs	r2, r2, #4
 8004ea4:	0452      	lsls	r2, r2, #17
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	614b      	str	r3, [r1, #20]
 8004eae:	e011      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	0211      	lsls	r1, r2, #8
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6912      	ldr	r2, [r2, #16]
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0652      	lsls	r2, r2, #25
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4916      	ldr	r1, [pc, #88]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fc fe04 	bl	8001aec <HAL_GetTick>
 8004ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee6:	e009      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ee8:	f7fc fe00 	bl	8001aec <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8004efa:	e005      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4904      	ldr	r1, [pc, #16]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000

08004f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e049      	b.n	8004fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc fba6 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f000 fbe4 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e047      	b.n	8005084 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <HAL_TIM_Base_Start+0xb4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d018      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_TIM_Base_Start+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <HAL_TIM_Base_Start+0xbc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_TIM_Base_Start+0xc0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_TIM_Base_Start+0xc4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_TIM_Base_Start+0x66>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_TIM_Base_Start+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d115      	bne.n	800506e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_TIM_Base_Start+0xcc>)
 800504a:	4013      	ands	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d015      	beq.n	8005080 <HAL_TIM_Base_Start+0xa4>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d011      	beq.n	8005080 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	e008      	b.n	8005080 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e000      	b.n	8005082 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	00010007 	.word	0x00010007

080050ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e049      	b.n	8005152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f841 	bl	800515a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fb24 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x24>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e03c      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e02f      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x58>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e022      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d109      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x72>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e015      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x8c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e008      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e09c      	b.n	8005350 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xb6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	e023      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xc6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	e01b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xd6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	e013      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xe6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005254:	e00b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xf6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	e003      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fe68 	bl	8005f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a35      	ldr	r2, [pc, #212]	; (8005358 <HAL_TIM_PWM_Start+0x1e8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a34      	ldr	r2, [pc, #208]	; (800535c <HAL_TIM_PWM_Start+0x1ec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a32      	ldr	r2, [pc, #200]	; (8005360 <HAL_TIM_PWM_Start+0x1f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a31      	ldr	r2, [pc, #196]	; (8005364 <HAL_TIM_PWM_Start+0x1f4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2f      	ldr	r2, [pc, #188]	; (8005368 <HAL_TIM_PWM_Start+0x1f8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_Start+0x142>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_PWM_Start+0x144>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <HAL_TIM_PWM_Start+0x1e8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01d      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d018      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <HAL_TIM_PWM_Start+0x1fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_TIM_PWM_Start+0x200>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <HAL_TIM_PWM_Start+0x204>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <HAL_TIM_PWM_Start+0x1ec>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIM_PWM_Start+0x1f0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d115      	bne.n	800533a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_TIM_PWM_Start+0x208>)
 8005316:	4013      	ands	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d015      	beq.n	800534c <HAL_TIM_PWM_Start+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d011      	beq.n	800534c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	e008      	b.n	800534c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e000      	b.n	800534e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800
 8005374:	40000c00 	.word	0x40000c00
 8005378:	00010007 	.word	0x00010007

0800537c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005396:	2302      	movs	r3, #2
 8005398:	e0ff      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b14      	cmp	r3, #20
 80053a6:	f200 80f0 	bhi.w	800558a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	08005405 	.word	0x08005405
 80053b4:	0800558b 	.word	0x0800558b
 80053b8:	0800558b 	.word	0x0800558b
 80053bc:	0800558b 	.word	0x0800558b
 80053c0:	08005445 	.word	0x08005445
 80053c4:	0800558b 	.word	0x0800558b
 80053c8:	0800558b 	.word	0x0800558b
 80053cc:	0800558b 	.word	0x0800558b
 80053d0:	08005487 	.word	0x08005487
 80053d4:	0800558b 	.word	0x0800558b
 80053d8:	0800558b 	.word	0x0800558b
 80053dc:	0800558b 	.word	0x0800558b
 80053e0:	080054c7 	.word	0x080054c7
 80053e4:	0800558b 	.word	0x0800558b
 80053e8:	0800558b 	.word	0x0800558b
 80053ec:	0800558b 	.word	0x0800558b
 80053f0:	08005509 	.word	0x08005509
 80053f4:	0800558b 	.word	0x0800558b
 80053f8:	0800558b 	.word	0x0800558b
 80053fc:	0800558b 	.word	0x0800558b
 8005400:	08005549 	.word	0x08005549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fa2e 	bl	800586c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e0a5      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa9e 	bl	800598c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e084      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb07 	bl	8005aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e064      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fb6f 	bl	8005bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e043      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fbb8 	bl	8005c84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0208 	orr.w	r2, r2, #8
 8005522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005546:	e023      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fbfc 	bl	8005d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005588:	e002      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
      break;
 800558e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop

080055a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_ConfigClockSource+0x1c>
 80055bc:	2302      	movs	r3, #2
 80055be:	e0b6      	b.n	800572e <HAL_TIM_ConfigClockSource+0x18a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fc:	d03e      	beq.n	800567c <HAL_TIM_ConfigClockSource+0xd8>
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005602:	f200 8087 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	f000 8086 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x176>
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d87f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005614:	2b70      	cmp	r3, #112	; 0x70
 8005616:	d01a      	beq.n	800564e <HAL_TIM_ConfigClockSource+0xaa>
 8005618:	2b70      	cmp	r3, #112	; 0x70
 800561a:	d87b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d050      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x11e>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d877      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005624:	2b50      	cmp	r3, #80	; 0x50
 8005626:	d03c      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0xfe>
 8005628:	2b50      	cmp	r3, #80	; 0x50
 800562a:	d873      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d058      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x13e>
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d86f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d064      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d86b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800563c:	2b20      	cmp	r3, #32
 800563e:	d060      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d867      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05c      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005648:	2b10      	cmp	r3, #16
 800564a:	d05a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 800564c:	e062      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f000 fc55 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	609a      	str	r2, [r3, #8]
      break;
 800567a:	e04f      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f000 fc3e 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569e:	609a      	str	r2, [r3, #8]
      break;
 80056a0:	e03c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fbb2 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2150      	movs	r1, #80	; 0x50
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fc0b 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80056c0:	e02c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fbd1 	bl	8005e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2160      	movs	r1, #96	; 0x60
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fbfb 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e01c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fb92 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fbeb 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 8005700:	e00c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f000 fbe2 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 8005712:	e003      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e000      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800571a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a40      	ldr	r2, [pc, #256]	; (800584c <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3d      	ldr	r2, [pc, #244]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3b      	ldr	r2, [pc, #236]	; (8005858 <TIM_Base_SetConfig+0x120>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a3a      	ldr	r2, [pc, #232]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2f      	ldr	r2, [pc, #188]	; (800584c <TIM_Base_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <TIM_Base_SetConfig+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a29      	ldr	r2, [pc, #164]	; (800585c <TIM_Base_SetConfig+0x124>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <TIM_Base_SetConfig+0x128>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <TIM_Base_SetConfig+0x130>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <TIM_Base_SetConfig+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <TIM_Base_SetConfig+0x130>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40013400 	.word	0x40013400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0302 	bic.w	r3, r3, #2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <TIM_OC1_SetConfig+0x10c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_OC1_SetConfig+0x80>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a2b      	ldr	r2, [pc, #172]	; (800597c <TIM_OC1_SetConfig+0x110>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_OC1_SetConfig+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <TIM_OC1_SetConfig+0x114>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_OC1_SetConfig+0x80>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a29      	ldr	r2, [pc, #164]	; (8005984 <TIM_OC1_SetConfig+0x118>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC1_SetConfig+0x80>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a28      	ldr	r2, [pc, #160]	; (8005988 <TIM_OC1_SetConfig+0x11c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d10c      	bne.n	8005906 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0308 	bic.w	r3, r3, #8
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <TIM_OC1_SetConfig+0x10c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_OC1_SetConfig+0xc2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1a      	ldr	r2, [pc, #104]	; (800597c <TIM_OC1_SetConfig+0x110>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_OC1_SetConfig+0xc2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <TIM_OC1_SetConfig+0x114>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_OC1_SetConfig+0xc2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <TIM_OC1_SetConfig+0x118>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_OC1_SetConfig+0xc2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a17      	ldr	r2, [pc, #92]	; (8005988 <TIM_OC1_SetConfig+0x11c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d111      	bne.n	8005952 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0210 	bic.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <TIM_OC2_SetConfig+0x100>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC2_SetConfig+0x6c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <TIM_OC2_SetConfig+0x104>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10d      	bne.n	8005a14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <TIM_OC2_SetConfig+0x100>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00f      	beq.n	8005a3c <TIM_OC2_SetConfig+0xb0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <TIM_OC2_SetConfig+0x104>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_OC2_SetConfig+0xb0>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <TIM_OC2_SetConfig+0x108>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_OC2_SetConfig+0xb0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <TIM_OC2_SetConfig+0x10c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC2_SetConfig+0xb0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <TIM_OC2_SetConfig+0x110>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d113      	bne.n	8005a64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_OC3_SetConfig+0xfc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x6a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_OC3_SetConfig+0x100>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_OC3_SetConfig+0xfc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_OC3_SetConfig+0xae>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <TIM_OC3_SetConfig+0x100>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_OC3_SetConfig+0xae>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <TIM_OC3_SetConfig+0x104>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_OC3_SetConfig+0xae>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <TIM_OC3_SetConfig+0x108>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC3_SetConfig+0xae>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <TIM_OC3_SetConfig+0x10c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <TIM_OC4_SetConfig+0xc0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00f      	beq.n	8005c34 <TIM_OC4_SetConfig+0x84>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <TIM_OC4_SetConfig+0xc4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_OC4_SetConfig+0x84>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <TIM_OC4_SetConfig+0xc8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC4_SetConfig+0x84>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <TIM_OC4_SetConfig+0xcc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC4_SetConfig+0x84>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_OC4_SetConfig+0xd0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800

08005c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <TIM_OC5_SetConfig+0xb4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_OC5_SetConfig+0x7a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <TIM_OC5_SetConfig+0xb8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_OC5_SetConfig+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <TIM_OC5_SetConfig+0xbc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_OC5_SetConfig+0x7a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <TIM_OC5_SetConfig+0xc0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC5_SetConfig+0x7a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <TIM_OC5_SetConfig+0xc4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d109      	bne.n	8005d12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	051b      	lsls	r3, r3, #20
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <TIM_OC6_SetConfig+0xb8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00f      	beq.n	8005dc8 <TIM_OC6_SetConfig+0x7c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <TIM_OC6_SetConfig+0xbc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_OC6_SetConfig+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <TIM_OC6_SetConfig+0xc0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_OC6_SetConfig+0x7c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <TIM_OC6_SetConfig+0xc4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC6_SetConfig+0x7c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <TIM_OC6_SetConfig+0xc8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d109      	bne.n	8005ddc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 030a 	bic.w	r3, r3, #10
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f043 0307 	orr.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	021a      	lsls	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2201      	movs	r2, #1
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	401a      	ands	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e068      	b.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2e      	ldr	r2, [pc, #184]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d018      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1a      	ldr	r2, [pc, #104]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a13      	ldr	r2, [pc, #76]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10c      	bne.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4313      	orrs	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000

080060a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e040      	b.n	800613c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb fb40 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8c0 	bl	800626c <UART_SetConfig>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e022      	b.n	800613c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fb6c 	bl	80067dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fbf3 	bl	8006920 <UART_CheckIdleState>
 800613a:	4603      	mov	r3, r0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006158:	2b20      	cmp	r3, #32
 800615a:	f040 8082 	bne.w	8006262 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <HAL_UART_Transmit+0x26>
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e07a      	b.n	8006264 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_UART_Transmit+0x38>
 8006178:	2302      	movs	r3, #2
 800617a:	e073      	b.n	8006264 <HAL_UART_Transmit+0x120>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2221      	movs	r2, #33	; 0x21
 8006190:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006192:	f7fb fcab 	bl	8001aec <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	88fa      	ldrh	r2, [r7, #6]
 800619c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d108      	bne.n	80061c4 <HAL_UART_Transmit+0x80>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061d4:	e02d      	b.n	8006232 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fbe6 	bl	80069b2 <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e039      	b.n	8006264 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006202:	b292      	uxth	r2, r2
 8006204:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3302      	adds	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e008      	b.n	8006220 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	b292      	uxth	r2, r2
 8006218:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3301      	adds	r3, #1
 800621e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cb      	bne.n	80061d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fbb2 	bl	80069b2 <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e005      	b.n	8006264 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800626c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006270:	b08a      	sub	sp, #40	; 0x28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4ba4      	ldr	r3, [pc, #656]	; (800652c <UART_SetConfig+0x2c0>)
 800629c:	4013      	ands	r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a99      	ldr	r2, [pc, #612]	; (8006530 <UART_SetConfig+0x2c4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d4:	4313      	orrs	r3, r2
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a90      	ldr	r2, [pc, #576]	; (8006534 <UART_SetConfig+0x2c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d126      	bne.n	8006344 <UART_SetConfig+0xd8>
 80062f6:	4b90      	ldr	r3, [pc, #576]	; (8006538 <UART_SetConfig+0x2cc>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b03      	cmp	r3, #3
 8006302:	d81b      	bhi.n	800633c <UART_SetConfig+0xd0>
 8006304:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0xa0>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	0800631d 	.word	0x0800631d
 8006310:	0800632d 	.word	0x0800632d
 8006314:	08006325 	.word	0x08006325
 8006318:	08006335 	.word	0x08006335
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e116      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006324:	2302      	movs	r3, #2
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e112      	b.n	8006552 <UART_SetConfig+0x2e6>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e10e      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	e10a      	b.n	8006552 <UART_SetConfig+0x2e6>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006342:	e106      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7c      	ldr	r2, [pc, #496]	; (800653c <UART_SetConfig+0x2d0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d138      	bne.n	80063c0 <UART_SetConfig+0x154>
 800634e:	4b7a      	ldr	r3, [pc, #488]	; (8006538 <UART_SetConfig+0x2cc>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d82d      	bhi.n	80063b8 <UART_SetConfig+0x14c>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0xf8>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006399 	.word	0x08006399
 8006368:	080063b9 	.word	0x080063b9
 800636c:	080063b9 	.word	0x080063b9
 8006370:	080063b9 	.word	0x080063b9
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063b9 	.word	0x080063b9
 800637c:	080063b9 	.word	0x080063b9
 8006380:	080063b9 	.word	0x080063b9
 8006384:	080063a1 	.word	0x080063a1
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063b9 	.word	0x080063b9
 8006394:	080063b1 	.word	0x080063b1
 8006398:	2300      	movs	r3, #0
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	e0d8      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e0d4      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ae:	e0d0      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b6:	e0cc      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063be:	e0c8      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a5e      	ldr	r2, [pc, #376]	; (8006540 <UART_SetConfig+0x2d4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d125      	bne.n	8006416 <UART_SetConfig+0x1aa>
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <UART_SetConfig+0x2cc>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d016      	beq.n	8006406 <UART_SetConfig+0x19a>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d818      	bhi.n	800640e <UART_SetConfig+0x1a2>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d00a      	beq.n	80063f6 <UART_SetConfig+0x18a>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d814      	bhi.n	800640e <UART_SetConfig+0x1a2>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <UART_SetConfig+0x182>
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d008      	beq.n	80063fe <UART_SetConfig+0x192>
 80063ec:	e00f      	b.n	800640e <UART_SetConfig+0x1a2>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f4:	e0ad      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063f6:	2302      	movs	r3, #2
 80063f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fc:	e0a9      	b.n	8006552 <UART_SetConfig+0x2e6>
 80063fe:	2304      	movs	r3, #4
 8006400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006404:	e0a5      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006406:	2308      	movs	r3, #8
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640c:	e0a1      	b.n	8006552 <UART_SetConfig+0x2e6>
 800640e:	2310      	movs	r3, #16
 8006410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006414:	e09d      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <UART_SetConfig+0x2d8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d125      	bne.n	800646c <UART_SetConfig+0x200>
 8006420:	4b45      	ldr	r3, [pc, #276]	; (8006538 <UART_SetConfig+0x2cc>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642a:	2bc0      	cmp	r3, #192	; 0xc0
 800642c:	d016      	beq.n	800645c <UART_SetConfig+0x1f0>
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d818      	bhi.n	8006464 <UART_SetConfig+0x1f8>
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d00a      	beq.n	800644c <UART_SetConfig+0x1e0>
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d814      	bhi.n	8006464 <UART_SetConfig+0x1f8>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <UART_SetConfig+0x1d8>
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d008      	beq.n	8006454 <UART_SetConfig+0x1e8>
 8006442:	e00f      	b.n	8006464 <UART_SetConfig+0x1f8>
 8006444:	2300      	movs	r3, #0
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e082      	b.n	8006552 <UART_SetConfig+0x2e6>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e07e      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e07a      	b.n	8006552 <UART_SetConfig+0x2e6>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006462:	e076      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646a:	e072      	b.n	8006552 <UART_SetConfig+0x2e6>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a35      	ldr	r2, [pc, #212]	; (8006548 <UART_SetConfig+0x2dc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d12a      	bne.n	80064cc <UART_SetConfig+0x260>
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <UART_SetConfig+0x2cc>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d01a      	beq.n	80064bc <UART_SetConfig+0x250>
 8006486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648a:	d81b      	bhi.n	80064c4 <UART_SetConfig+0x258>
 800648c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006490:	d00c      	beq.n	80064ac <UART_SetConfig+0x240>
 8006492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006496:	d815      	bhi.n	80064c4 <UART_SetConfig+0x258>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <UART_SetConfig+0x238>
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d008      	beq.n	80064b4 <UART_SetConfig+0x248>
 80064a2:	e00f      	b.n	80064c4 <UART_SetConfig+0x258>
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e052      	b.n	8006552 <UART_SetConfig+0x2e6>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b2:	e04e      	b.n	8006552 <UART_SetConfig+0x2e6>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e04a      	b.n	8006552 <UART_SetConfig+0x2e6>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e046      	b.n	8006552 <UART_SetConfig+0x2e6>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e042      	b.n	8006552 <UART_SetConfig+0x2e6>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <UART_SetConfig+0x2c4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d13a      	bne.n	800654c <UART_SetConfig+0x2e0>
 80064d6:	4b18      	ldr	r3, [pc, #96]	; (8006538 <UART_SetConfig+0x2cc>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e4:	d01a      	beq.n	800651c <UART_SetConfig+0x2b0>
 80064e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ea:	d81b      	bhi.n	8006524 <UART_SetConfig+0x2b8>
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d00c      	beq.n	800650c <UART_SetConfig+0x2a0>
 80064f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f6:	d815      	bhi.n	8006524 <UART_SetConfig+0x2b8>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <UART_SetConfig+0x298>
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d008      	beq.n	8006514 <UART_SetConfig+0x2a8>
 8006502:	e00f      	b.n	8006524 <UART_SetConfig+0x2b8>
 8006504:	2300      	movs	r3, #0
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e022      	b.n	8006552 <UART_SetConfig+0x2e6>
 800650c:	2302      	movs	r3, #2
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e01e      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e01a      	b.n	8006552 <UART_SetConfig+0x2e6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e016      	b.n	8006552 <UART_SetConfig+0x2e6>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e012      	b.n	8006552 <UART_SetConfig+0x2e6>
 800652c:	efff69f3 	.word	0xefff69f3
 8006530:	40008000 	.word	0x40008000
 8006534:	40013800 	.word	0x40013800
 8006538:	40021000 	.word	0x40021000
 800653c:	40004400 	.word	0x40004400
 8006540:	40004800 	.word	0x40004800
 8006544:	40004c00 	.word	0x40004c00
 8006548:	40005000 	.word	0x40005000
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a9f      	ldr	r2, [pc, #636]	; (80067d4 <UART_SetConfig+0x568>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d17a      	bne.n	8006652 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800655c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006560:	2b08      	cmp	r3, #8
 8006562:	d824      	bhi.n	80065ae <UART_SetConfig+0x342>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x300>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006591 	.word	0x08006591
 8006570:	080065af 	.word	0x080065af
 8006574:	08006599 	.word	0x08006599
 8006578:	080065af 	.word	0x080065af
 800657c:	0800659f 	.word	0x0800659f
 8006580:	080065af 	.word	0x080065af
 8006584:	080065af 	.word	0x080065af
 8006588:	080065af 	.word	0x080065af
 800658c:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fd ff84 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
        break;
 8006596:	e010      	b.n	80065ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b8f      	ldr	r3, [pc, #572]	; (80067d8 <UART_SetConfig+0x56c>)
 800659a:	61fb      	str	r3, [r7, #28]
        break;
 800659c:	e00d      	b.n	80065ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fd fee5 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80065a2:	61f8      	str	r0, [r7, #28]
        break;
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61fb      	str	r3, [r7, #28]
        break;
 80065ac:	e005      	b.n	80065ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80fb 	beq.w	80067b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d305      	bcc.n	80065de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065e4:	e0e8      	b.n	80067b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2200      	movs	r2, #0
 80065ea:	461c      	mov	r4, r3
 80065ec:	4615      	mov	r5, r2
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	022b      	lsls	r3, r5, #8
 80065f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065fc:	0222      	lsls	r2, r4, #8
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	6849      	ldr	r1, [r1, #4]
 8006602:	0849      	lsrs	r1, r1, #1
 8006604:	2000      	movs	r0, #0
 8006606:	4688      	mov	r8, r1
 8006608:	4681      	mov	r9, r0
 800660a:	eb12 0a08 	adds.w	sl, r2, r8
 800660e:	eb43 0b09 	adc.w	fp, r3, r9
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	f7fa fa9e 	bl	8000b64 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4613      	mov	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006636:	d308      	bcc.n	800664a <UART_SetConfig+0x3de>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663e:	d204      	bcs.n	800664a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	e0b6      	b.n	80067b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006650:	e0b2      	b.n	80067b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665a:	d15e      	bne.n	800671a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800665c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006660:	2b08      	cmp	r3, #8
 8006662:	d828      	bhi.n	80066b6 <UART_SetConfig+0x44a>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x400>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	08006699 	.word	0x08006699
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a7 	.word	0x080066a7
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fd ff04 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8006694:	61f8      	str	r0, [r7, #28]
        break;
 8006696:	e014      	b.n	80066c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fd ff16 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 800669c:	61f8      	str	r0, [r7, #28]
        break;
 800669e:	e010      	b.n	80066c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <UART_SetConfig+0x56c>)
 80066a2:	61fb      	str	r3, [r7, #28]
        break;
 80066a4:	e00d      	b.n	80066c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fd fe61 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80066aa:	61f8      	str	r0, [r7, #28]
        break;
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	61fb      	str	r3, [r7, #28]
        break;
 80066b4:	e005      	b.n	80066c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d077      	beq.n	80067b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005a      	lsls	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d916      	bls.n	8006712 <UART_SetConfig+0x4a6>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ea:	d212      	bcs.n	8006712 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f023 030f 	bic.w	r3, r3, #15
 80066f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	b29a      	uxth	r2, r3
 8006702:	8afb      	ldrh	r3, [r7, #22]
 8006704:	4313      	orrs	r3, r2
 8006706:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	8afa      	ldrh	r2, [r7, #22]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e052      	b.n	80067b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006718:	e04e      	b.n	80067b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800671a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800671e:	2b08      	cmp	r3, #8
 8006720:	d827      	bhi.n	8006772 <UART_SetConfig+0x506>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x4bc>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fd fea6 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8006750:	61f8      	str	r0, [r7, #28]
        break;
 8006752:	e014      	b.n	800677e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fd feb8 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8006758:	61f8      	str	r0, [r7, #28]
        break;
 800675a:	e010      	b.n	800677e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <UART_SetConfig+0x56c>)
 800675e:	61fb      	str	r3, [r7, #28]
        break;
 8006760:	e00d      	b.n	800677e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fd fe03 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8006766:	61f8      	str	r0, [r7, #28]
        break;
 8006768:	e009      	b.n	800677e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	61fb      	str	r3, [r7, #28]
        break;
 8006770:	e005      	b.n	800677e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800677c:	bf00      	nop
    }

    if (pclk != 0U)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d019      	beq.n	80067b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	085a      	lsrs	r2, r3, #1
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	441a      	add	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d909      	bls.n	80067b2 <UART_SetConfig+0x546>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d205      	bcs.n	80067b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e002      	b.n	80067b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d2:	bf00      	nop
 80067d4:	40008000 	.word	0x40008000
 80067d8:	00f42400 	.word	0x00f42400

080067dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068da:	d10a      	bne.n	80068f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006930:	f7fb f8dc 	bl	8001aec <HAL_GetTick>
 8006934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d10e      	bne.n	8006962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f82d 	bl	80069b2 <UART_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e023      	b.n	80069aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b04      	cmp	r3, #4
 800696e:	d10e      	bne.n	800698e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f817 	bl	80069b2 <UART_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e00d      	b.n	80069aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b09c      	sub	sp, #112	; 0x70
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c2:	e0a5      	b.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	f000 80a1 	beq.w	8006b10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ce:	f7fb f88d 	bl	8001aec <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80069de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d13e      	bne.n	8006a62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f8:	667b      	str	r3, [r7, #100]	; 0x64
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a36:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e5      	bne.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e067      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d04f      	beq.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7e:	d147      	bne.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	613b      	str	r3, [r7, #16]
   return(result);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006adc:	623a      	str	r2, [r7, #32]
 8006ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	6a3a      	ldr	r2, [r7, #32]
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e5      	bne.n	8006abc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e010      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	f43f af4a 	beq.w	80069c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3770      	adds	r7, #112	; 0x70
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <__errno>:
 8006b3c:	4b01      	ldr	r3, [pc, #4]	; (8006b44 <__errno+0x8>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	2000000c 	.word	0x2000000c

08006b48 <__libc_init_array>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	4d0d      	ldr	r5, [pc, #52]	; (8006b80 <__libc_init_array+0x38>)
 8006b4c:	4c0d      	ldr	r4, [pc, #52]	; (8006b84 <__libc_init_array+0x3c>)
 8006b4e:	1b64      	subs	r4, r4, r5
 8006b50:	10a4      	asrs	r4, r4, #2
 8006b52:	2600      	movs	r6, #0
 8006b54:	42a6      	cmp	r6, r4
 8006b56:	d109      	bne.n	8006b6c <__libc_init_array+0x24>
 8006b58:	4d0b      	ldr	r5, [pc, #44]	; (8006b88 <__libc_init_array+0x40>)
 8006b5a:	4c0c      	ldr	r4, [pc, #48]	; (8006b8c <__libc_init_array+0x44>)
 8006b5c:	f001 fff6 	bl	8008b4c <_init>
 8006b60:	1b64      	subs	r4, r4, r5
 8006b62:	10a4      	asrs	r4, r4, #2
 8006b64:	2600      	movs	r6, #0
 8006b66:	42a6      	cmp	r6, r4
 8006b68:	d105      	bne.n	8006b76 <__libc_init_array+0x2e>
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b70:	4798      	blx	r3
 8006b72:	3601      	adds	r6, #1
 8006b74:	e7ee      	b.n	8006b54 <__libc_init_array+0xc>
 8006b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7a:	4798      	blx	r3
 8006b7c:	3601      	adds	r6, #1
 8006b7e:	e7f2      	b.n	8006b66 <__libc_init_array+0x1e>
 8006b80:	08008e40 	.word	0x08008e40
 8006b84:	08008e40 	.word	0x08008e40
 8006b88:	08008e40 	.word	0x08008e40
 8006b8c:	08008e44 	.word	0x08008e44

08006b90 <memset>:
 8006b90:	4402      	add	r2, r0
 8006b92:	4603      	mov	r3, r0
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d100      	bne.n	8006b9a <memset+0xa>
 8006b98:	4770      	bx	lr
 8006b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9e:	e7f9      	b.n	8006b94 <memset+0x4>

08006ba0 <_puts_r>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	460e      	mov	r6, r1
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	b118      	cbz	r0, 8006bb0 <_puts_r+0x10>
 8006ba8:	6983      	ldr	r3, [r0, #24]
 8006baa:	b90b      	cbnz	r3, 8006bb0 <_puts_r+0x10>
 8006bac:	f000 fa48 	bl	8007040 <__sinit>
 8006bb0:	69ab      	ldr	r3, [r5, #24]
 8006bb2:	68ac      	ldr	r4, [r5, #8]
 8006bb4:	b913      	cbnz	r3, 8006bbc <_puts_r+0x1c>
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fa42 	bl	8007040 <__sinit>
 8006bbc:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <_puts_r+0xd0>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d120      	bne.n	8006c04 <_puts_r+0x64>
 8006bc2:	686c      	ldr	r4, [r5, #4]
 8006bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bc6:	07db      	lsls	r3, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_puts_r+0x36>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	0598      	lsls	r0, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_puts_r+0x36>
 8006bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bd2:	f000 fad3 	bl	800717c <__retarget_lock_acquire_recursive>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	d51d      	bpl.n	8006c18 <_puts_r+0x78>
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	b1db      	cbz	r3, 8006c18 <_puts_r+0x78>
 8006be0:	3e01      	subs	r6, #1
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006be8:	3b01      	subs	r3, #1
 8006bea:	60a3      	str	r3, [r4, #8]
 8006bec:	bb39      	cbnz	r1, 8006c3e <_puts_r+0x9e>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da38      	bge.n	8006c64 <_puts_r+0xc4>
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	210a      	movs	r1, #10
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f848 	bl	8006c8c <__swbuf_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d011      	beq.n	8006c24 <_puts_r+0x84>
 8006c00:	250a      	movs	r5, #10
 8006c02:	e011      	b.n	8006c28 <_puts_r+0x88>
 8006c04:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <_puts_r+0xd4>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d101      	bne.n	8006c0e <_puts_r+0x6e>
 8006c0a:	68ac      	ldr	r4, [r5, #8]
 8006c0c:	e7da      	b.n	8006bc4 <_puts_r+0x24>
 8006c0e:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <_puts_r+0xd8>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	bf08      	it	eq
 8006c14:	68ec      	ldreq	r4, [r5, #12]
 8006c16:	e7d5      	b.n	8006bc4 <_puts_r+0x24>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f888 	bl	8006d30 <__swsetup_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0dd      	beq.n	8006be0 <_puts_r+0x40>
 8006c24:	f04f 35ff 	mov.w	r5, #4294967295
 8006c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c2a:	07da      	lsls	r2, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_puts_r+0x9a>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	059b      	lsls	r3, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_puts_r+0x9a>
 8006c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c36:	f000 faa2 	bl	800717e <__retarget_lock_release_recursive>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da04      	bge.n	8006c4c <_puts_r+0xac>
 8006c42:	69a2      	ldr	r2, [r4, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	dc06      	bgt.n	8006c56 <_puts_r+0xb6>
 8006c48:	290a      	cmp	r1, #10
 8006c4a:	d004      	beq.n	8006c56 <_puts_r+0xb6>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	7019      	strb	r1, [r3, #0]
 8006c54:	e7c5      	b.n	8006be2 <_puts_r+0x42>
 8006c56:	4622      	mov	r2, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 f817 	bl	8006c8c <__swbuf_r>
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d1bf      	bne.n	8006be2 <_puts_r+0x42>
 8006c62:	e7df      	b.n	8006c24 <_puts_r+0x84>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	250a      	movs	r5, #10
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	701d      	strb	r5, [r3, #0]
 8006c6e:	e7db      	b.n	8006c28 <_puts_r+0x88>
 8006c70:	08008bf0 	.word	0x08008bf0
 8006c74:	08008c10 	.word	0x08008c10
 8006c78:	08008bd0 	.word	0x08008bd0

08006c7c <puts>:
 8006c7c:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <puts+0xc>)
 8006c7e:	4601      	mov	r1, r0
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	f7ff bf8d 	b.w	8006ba0 <_puts_r>
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <__swbuf_r>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	460e      	mov	r6, r1
 8006c90:	4614      	mov	r4, r2
 8006c92:	4605      	mov	r5, r0
 8006c94:	b118      	cbz	r0, 8006c9e <__swbuf_r+0x12>
 8006c96:	6983      	ldr	r3, [r0, #24]
 8006c98:	b90b      	cbnz	r3, 8006c9e <__swbuf_r+0x12>
 8006c9a:	f000 f9d1 	bl	8007040 <__sinit>
 8006c9e:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <__swbuf_r+0x98>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	d12b      	bne.n	8006cfc <__swbuf_r+0x70>
 8006ca4:	686c      	ldr	r4, [r5, #4]
 8006ca6:	69a3      	ldr	r3, [r4, #24]
 8006ca8:	60a3      	str	r3, [r4, #8]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	071a      	lsls	r2, r3, #28
 8006cae:	d52f      	bpl.n	8006d10 <__swbuf_r+0x84>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	b36b      	cbz	r3, 8006d10 <__swbuf_r+0x84>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	6820      	ldr	r0, [r4, #0]
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	6963      	ldr	r3, [r4, #20]
 8006cbc:	b2f6      	uxtb	r6, r6
 8006cbe:	4283      	cmp	r3, r0
 8006cc0:	4637      	mov	r7, r6
 8006cc2:	dc04      	bgt.n	8006cce <__swbuf_r+0x42>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 f926 	bl	8006f18 <_fflush_r>
 8006ccc:	bb30      	cbnz	r0, 8006d1c <__swbuf_r+0x90>
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	60a3      	str	r3, [r4, #8]
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	6022      	str	r2, [r4, #0]
 8006cda:	701e      	strb	r6, [r3, #0]
 8006cdc:	6963      	ldr	r3, [r4, #20]
 8006cde:	3001      	adds	r0, #1
 8006ce0:	4283      	cmp	r3, r0
 8006ce2:	d004      	beq.n	8006cee <__swbuf_r+0x62>
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	07db      	lsls	r3, r3, #31
 8006ce8:	d506      	bpl.n	8006cf8 <__swbuf_r+0x6c>
 8006cea:	2e0a      	cmp	r6, #10
 8006cec:	d104      	bne.n	8006cf8 <__swbuf_r+0x6c>
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f000 f911 	bl	8006f18 <_fflush_r>
 8006cf6:	b988      	cbnz	r0, 8006d1c <__swbuf_r+0x90>
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <__swbuf_r+0x9c>)
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	d101      	bne.n	8006d06 <__swbuf_r+0x7a>
 8006d02:	68ac      	ldr	r4, [r5, #8]
 8006d04:	e7cf      	b.n	8006ca6 <__swbuf_r+0x1a>
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <__swbuf_r+0xa0>)
 8006d08:	429c      	cmp	r4, r3
 8006d0a:	bf08      	it	eq
 8006d0c:	68ec      	ldreq	r4, [r5, #12]
 8006d0e:	e7ca      	b.n	8006ca6 <__swbuf_r+0x1a>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 f80c 	bl	8006d30 <__swsetup_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d0cb      	beq.n	8006cb4 <__swbuf_r+0x28>
 8006d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d20:	e7ea      	b.n	8006cf8 <__swbuf_r+0x6c>
 8006d22:	bf00      	nop
 8006d24:	08008bf0 	.word	0x08008bf0
 8006d28:	08008c10 	.word	0x08008c10
 8006d2c:	08008bd0 	.word	0x08008bd0

08006d30 <__swsetup_r>:
 8006d30:	4b32      	ldr	r3, [pc, #200]	; (8006dfc <__swsetup_r+0xcc>)
 8006d32:	b570      	push	{r4, r5, r6, lr}
 8006d34:	681d      	ldr	r5, [r3, #0]
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	b125      	cbz	r5, 8006d46 <__swsetup_r+0x16>
 8006d3c:	69ab      	ldr	r3, [r5, #24]
 8006d3e:	b913      	cbnz	r3, 8006d46 <__swsetup_r+0x16>
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f97d 	bl	8007040 <__sinit>
 8006d46:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <__swsetup_r+0xd0>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d10f      	bne.n	8006d6c <__swsetup_r+0x3c>
 8006d4c:	686c      	ldr	r4, [r5, #4]
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d54:	0719      	lsls	r1, r3, #28
 8006d56:	d42c      	bmi.n	8006db2 <__swsetup_r+0x82>
 8006d58:	06dd      	lsls	r5, r3, #27
 8006d5a:	d411      	bmi.n	8006d80 <__swsetup_r+0x50>
 8006d5c:	2309      	movs	r3, #9
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	e03e      	b.n	8006dea <__swsetup_r+0xba>
 8006d6c:	4b25      	ldr	r3, [pc, #148]	; (8006e04 <__swsetup_r+0xd4>)
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d101      	bne.n	8006d76 <__swsetup_r+0x46>
 8006d72:	68ac      	ldr	r4, [r5, #8]
 8006d74:	e7eb      	b.n	8006d4e <__swsetup_r+0x1e>
 8006d76:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <__swsetup_r+0xd8>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	bf08      	it	eq
 8006d7c:	68ec      	ldreq	r4, [r5, #12]
 8006d7e:	e7e6      	b.n	8006d4e <__swsetup_r+0x1e>
 8006d80:	0758      	lsls	r0, r3, #29
 8006d82:	d512      	bpl.n	8006daa <__swsetup_r+0x7a>
 8006d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d86:	b141      	cbz	r1, 8006d9a <__swsetup_r+0x6a>
 8006d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	d002      	beq.n	8006d96 <__swsetup_r+0x66>
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 fa5b 	bl	800724c <_free_r>
 8006d96:	2300      	movs	r3, #0
 8006d98:	6363      	str	r3, [r4, #52]	; 0x34
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f043 0308 	orr.w	r3, r3, #8
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	b94b      	cbnz	r3, 8006dca <__swsetup_r+0x9a>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d003      	beq.n	8006dca <__swsetup_r+0x9a>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 fa01 	bl	80071cc <__smakebuf_r>
 8006dca:	89a0      	ldrh	r0, [r4, #12]
 8006dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd0:	f010 0301 	ands.w	r3, r0, #1
 8006dd4:	d00a      	beq.n	8006dec <__swsetup_r+0xbc>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	6963      	ldr	r3, [r4, #20]
 8006ddc:	425b      	negs	r3, r3
 8006dde:	61a3      	str	r3, [r4, #24]
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	b943      	cbnz	r3, 8006df6 <__swsetup_r+0xc6>
 8006de4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006de8:	d1ba      	bne.n	8006d60 <__swsetup_r+0x30>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	0781      	lsls	r1, r0, #30
 8006dee:	bf58      	it	pl
 8006df0:	6963      	ldrpl	r3, [r4, #20]
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	e7f4      	b.n	8006de0 <__swsetup_r+0xb0>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e7f7      	b.n	8006dea <__swsetup_r+0xba>
 8006dfa:	bf00      	nop
 8006dfc:	2000000c 	.word	0x2000000c
 8006e00:	08008bf0 	.word	0x08008bf0
 8006e04:	08008c10 	.word	0x08008c10
 8006e08:	08008bd0 	.word	0x08008bd0

08006e0c <__sflush_r>:
 8006e0c:	898a      	ldrh	r2, [r1, #12]
 8006e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e12:	4605      	mov	r5, r0
 8006e14:	0710      	lsls	r0, r2, #28
 8006e16:	460c      	mov	r4, r1
 8006e18:	d458      	bmi.n	8006ecc <__sflush_r+0xc0>
 8006e1a:	684b      	ldr	r3, [r1, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc05      	bgt.n	8006e2c <__sflush_r+0x20>
 8006e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dc02      	bgt.n	8006e2c <__sflush_r+0x20>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	d0f9      	beq.n	8006e26 <__sflush_r+0x1a>
 8006e32:	2300      	movs	r3, #0
 8006e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e38:	682f      	ldr	r7, [r5, #0]
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	d032      	beq.n	8006ea4 <__sflush_r+0x98>
 8006e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	075a      	lsls	r2, r3, #29
 8006e44:	d505      	bpl.n	8006e52 <__sflush_r+0x46>
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	1ac0      	subs	r0, r0, r3
 8006e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e4c:	b10b      	cbz	r3, 8006e52 <__sflush_r+0x46>
 8006e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e50:	1ac0      	subs	r0, r0, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	4602      	mov	r2, r0
 8006e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b0      	blx	r6
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	d106      	bne.n	8006e72 <__sflush_r+0x66>
 8006e64:	6829      	ldr	r1, [r5, #0]
 8006e66:	291d      	cmp	r1, #29
 8006e68:	d82c      	bhi.n	8006ec4 <__sflush_r+0xb8>
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <__sflush_r+0x108>)
 8006e6c:	40ca      	lsrs	r2, r1
 8006e6e:	07d6      	lsls	r6, r2, #31
 8006e70:	d528      	bpl.n	8006ec4 <__sflush_r+0xb8>
 8006e72:	2200      	movs	r2, #0
 8006e74:	6062      	str	r2, [r4, #4]
 8006e76:	04d9      	lsls	r1, r3, #19
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	d504      	bpl.n	8006e88 <__sflush_r+0x7c>
 8006e7e:	1c42      	adds	r2, r0, #1
 8006e80:	d101      	bne.n	8006e86 <__sflush_r+0x7a>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b903      	cbnz	r3, 8006e88 <__sflush_r+0x7c>
 8006e86:	6560      	str	r0, [r4, #84]	; 0x54
 8006e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8a:	602f      	str	r7, [r5, #0]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d0ca      	beq.n	8006e26 <__sflush_r+0x1a>
 8006e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__sflush_r+0x92>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 f9d7 	bl	800724c <_free_r>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ea2:	e7c1      	b.n	8006e28 <__sflush_r+0x1c>
 8006ea4:	6a21      	ldr	r1, [r4, #32]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b0      	blx	r6
 8006eac:	1c41      	adds	r1, r0, #1
 8006eae:	d1c7      	bne.n	8006e40 <__sflush_r+0x34>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c4      	beq.n	8006e40 <__sflush_r+0x34>
 8006eb6:	2b1d      	cmp	r3, #29
 8006eb8:	d001      	beq.n	8006ebe <__sflush_r+0xb2>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	d101      	bne.n	8006ec2 <__sflush_r+0xb6>
 8006ebe:	602f      	str	r7, [r5, #0]
 8006ec0:	e7b1      	b.n	8006e26 <__sflush_r+0x1a>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	e7ad      	b.n	8006e28 <__sflush_r+0x1c>
 8006ecc:	690f      	ldr	r7, [r1, #16]
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d0a9      	beq.n	8006e26 <__sflush_r+0x1a>
 8006ed2:	0793      	lsls	r3, r2, #30
 8006ed4:	680e      	ldr	r6, [r1, #0]
 8006ed6:	bf08      	it	eq
 8006ed8:	694b      	ldreq	r3, [r1, #20]
 8006eda:	600f      	str	r7, [r1, #0]
 8006edc:	bf18      	it	ne
 8006ede:	2300      	movne	r3, #0
 8006ee0:	eba6 0807 	sub.w	r8, r6, r7
 8006ee4:	608b      	str	r3, [r1, #8]
 8006ee6:	f1b8 0f00 	cmp.w	r8, #0
 8006eea:	dd9c      	ble.n	8006e26 <__sflush_r+0x1a>
 8006eec:	6a21      	ldr	r1, [r4, #32]
 8006eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ef0:	4643      	mov	r3, r8
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b0      	blx	r6
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dc06      	bgt.n	8006f0a <__sflush_r+0xfe>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e78e      	b.n	8006e28 <__sflush_r+0x1c>
 8006f0a:	4407      	add	r7, r0
 8006f0c:	eba8 0800 	sub.w	r8, r8, r0
 8006f10:	e7e9      	b.n	8006ee6 <__sflush_r+0xda>
 8006f12:	bf00      	nop
 8006f14:	20400001 	.word	0x20400001

08006f18 <_fflush_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	690b      	ldr	r3, [r1, #16]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b913      	cbnz	r3, 8006f28 <_fflush_r+0x10>
 8006f22:	2500      	movs	r5, #0
 8006f24:	4628      	mov	r0, r5
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	b118      	cbz	r0, 8006f32 <_fflush_r+0x1a>
 8006f2a:	6983      	ldr	r3, [r0, #24]
 8006f2c:	b90b      	cbnz	r3, 8006f32 <_fflush_r+0x1a>
 8006f2e:	f000 f887 	bl	8007040 <__sinit>
 8006f32:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <_fflush_r+0x6c>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d11b      	bne.n	8006f70 <_fflush_r+0x58>
 8006f38:	686c      	ldr	r4, [r5, #4]
 8006f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ef      	beq.n	8006f22 <_fflush_r+0xa>
 8006f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f44:	07d0      	lsls	r0, r2, #31
 8006f46:	d404      	bmi.n	8006f52 <_fflush_r+0x3a>
 8006f48:	0599      	lsls	r1, r3, #22
 8006f4a:	d402      	bmi.n	8006f52 <_fflush_r+0x3a>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 f915 	bl	800717c <__retarget_lock_acquire_recursive>
 8006f52:	4628      	mov	r0, r5
 8006f54:	4621      	mov	r1, r4
 8006f56:	f7ff ff59 	bl	8006e0c <__sflush_r>
 8006f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	4605      	mov	r5, r0
 8006f60:	d4e0      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	059b      	lsls	r3, r3, #22
 8006f66:	d4dd      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6a:	f000 f908 	bl	800717e <__retarget_lock_release_recursive>
 8006f6e:	e7d9      	b.n	8006f24 <_fflush_r+0xc>
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <_fflush_r+0x70>)
 8006f72:	429c      	cmp	r4, r3
 8006f74:	d101      	bne.n	8006f7a <_fflush_r+0x62>
 8006f76:	68ac      	ldr	r4, [r5, #8]
 8006f78:	e7df      	b.n	8006f3a <_fflush_r+0x22>
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <_fflush_r+0x74>)
 8006f7c:	429c      	cmp	r4, r3
 8006f7e:	bf08      	it	eq
 8006f80:	68ec      	ldreq	r4, [r5, #12]
 8006f82:	e7da      	b.n	8006f3a <_fflush_r+0x22>
 8006f84:	08008bf0 	.word	0x08008bf0
 8006f88:	08008c10 	.word	0x08008c10
 8006f8c:	08008bd0 	.word	0x08008bd0

08006f90 <std>:
 8006f90:	2300      	movs	r3, #0
 8006f92:	b510      	push	{r4, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	e9c0 3300 	strd	r3, r3, [r0]
 8006f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9e:	6083      	str	r3, [r0, #8]
 8006fa0:	8181      	strh	r1, [r0, #12]
 8006fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fa4:	81c2      	strh	r2, [r0, #14]
 8006fa6:	6183      	str	r3, [r0, #24]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	2208      	movs	r2, #8
 8006fac:	305c      	adds	r0, #92	; 0x5c
 8006fae:	f7ff fdef 	bl	8006b90 <memset>
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x38>)
 8006fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x3c>)
 8006fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <std+0x40>)
 8006fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <std+0x44>)
 8006fc0:	6224      	str	r4, [r4, #32]
 8006fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	0800742d 	.word	0x0800742d
 8006fcc:	0800744f 	.word	0x0800744f
 8006fd0:	08007487 	.word	0x08007487
 8006fd4:	080074ab 	.word	0x080074ab

08006fd8 <_cleanup_r>:
 8006fd8:	4901      	ldr	r1, [pc, #4]	; (8006fe0 <_cleanup_r+0x8>)
 8006fda:	f000 b8af 	b.w	800713c <_fwalk_reent>
 8006fde:	bf00      	nop
 8006fe0:	08006f19 	.word	0x08006f19

08006fe4 <__sfmoreglue>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	2268      	movs	r2, #104	; 0x68
 8006fe8:	1e4d      	subs	r5, r1, #1
 8006fea:	4355      	muls	r5, r2
 8006fec:	460e      	mov	r6, r1
 8006fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ff2:	f000 f997 	bl	8007324 <_malloc_r>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	b140      	cbz	r0, 800700c <__sfmoreglue+0x28>
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8007000:	300c      	adds	r0, #12
 8007002:	60a0      	str	r0, [r4, #8]
 8007004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007008:	f7ff fdc2 	bl	8006b90 <memset>
 800700c:	4620      	mov	r0, r4
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <__sfp_lock_acquire>:
 8007010:	4801      	ldr	r0, [pc, #4]	; (8007018 <__sfp_lock_acquire+0x8>)
 8007012:	f000 b8b3 	b.w	800717c <__retarget_lock_acquire_recursive>
 8007016:	bf00      	nop
 8007018:	20000219 	.word	0x20000219

0800701c <__sfp_lock_release>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__sfp_lock_release+0x8>)
 800701e:	f000 b8ae 	b.w	800717e <__retarget_lock_release_recursive>
 8007022:	bf00      	nop
 8007024:	20000219 	.word	0x20000219

08007028 <__sinit_lock_acquire>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sinit_lock_acquire+0x8>)
 800702a:	f000 b8a7 	b.w	800717c <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	2000021a 	.word	0x2000021a

08007034 <__sinit_lock_release>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sinit_lock_release+0x8>)
 8007036:	f000 b8a2 	b.w	800717e <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	2000021a 	.word	0x2000021a

08007040 <__sinit>:
 8007040:	b510      	push	{r4, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	f7ff fff0 	bl	8007028 <__sinit_lock_acquire>
 8007048:	69a3      	ldr	r3, [r4, #24]
 800704a:	b11b      	cbz	r3, 8007054 <__sinit+0x14>
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f7ff bff0 	b.w	8007034 <__sinit_lock_release>
 8007054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007058:	6523      	str	r3, [r4, #80]	; 0x50
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <__sinit+0x68>)
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <__sinit+0x6c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	62a2      	str	r2, [r4, #40]	; 0x28
 8007062:	42a3      	cmp	r3, r4
 8007064:	bf04      	itt	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	61a3      	streq	r3, [r4, #24]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f820 	bl	80070b0 <__sfp>
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f81c 	bl	80070b0 <__sfp>
 8007078:	60a0      	str	r0, [r4, #8]
 800707a:	4620      	mov	r0, r4
 800707c:	f000 f818 	bl	80070b0 <__sfp>
 8007080:	2200      	movs	r2, #0
 8007082:	60e0      	str	r0, [r4, #12]
 8007084:	2104      	movs	r1, #4
 8007086:	6860      	ldr	r0, [r4, #4]
 8007088:	f7ff ff82 	bl	8006f90 <std>
 800708c:	68a0      	ldr	r0, [r4, #8]
 800708e:	2201      	movs	r2, #1
 8007090:	2109      	movs	r1, #9
 8007092:	f7ff ff7d 	bl	8006f90 <std>
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	2202      	movs	r2, #2
 800709a:	2112      	movs	r1, #18
 800709c:	f7ff ff78 	bl	8006f90 <std>
 80070a0:	2301      	movs	r3, #1
 80070a2:	61a3      	str	r3, [r4, #24]
 80070a4:	e7d2      	b.n	800704c <__sinit+0xc>
 80070a6:	bf00      	nop
 80070a8:	08008bcc 	.word	0x08008bcc
 80070ac:	08006fd9 	.word	0x08006fd9

080070b0 <__sfp>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	4607      	mov	r7, r0
 80070b4:	f7ff ffac 	bl	8007010 <__sfp_lock_acquire>
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <__sfp+0x84>)
 80070ba:	681e      	ldr	r6, [r3, #0]
 80070bc:	69b3      	ldr	r3, [r6, #24]
 80070be:	b913      	cbnz	r3, 80070c6 <__sfp+0x16>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ffbd 	bl	8007040 <__sinit>
 80070c6:	3648      	adds	r6, #72	; 0x48
 80070c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	d503      	bpl.n	80070d8 <__sfp+0x28>
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	b30b      	cbz	r3, 8007118 <__sfp+0x68>
 80070d4:	6836      	ldr	r6, [r6, #0]
 80070d6:	e7f7      	b.n	80070c8 <__sfp+0x18>
 80070d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070dc:	b9d5      	cbnz	r5, 8007114 <__sfp+0x64>
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <__sfp+0x88>)
 80070e0:	60e3      	str	r3, [r4, #12]
 80070e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070e6:	6665      	str	r5, [r4, #100]	; 0x64
 80070e8:	f000 f847 	bl	800717a <__retarget_lock_init_recursive>
 80070ec:	f7ff ff96 	bl	800701c <__sfp_lock_release>
 80070f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f8:	6025      	str	r5, [r4, #0]
 80070fa:	61a5      	str	r5, [r4, #24]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4629      	mov	r1, r5
 8007100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007104:	f7ff fd44 	bl	8006b90 <memset>
 8007108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800710c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007110:	4620      	mov	r0, r4
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	3468      	adds	r4, #104	; 0x68
 8007116:	e7d9      	b.n	80070cc <__sfp+0x1c>
 8007118:	2104      	movs	r1, #4
 800711a:	4638      	mov	r0, r7
 800711c:	f7ff ff62 	bl	8006fe4 <__sfmoreglue>
 8007120:	4604      	mov	r4, r0
 8007122:	6030      	str	r0, [r6, #0]
 8007124:	2800      	cmp	r0, #0
 8007126:	d1d5      	bne.n	80070d4 <__sfp+0x24>
 8007128:	f7ff ff78 	bl	800701c <__sfp_lock_release>
 800712c:	230c      	movs	r3, #12
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e7ee      	b.n	8007110 <__sfp+0x60>
 8007132:	bf00      	nop
 8007134:	08008bcc 	.word	0x08008bcc
 8007138:	ffff0001 	.word	0xffff0001

0800713c <_fwalk_reent>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4606      	mov	r6, r0
 8007142:	4688      	mov	r8, r1
 8007144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007148:	2700      	movs	r7, #0
 800714a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800714e:	f1b9 0901 	subs.w	r9, r9, #1
 8007152:	d505      	bpl.n	8007160 <_fwalk_reent+0x24>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	2c00      	cmp	r4, #0
 8007158:	d1f7      	bne.n	800714a <_fwalk_reent+0xe>
 800715a:	4638      	mov	r0, r7
 800715c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007160:	89ab      	ldrh	r3, [r5, #12]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d907      	bls.n	8007176 <_fwalk_reent+0x3a>
 8007166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800716a:	3301      	adds	r3, #1
 800716c:	d003      	beq.n	8007176 <_fwalk_reent+0x3a>
 800716e:	4629      	mov	r1, r5
 8007170:	4630      	mov	r0, r6
 8007172:	47c0      	blx	r8
 8007174:	4307      	orrs	r7, r0
 8007176:	3568      	adds	r5, #104	; 0x68
 8007178:	e7e9      	b.n	800714e <_fwalk_reent+0x12>

0800717a <__retarget_lock_init_recursive>:
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_acquire_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_release_recursive>:
 800717e:	4770      	bx	lr

08007180 <__swhatbuf_r>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	460e      	mov	r6, r1
 8007184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007188:	2900      	cmp	r1, #0
 800718a:	b096      	sub	sp, #88	; 0x58
 800718c:	4614      	mov	r4, r2
 800718e:	461d      	mov	r5, r3
 8007190:	da08      	bge.n	80071a4 <__swhatbuf_r+0x24>
 8007192:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	602a      	str	r2, [r5, #0]
 800719a:	061a      	lsls	r2, r3, #24
 800719c:	d410      	bmi.n	80071c0 <__swhatbuf_r+0x40>
 800719e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071a2:	e00e      	b.n	80071c2 <__swhatbuf_r+0x42>
 80071a4:	466a      	mov	r2, sp
 80071a6:	f000 f9a7 	bl	80074f8 <_fstat_r>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	dbf1      	blt.n	8007192 <__swhatbuf_r+0x12>
 80071ae:	9a01      	ldr	r2, [sp, #4]
 80071b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071b8:	425a      	negs	r2, r3
 80071ba:	415a      	adcs	r2, r3
 80071bc:	602a      	str	r2, [r5, #0]
 80071be:	e7ee      	b.n	800719e <__swhatbuf_r+0x1e>
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	2000      	movs	r0, #0
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	b016      	add	sp, #88	; 0x58
 80071c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071cc <__smakebuf_r>:
 80071cc:	898b      	ldrh	r3, [r1, #12]
 80071ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071d0:	079d      	lsls	r5, r3, #30
 80071d2:	4606      	mov	r6, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	d507      	bpl.n	80071e8 <__smakebuf_r+0x1c>
 80071d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	2301      	movs	r3, #1
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	b002      	add	sp, #8
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	ab01      	add	r3, sp, #4
 80071ea:	466a      	mov	r2, sp
 80071ec:	f7ff ffc8 	bl	8007180 <__swhatbuf_r>
 80071f0:	9900      	ldr	r1, [sp, #0]
 80071f2:	4605      	mov	r5, r0
 80071f4:	4630      	mov	r0, r6
 80071f6:	f000 f895 	bl	8007324 <_malloc_r>
 80071fa:	b948      	cbnz	r0, 8007210 <__smakebuf_r+0x44>
 80071fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007200:	059a      	lsls	r2, r3, #22
 8007202:	d4ef      	bmi.n	80071e4 <__smakebuf_r+0x18>
 8007204:	f023 0303 	bic.w	r3, r3, #3
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	e7e3      	b.n	80071d8 <__smakebuf_r+0xc>
 8007210:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <__smakebuf_r+0x7c>)
 8007212:	62b3      	str	r3, [r6, #40]	; 0x28
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	6020      	str	r0, [r4, #0]
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	6163      	str	r3, [r4, #20]
 8007222:	9b01      	ldr	r3, [sp, #4]
 8007224:	6120      	str	r0, [r4, #16]
 8007226:	b15b      	cbz	r3, 8007240 <__smakebuf_r+0x74>
 8007228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f975 	bl	800751c <_isatty_r>
 8007232:	b128      	cbz	r0, 8007240 <__smakebuf_r+0x74>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	89a0      	ldrh	r0, [r4, #12]
 8007242:	4305      	orrs	r5, r0
 8007244:	81a5      	strh	r5, [r4, #12]
 8007246:	e7cd      	b.n	80071e4 <__smakebuf_r+0x18>
 8007248:	08006fd9 	.word	0x08006fd9

0800724c <_free_r>:
 800724c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724e:	2900      	cmp	r1, #0
 8007250:	d044      	beq.n	80072dc <_free_r+0x90>
 8007252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007256:	9001      	str	r0, [sp, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f1a1 0404 	sub.w	r4, r1, #4
 800725e:	bfb8      	it	lt
 8007260:	18e4      	addlt	r4, r4, r3
 8007262:	f000 f97d 	bl	8007560 <__malloc_lock>
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <_free_r+0x94>)
 8007268:	9801      	ldr	r0, [sp, #4]
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	b933      	cbnz	r3, 800727c <_free_r+0x30>
 800726e:	6063      	str	r3, [r4, #4]
 8007270:	6014      	str	r4, [r2, #0]
 8007272:	b003      	add	sp, #12
 8007274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007278:	f000 b978 	b.w	800756c <__malloc_unlock>
 800727c:	42a3      	cmp	r3, r4
 800727e:	d908      	bls.n	8007292 <_free_r+0x46>
 8007280:	6825      	ldr	r5, [r4, #0]
 8007282:	1961      	adds	r1, r4, r5
 8007284:	428b      	cmp	r3, r1
 8007286:	bf01      	itttt	eq
 8007288:	6819      	ldreq	r1, [r3, #0]
 800728a:	685b      	ldreq	r3, [r3, #4]
 800728c:	1949      	addeq	r1, r1, r5
 800728e:	6021      	streq	r1, [r4, #0]
 8007290:	e7ed      	b.n	800726e <_free_r+0x22>
 8007292:	461a      	mov	r2, r3
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	b10b      	cbz	r3, 800729c <_free_r+0x50>
 8007298:	42a3      	cmp	r3, r4
 800729a:	d9fa      	bls.n	8007292 <_free_r+0x46>
 800729c:	6811      	ldr	r1, [r2, #0]
 800729e:	1855      	adds	r5, r2, r1
 80072a0:	42a5      	cmp	r5, r4
 80072a2:	d10b      	bne.n	80072bc <_free_r+0x70>
 80072a4:	6824      	ldr	r4, [r4, #0]
 80072a6:	4421      	add	r1, r4
 80072a8:	1854      	adds	r4, r2, r1
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	6011      	str	r1, [r2, #0]
 80072ae:	d1e0      	bne.n	8007272 <_free_r+0x26>
 80072b0:	681c      	ldr	r4, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	6053      	str	r3, [r2, #4]
 80072b6:	4421      	add	r1, r4
 80072b8:	6011      	str	r1, [r2, #0]
 80072ba:	e7da      	b.n	8007272 <_free_r+0x26>
 80072bc:	d902      	bls.n	80072c4 <_free_r+0x78>
 80072be:	230c      	movs	r3, #12
 80072c0:	6003      	str	r3, [r0, #0]
 80072c2:	e7d6      	b.n	8007272 <_free_r+0x26>
 80072c4:	6825      	ldr	r5, [r4, #0]
 80072c6:	1961      	adds	r1, r4, r5
 80072c8:	428b      	cmp	r3, r1
 80072ca:	bf04      	itt	eq
 80072cc:	6819      	ldreq	r1, [r3, #0]
 80072ce:	685b      	ldreq	r3, [r3, #4]
 80072d0:	6063      	str	r3, [r4, #4]
 80072d2:	bf04      	itt	eq
 80072d4:	1949      	addeq	r1, r1, r5
 80072d6:	6021      	streq	r1, [r4, #0]
 80072d8:	6054      	str	r4, [r2, #4]
 80072da:	e7ca      	b.n	8007272 <_free_r+0x26>
 80072dc:	b003      	add	sp, #12
 80072de:	bd30      	pop	{r4, r5, pc}
 80072e0:	2000021c 	.word	0x2000021c

080072e4 <sbrk_aligned>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4e0e      	ldr	r6, [pc, #56]	; (8007320 <sbrk_aligned+0x3c>)
 80072e8:	460c      	mov	r4, r1
 80072ea:	6831      	ldr	r1, [r6, #0]
 80072ec:	4605      	mov	r5, r0
 80072ee:	b911      	cbnz	r1, 80072f6 <sbrk_aligned+0x12>
 80072f0:	f000 f88c 	bl	800740c <_sbrk_r>
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f887 	bl	800740c <_sbrk_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d00a      	beq.n	8007318 <sbrk_aligned+0x34>
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d007      	beq.n	800731c <sbrk_aligned+0x38>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4628      	mov	r0, r5
 8007310:	f000 f87c 	bl	800740c <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d101      	bne.n	800731c <sbrk_aligned+0x38>
 8007318:	f04f 34ff 	mov.w	r4, #4294967295
 800731c:	4620      	mov	r0, r4
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	20000220 	.word	0x20000220

08007324 <_malloc_r>:
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	1ccd      	adds	r5, r1, #3
 800732a:	f025 0503 	bic.w	r5, r5, #3
 800732e:	3508      	adds	r5, #8
 8007330:	2d0c      	cmp	r5, #12
 8007332:	bf38      	it	cc
 8007334:	250c      	movcc	r5, #12
 8007336:	2d00      	cmp	r5, #0
 8007338:	4607      	mov	r7, r0
 800733a:	db01      	blt.n	8007340 <_malloc_r+0x1c>
 800733c:	42a9      	cmp	r1, r5
 800733e:	d905      	bls.n	800734c <_malloc_r+0x28>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	2600      	movs	r6, #0
 8007346:	4630      	mov	r0, r6
 8007348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800734c:	4e2e      	ldr	r6, [pc, #184]	; (8007408 <_malloc_r+0xe4>)
 800734e:	f000 f907 	bl	8007560 <__malloc_lock>
 8007352:	6833      	ldr	r3, [r6, #0]
 8007354:	461c      	mov	r4, r3
 8007356:	bb34      	cbnz	r4, 80073a6 <_malloc_r+0x82>
 8007358:	4629      	mov	r1, r5
 800735a:	4638      	mov	r0, r7
 800735c:	f7ff ffc2 	bl	80072e4 <sbrk_aligned>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	4604      	mov	r4, r0
 8007364:	d14d      	bne.n	8007402 <_malloc_r+0xde>
 8007366:	6834      	ldr	r4, [r6, #0]
 8007368:	4626      	mov	r6, r4
 800736a:	2e00      	cmp	r6, #0
 800736c:	d140      	bne.n	80073f0 <_malloc_r+0xcc>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	4631      	mov	r1, r6
 8007372:	4638      	mov	r0, r7
 8007374:	eb04 0803 	add.w	r8, r4, r3
 8007378:	f000 f848 	bl	800740c <_sbrk_r>
 800737c:	4580      	cmp	r8, r0
 800737e:	d13a      	bne.n	80073f6 <_malloc_r+0xd2>
 8007380:	6821      	ldr	r1, [r4, #0]
 8007382:	3503      	adds	r5, #3
 8007384:	1a6d      	subs	r5, r5, r1
 8007386:	f025 0503 	bic.w	r5, r5, #3
 800738a:	3508      	adds	r5, #8
 800738c:	2d0c      	cmp	r5, #12
 800738e:	bf38      	it	cc
 8007390:	250c      	movcc	r5, #12
 8007392:	4629      	mov	r1, r5
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff ffa5 	bl	80072e4 <sbrk_aligned>
 800739a:	3001      	adds	r0, #1
 800739c:	d02b      	beq.n	80073f6 <_malloc_r+0xd2>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	442b      	add	r3, r5
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	e00e      	b.n	80073c4 <_malloc_r+0xa0>
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	1b52      	subs	r2, r2, r5
 80073aa:	d41e      	bmi.n	80073ea <_malloc_r+0xc6>
 80073ac:	2a0b      	cmp	r2, #11
 80073ae:	d916      	bls.n	80073de <_malloc_r+0xba>
 80073b0:	1961      	adds	r1, r4, r5
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	6025      	str	r5, [r4, #0]
 80073b6:	bf18      	it	ne
 80073b8:	6059      	strne	r1, [r3, #4]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	bf08      	it	eq
 80073be:	6031      	streq	r1, [r6, #0]
 80073c0:	5162      	str	r2, [r4, r5]
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	4638      	mov	r0, r7
 80073c6:	f104 060b 	add.w	r6, r4, #11
 80073ca:	f000 f8cf 	bl	800756c <__malloc_unlock>
 80073ce:	f026 0607 	bic.w	r6, r6, #7
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	1af2      	subs	r2, r6, r3
 80073d6:	d0b6      	beq.n	8007346 <_malloc_r+0x22>
 80073d8:	1b9b      	subs	r3, r3, r6
 80073da:	50a3      	str	r3, [r4, r2]
 80073dc:	e7b3      	b.n	8007346 <_malloc_r+0x22>
 80073de:	6862      	ldr	r2, [r4, #4]
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	bf0c      	ite	eq
 80073e4:	6032      	streq	r2, [r6, #0]
 80073e6:	605a      	strne	r2, [r3, #4]
 80073e8:	e7ec      	b.n	80073c4 <_malloc_r+0xa0>
 80073ea:	4623      	mov	r3, r4
 80073ec:	6864      	ldr	r4, [r4, #4]
 80073ee:	e7b2      	b.n	8007356 <_malloc_r+0x32>
 80073f0:	4634      	mov	r4, r6
 80073f2:	6876      	ldr	r6, [r6, #4]
 80073f4:	e7b9      	b.n	800736a <_malloc_r+0x46>
 80073f6:	230c      	movs	r3, #12
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4638      	mov	r0, r7
 80073fc:	f000 f8b6 	bl	800756c <__malloc_unlock>
 8007400:	e7a1      	b.n	8007346 <_malloc_r+0x22>
 8007402:	6025      	str	r5, [r4, #0]
 8007404:	e7de      	b.n	80073c4 <_malloc_r+0xa0>
 8007406:	bf00      	nop
 8007408:	2000021c 	.word	0x2000021c

0800740c <_sbrk_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d06      	ldr	r5, [pc, #24]	; (8007428 <_sbrk_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	f7fa fa8e 	bl	8001938 <_sbrk>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_sbrk_r+0x1a>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_sbrk_r+0x1a>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000224 	.word	0x20000224

0800742c <__sread>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	f000 f8a0 	bl	8007578 <_read_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	bfab      	itete	ge
 800743c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743e:	89a3      	ldrhlt	r3, [r4, #12]
 8007440:	181b      	addge	r3, r3, r0
 8007442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007446:	bfac      	ite	ge
 8007448:	6563      	strge	r3, [r4, #84]	; 0x54
 800744a:	81a3      	strhlt	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__swrite>:
 800744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	461f      	mov	r7, r3
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	05db      	lsls	r3, r3, #23
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4616      	mov	r6, r2
 800745e:	d505      	bpl.n	800746c <__swrite+0x1e>
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	2302      	movs	r3, #2
 8007466:	2200      	movs	r2, #0
 8007468:	f000 f868 	bl	800753c <_lseek_r>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	f000 b817 	b.w	80074b4 <_write_r>

08007486 <__sseek>:
 8007486:	b510      	push	{r4, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 f855 	bl	800753c <_lseek_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	bf15      	itete	ne
 8007498:	6560      	strne	r0, [r4, #84]	; 0x54
 800749a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074a2:	81a3      	strheq	r3, [r4, #12]
 80074a4:	bf18      	it	ne
 80074a6:	81a3      	strhne	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__sclose>:
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 b813 	b.w	80074d8 <_close_r>
	...

080074b4 <_write_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_write_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa f9e7 	bl	8001896 <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_write_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_write_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20000224 	.word	0x20000224

080074d8 <_close_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_close_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fa f9f3 	bl	80018ce <_close>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_close_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_close_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000224 	.word	0x20000224

080074f8 <_fstat_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_fstat_r+0x20>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	f7fa f9ee 	bl	80018e6 <_fstat>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d102      	bne.n	8007514 <_fstat_r+0x1c>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b103      	cbz	r3, 8007514 <_fstat_r+0x1c>
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20000224 	.word	0x20000224

0800751c <_isatty_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	; (8007538 <_isatty_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fa f9ed 	bl	8001906 <_isatty>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_isatty_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_isatty_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000224 	.word	0x20000224

0800753c <_lseek_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	; (800755c <_lseek_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7fa f9e6 	bl	800191c <_lseek>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_lseek_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_lseek_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	20000224 	.word	0x20000224

08007560 <__malloc_lock>:
 8007560:	4801      	ldr	r0, [pc, #4]	; (8007568 <__malloc_lock+0x8>)
 8007562:	f7ff be0b 	b.w	800717c <__retarget_lock_acquire_recursive>
 8007566:	bf00      	nop
 8007568:	20000218 	.word	0x20000218

0800756c <__malloc_unlock>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__malloc_unlock+0x8>)
 800756e:	f7ff be06 	b.w	800717e <__retarget_lock_release_recursive>
 8007572:	bf00      	nop
 8007574:	20000218 	.word	0x20000218

08007578 <_read_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d07      	ldr	r5, [pc, #28]	; (8007598 <_read_r+0x20>)
 800757c:	4604      	mov	r4, r0
 800757e:	4608      	mov	r0, r1
 8007580:	4611      	mov	r1, r2
 8007582:	2200      	movs	r2, #0
 8007584:	602a      	str	r2, [r5, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	f7fa f968 	bl	800185c <_read>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_read_r+0x1e>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_read_r+0x1e>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000224 	.word	0x20000224
 800759c:	00000000 	.word	0x00000000

080075a0 <ceil>:
 80075a0:	ec51 0b10 	vmov	r0, r1, d0
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80075ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80075b0:	2e13      	cmp	r6, #19
 80075b2:	ee10 5a10 	vmov	r5, s0
 80075b6:	ee10 8a10 	vmov	r8, s0
 80075ba:	460c      	mov	r4, r1
 80075bc:	dc30      	bgt.n	8007620 <ceil+0x80>
 80075be:	2e00      	cmp	r6, #0
 80075c0:	da12      	bge.n	80075e8 <ceil+0x48>
 80075c2:	a335      	add	r3, pc, #212	; (adr r3, 8007698 <ceil+0xf8>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f8 fe04 	bl	80001d4 <__adddf3>
 80075cc:	2200      	movs	r2, #0
 80075ce:	2300      	movs	r3, #0
 80075d0:	f7f9 fa46 	bl	8000a60 <__aeabi_dcmpgt>
 80075d4:	b128      	cbz	r0, 80075e2 <ceil+0x42>
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	db55      	blt.n	8007686 <ceil+0xe6>
 80075da:	432c      	orrs	r4, r5
 80075dc:	d057      	beq.n	800768e <ceil+0xee>
 80075de:	4c30      	ldr	r4, [pc, #192]	; (80076a0 <ceil+0x100>)
 80075e0:	2500      	movs	r5, #0
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	e025      	b.n	8007634 <ceil+0x94>
 80075e8:	4f2e      	ldr	r7, [pc, #184]	; (80076a4 <ceil+0x104>)
 80075ea:	4137      	asrs	r7, r6
 80075ec:	ea01 0307 	and.w	r3, r1, r7
 80075f0:	4303      	orrs	r3, r0
 80075f2:	d01f      	beq.n	8007634 <ceil+0x94>
 80075f4:	a328      	add	r3, pc, #160	; (adr r3, 8007698 <ceil+0xf8>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fdeb 	bl	80001d4 <__adddf3>
 80075fe:	2200      	movs	r2, #0
 8007600:	2300      	movs	r3, #0
 8007602:	f7f9 fa2d 	bl	8000a60 <__aeabi_dcmpgt>
 8007606:	2800      	cmp	r0, #0
 8007608:	d0eb      	beq.n	80075e2 <ceil+0x42>
 800760a:	2c00      	cmp	r4, #0
 800760c:	bfc2      	ittt	gt
 800760e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007612:	fa43 f606 	asrgt.w	r6, r3, r6
 8007616:	19a4      	addgt	r4, r4, r6
 8007618:	ea24 0407 	bic.w	r4, r4, r7
 800761c:	2500      	movs	r5, #0
 800761e:	e7e0      	b.n	80075e2 <ceil+0x42>
 8007620:	2e33      	cmp	r6, #51	; 0x33
 8007622:	dd0b      	ble.n	800763c <ceil+0x9c>
 8007624:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007628:	d104      	bne.n	8007634 <ceil+0x94>
 800762a:	ee10 2a10 	vmov	r2, s0
 800762e:	460b      	mov	r3, r1
 8007630:	f7f8 fdd0 	bl	80001d4 <__adddf3>
 8007634:	ec41 0b10 	vmov	d0, r0, r1
 8007638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007640:	f04f 33ff 	mov.w	r3, #4294967295
 8007644:	fa23 f707 	lsr.w	r7, r3, r7
 8007648:	4207      	tst	r7, r0
 800764a:	d0f3      	beq.n	8007634 <ceil+0x94>
 800764c:	a312      	add	r3, pc, #72	; (adr r3, 8007698 <ceil+0xf8>)
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 fdbf 	bl	80001d4 <__adddf3>
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	f7f9 fa01 	bl	8000a60 <__aeabi_dcmpgt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d0bf      	beq.n	80075e2 <ceil+0x42>
 8007662:	2c00      	cmp	r4, #0
 8007664:	dd02      	ble.n	800766c <ceil+0xcc>
 8007666:	2e14      	cmp	r6, #20
 8007668:	d103      	bne.n	8007672 <ceil+0xd2>
 800766a:	3401      	adds	r4, #1
 800766c:	ea25 0507 	bic.w	r5, r5, r7
 8007670:	e7b7      	b.n	80075e2 <ceil+0x42>
 8007672:	2301      	movs	r3, #1
 8007674:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007678:	fa03 f606 	lsl.w	r6, r3, r6
 800767c:	4435      	add	r5, r6
 800767e:	4545      	cmp	r5, r8
 8007680:	bf38      	it	cc
 8007682:	18e4      	addcc	r4, r4, r3
 8007684:	e7f2      	b.n	800766c <ceil+0xcc>
 8007686:	2500      	movs	r5, #0
 8007688:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800768c:	e7a9      	b.n	80075e2 <ceil+0x42>
 800768e:	4625      	mov	r5, r4
 8007690:	e7a7      	b.n	80075e2 <ceil+0x42>
 8007692:	bf00      	nop
 8007694:	f3af 8000 	nop.w
 8007698:	8800759c 	.word	0x8800759c
 800769c:	7e37e43c 	.word	0x7e37e43c
 80076a0:	3ff00000 	.word	0x3ff00000
 80076a4:	000fffff 	.word	0x000fffff

080076a8 <sin>:
 80076a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076aa:	ec53 2b10 	vmov	r2, r3, d0
 80076ae:	4828      	ldr	r0, [pc, #160]	; (8007750 <sin+0xa8>)
 80076b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80076b4:	4281      	cmp	r1, r0
 80076b6:	dc07      	bgt.n	80076c8 <sin+0x20>
 80076b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007748 <sin+0xa0>
 80076bc:	2000      	movs	r0, #0
 80076be:	b005      	add	sp, #20
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	f001 b838 	b.w	8008738 <__kernel_sin>
 80076c8:	4822      	ldr	r0, [pc, #136]	; (8007754 <sin+0xac>)
 80076ca:	4281      	cmp	r1, r0
 80076cc:	dd09      	ble.n	80076e2 <sin+0x3a>
 80076ce:	ee10 0a10 	vmov	r0, s0
 80076d2:	4619      	mov	r1, r3
 80076d4:	f7f8 fd7c 	bl	80001d0 <__aeabi_dsub>
 80076d8:	ec41 0b10 	vmov	d0, r0, r1
 80076dc:	b005      	add	sp, #20
 80076de:	f85d fb04 	ldr.w	pc, [sp], #4
 80076e2:	4668      	mov	r0, sp
 80076e4:	f000 fa04 	bl	8007af0 <__ieee754_rem_pio2>
 80076e8:	f000 0003 	and.w	r0, r0, #3
 80076ec:	2801      	cmp	r0, #1
 80076ee:	d00c      	beq.n	800770a <sin+0x62>
 80076f0:	2802      	cmp	r0, #2
 80076f2:	d011      	beq.n	8007718 <sin+0x70>
 80076f4:	b9f0      	cbnz	r0, 8007734 <sin+0x8c>
 80076f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076fa:	ed9d 0b00 	vldr	d0, [sp]
 80076fe:	2001      	movs	r0, #1
 8007700:	f001 f81a 	bl	8008738 <__kernel_sin>
 8007704:	ec51 0b10 	vmov	r0, r1, d0
 8007708:	e7e6      	b.n	80076d8 <sin+0x30>
 800770a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800770e:	ed9d 0b00 	vldr	d0, [sp]
 8007712:	f000 fbf9 	bl	8007f08 <__kernel_cos>
 8007716:	e7f5      	b.n	8007704 <sin+0x5c>
 8007718:	ed9d 1b02 	vldr	d1, [sp, #8]
 800771c:	ed9d 0b00 	vldr	d0, [sp]
 8007720:	2001      	movs	r0, #1
 8007722:	f001 f809 	bl	8008738 <__kernel_sin>
 8007726:	ec53 2b10 	vmov	r2, r3, d0
 800772a:	ee10 0a10 	vmov	r0, s0
 800772e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007732:	e7d1      	b.n	80076d8 <sin+0x30>
 8007734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007738:	ed9d 0b00 	vldr	d0, [sp]
 800773c:	f000 fbe4 	bl	8007f08 <__kernel_cos>
 8007740:	e7f1      	b.n	8007726 <sin+0x7e>
 8007742:	bf00      	nop
 8007744:	f3af 8000 	nop.w
	...
 8007750:	3fe921fb 	.word	0x3fe921fb
 8007754:	7fefffff 	.word	0x7fefffff

08007758 <exp>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	ed2d 8b02 	vpush	{d8}
 800775e:	ec55 4b10 	vmov	r4, r5, d0
 8007762:	f000 f841 	bl	80077e8 <__ieee754_exp>
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
 800776a:	eef0 8a60 	vmov.f32	s17, s1
 800776e:	ec45 4b10 	vmov	d0, r4, r5
 8007772:	f001 f8d8 	bl	8008926 <finite>
 8007776:	b168      	cbz	r0, 8007794 <exp+0x3c>
 8007778:	a317      	add	r3, pc, #92	; (adr r3, 80077d8 <exp+0x80>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f9 f96d 	bl	8000a60 <__aeabi_dcmpgt>
 8007786:	b160      	cbz	r0, 80077a2 <exp+0x4a>
 8007788:	f7ff f9d8 	bl	8006b3c <__errno>
 800778c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80077c8 <exp+0x70>
 8007790:	2322      	movs	r3, #34	; 0x22
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	eeb0 0a48 	vmov.f32	s0, s16
 8007798:	eef0 0a68 	vmov.f32	s1, s17
 800779c:	ecbd 8b02 	vpop	{d8}
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	a30f      	add	r3, pc, #60	; (adr r3, 80077e0 <exp+0x88>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f9 f93a 	bl	8000a24 <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0ef      	beq.n	8007794 <exp+0x3c>
 80077b4:	f7ff f9c2 	bl	8006b3c <__errno>
 80077b8:	2322      	movs	r3, #34	; 0x22
 80077ba:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80077d0 <exp+0x78>
 80077be:	6003      	str	r3, [r0, #0]
 80077c0:	e7e8      	b.n	8007794 <exp+0x3c>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	00000000 	.word	0x00000000
 80077cc:	7ff00000 	.word	0x7ff00000
	...
 80077d8:	fefa39ef 	.word	0xfefa39ef
 80077dc:	40862e42 	.word	0x40862e42
 80077e0:	d52d3051 	.word	0xd52d3051
 80077e4:	c0874910 	.word	0xc0874910

080077e8 <__ieee754_exp>:
 80077e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	ec55 4b10 	vmov	r4, r5, d0
 80077f0:	49b5      	ldr	r1, [pc, #724]	; (8007ac8 <__ieee754_exp+0x2e0>)
 80077f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80077f6:	428b      	cmp	r3, r1
 80077f8:	ed2d 8b04 	vpush	{d8-d9}
 80077fc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007800:	d93d      	bls.n	800787e <__ieee754_exp+0x96>
 8007802:	49b2      	ldr	r1, [pc, #712]	; (8007acc <__ieee754_exp+0x2e4>)
 8007804:	428b      	cmp	r3, r1
 8007806:	d918      	bls.n	800783a <__ieee754_exp+0x52>
 8007808:	ee10 3a10 	vmov	r3, s0
 800780c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8007810:	4313      	orrs	r3, r2
 8007812:	d009      	beq.n	8007828 <__ieee754_exp+0x40>
 8007814:	ee10 2a10 	vmov	r2, s0
 8007818:	462b      	mov	r3, r5
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fcd9 	bl	80001d4 <__adddf3>
 8007822:	4604      	mov	r4, r0
 8007824:	460d      	mov	r5, r1
 8007826:	e002      	b.n	800782e <__ieee754_exp+0x46>
 8007828:	b10e      	cbz	r6, 800782e <__ieee754_exp+0x46>
 800782a:	2400      	movs	r4, #0
 800782c:	2500      	movs	r5, #0
 800782e:	ecbd 8b04 	vpop	{d8-d9}
 8007832:	ec45 4b10 	vmov	d0, r4, r5
 8007836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783a:	a38d      	add	r3, pc, #564	; (adr r3, 8007a70 <__ieee754_exp+0x288>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	ee10 0a10 	vmov	r0, s0
 8007844:	4629      	mov	r1, r5
 8007846:	f7f9 f90b 	bl	8000a60 <__aeabi_dcmpgt>
 800784a:	4607      	mov	r7, r0
 800784c:	b130      	cbz	r0, 800785c <__ieee754_exp+0x74>
 800784e:	ecbd 8b04 	vpop	{d8-d9}
 8007852:	2000      	movs	r0, #0
 8007854:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	f001 b853 	b.w	8008902 <__math_oflow>
 800785c:	a386      	add	r3, pc, #536	; (adr r3, 8007a78 <__ieee754_exp+0x290>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	f7f9 f8dd 	bl	8000a24 <__aeabi_dcmplt>
 800786a:	2800      	cmp	r0, #0
 800786c:	f000 808b 	beq.w	8007986 <__ieee754_exp+0x19e>
 8007870:	ecbd 8b04 	vpop	{d8-d9}
 8007874:	4638      	mov	r0, r7
 8007876:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787a:	f001 b839 	b.w	80088f0 <__math_uflow>
 800787e:	4a94      	ldr	r2, [pc, #592]	; (8007ad0 <__ieee754_exp+0x2e8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	f240 80ac 	bls.w	80079de <__ieee754_exp+0x1f6>
 8007886:	4a93      	ldr	r2, [pc, #588]	; (8007ad4 <__ieee754_exp+0x2ec>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d87c      	bhi.n	8007986 <__ieee754_exp+0x19e>
 800788c:	4b92      	ldr	r3, [pc, #584]	; (8007ad8 <__ieee754_exp+0x2f0>)
 800788e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	ee10 0a10 	vmov	r0, s0
 800789a:	4629      	mov	r1, r5
 800789c:	f7f8 fc98 	bl	80001d0 <__aeabi_dsub>
 80078a0:	4b8e      	ldr	r3, [pc, #568]	; (8007adc <__ieee754_exp+0x2f4>)
 80078a2:	00f7      	lsls	r7, r6, #3
 80078a4:	443b      	add	r3, r7
 80078a6:	ed93 7b00 	vldr	d7, [r3]
 80078aa:	f1c6 0a01 	rsb	sl, r6, #1
 80078ae:	4680      	mov	r8, r0
 80078b0:	4689      	mov	r9, r1
 80078b2:	ebaa 0a06 	sub.w	sl, sl, r6
 80078b6:	eeb0 8a47 	vmov.f32	s16, s14
 80078ba:	eef0 8a67 	vmov.f32	s17, s15
 80078be:	ec53 2b18 	vmov	r2, r3, d8
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fc83 	bl	80001d0 <__aeabi_dsub>
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	4622      	mov	r2, r4
 80078d0:	462b      	mov	r3, r5
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f8 fe33 	bl	8000540 <__aeabi_dmul>
 80078da:	a369      	add	r3, pc, #420	; (adr r3, 8007a80 <__ieee754_exp+0x298>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	4606      	mov	r6, r0
 80078e2:	460f      	mov	r7, r1
 80078e4:	f7f8 fe2c 	bl	8000540 <__aeabi_dmul>
 80078e8:	a367      	add	r3, pc, #412	; (adr r3, 8007a88 <__ieee754_exp+0x2a0>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fc6f 	bl	80001d0 <__aeabi_dsub>
 80078f2:	4632      	mov	r2, r6
 80078f4:	463b      	mov	r3, r7
 80078f6:	f7f8 fe23 	bl	8000540 <__aeabi_dmul>
 80078fa:	a365      	add	r3, pc, #404	; (adr r3, 8007a90 <__ieee754_exp+0x2a8>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fc68 	bl	80001d4 <__adddf3>
 8007904:	4632      	mov	r2, r6
 8007906:	463b      	mov	r3, r7
 8007908:	f7f8 fe1a 	bl	8000540 <__aeabi_dmul>
 800790c:	a362      	add	r3, pc, #392	; (adr r3, 8007a98 <__ieee754_exp+0x2b0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fc5d 	bl	80001d0 <__aeabi_dsub>
 8007916:	4632      	mov	r2, r6
 8007918:	463b      	mov	r3, r7
 800791a:	f7f8 fe11 	bl	8000540 <__aeabi_dmul>
 800791e:	a360      	add	r3, pc, #384	; (adr r3, 8007aa0 <__ieee754_exp+0x2b8>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fc56 	bl	80001d4 <__adddf3>
 8007928:	4632      	mov	r2, r6
 800792a:	463b      	mov	r3, r7
 800792c:	f7f8 fe08 	bl	8000540 <__aeabi_dmul>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fc4a 	bl	80001d0 <__aeabi_dsub>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4606      	mov	r6, r0
 8007942:	460f      	mov	r7, r1
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fdfa 	bl	8000540 <__aeabi_dmul>
 800794c:	ec41 0b19 	vmov	d9, r0, r1
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	d15d      	bne.n	8007a12 <__ieee754_exp+0x22a>
 8007956:	2200      	movs	r2, #0
 8007958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fc36 	bl	80001d0 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	ec51 0b19 	vmov	r0, r1, d9
 800796c:	f7f8 ff12 	bl	8000794 <__aeabi_ddiv>
 8007970:	4622      	mov	r2, r4
 8007972:	462b      	mov	r3, r5
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	2000      	movs	r0, #0
 800797e:	4958      	ldr	r1, [pc, #352]	; (8007ae0 <__ieee754_exp+0x2f8>)
 8007980:	f7f8 fc26 	bl	80001d0 <__aeabi_dsub>
 8007984:	e74d      	b.n	8007822 <__ieee754_exp+0x3a>
 8007986:	4857      	ldr	r0, [pc, #348]	; (8007ae4 <__ieee754_exp+0x2fc>)
 8007988:	a347      	add	r3, pc, #284	; (adr r3, 8007aa8 <__ieee754_exp+0x2c0>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007992:	4629      	mov	r1, r5
 8007994:	4620      	mov	r0, r4
 8007996:	f7f8 fdd3 	bl	8000540 <__aeabi_dmul>
 800799a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800799e:	f7f8 fc19 	bl	80001d4 <__adddf3>
 80079a2:	f7f9 f867 	bl	8000a74 <__aeabi_d2iz>
 80079a6:	4682      	mov	sl, r0
 80079a8:	f7f8 fd60 	bl	800046c <__aeabi_i2d>
 80079ac:	a340      	add	r3, pc, #256	; (adr r3, 8007ab0 <__ieee754_exp+0x2c8>)
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f8 fdc3 	bl	8000540 <__aeabi_dmul>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fc05 	bl	80001d0 <__aeabi_dsub>
 80079c6:	a33c      	add	r3, pc, #240	; (adr r3, 8007ab8 <__ieee754_exp+0x2d0>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	4680      	mov	r8, r0
 80079ce:	4689      	mov	r9, r1
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f8 fdb4 	bl	8000540 <__aeabi_dmul>
 80079d8:	ec41 0b18 	vmov	d8, r0, r1
 80079dc:	e76f      	b.n	80078be <__ieee754_exp+0xd6>
 80079de:	4a42      	ldr	r2, [pc, #264]	; (8007ae8 <__ieee754_exp+0x300>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d811      	bhi.n	8007a08 <__ieee754_exp+0x220>
 80079e4:	a336      	add	r3, pc, #216	; (adr r3, 8007ac0 <__ieee754_exp+0x2d8>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	ee10 0a10 	vmov	r0, s0
 80079ee:	4629      	mov	r1, r5
 80079f0:	f7f8 fbf0 	bl	80001d4 <__adddf3>
 80079f4:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <__ieee754_exp+0x2f8>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	f7f9 f832 	bl	8000a60 <__aeabi_dcmpgt>
 80079fc:	b138      	cbz	r0, 8007a0e <__ieee754_exp+0x226>
 80079fe:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <__ieee754_exp+0x2f8>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	4620      	mov	r0, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	e70a      	b.n	800781e <__ieee754_exp+0x36>
 8007a08:	f04f 0a00 	mov.w	sl, #0
 8007a0c:	e75f      	b.n	80078ce <__ieee754_exp+0xe6>
 8007a0e:	4682      	mov	sl, r0
 8007a10:	e75d      	b.n	80078ce <__ieee754_exp+0xe6>
 8007a12:	4632      	mov	r2, r6
 8007a14:	463b      	mov	r3, r7
 8007a16:	2000      	movs	r0, #0
 8007a18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007a1c:	f7f8 fbd8 	bl	80001d0 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	ec51 0b19 	vmov	r0, r1, d9
 8007a28:	f7f8 feb4 	bl	8000794 <__aeabi_ddiv>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	ec51 0b18 	vmov	r0, r1, d8
 8007a34:	f7f8 fbcc 	bl	80001d0 <__aeabi_dsub>
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	f7f8 fbc8 	bl	80001d0 <__aeabi_dsub>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	2000      	movs	r0, #0
 8007a46:	4926      	ldr	r1, [pc, #152]	; (8007ae0 <__ieee754_exp+0x2f8>)
 8007a48:	f7f8 fbc2 	bl	80001d0 <__aeabi_dsub>
 8007a4c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007a50:	4592      	cmp	sl, r2
 8007a52:	db02      	blt.n	8007a5a <__ieee754_exp+0x272>
 8007a54:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007a58:	e6e3      	b.n	8007822 <__ieee754_exp+0x3a>
 8007a5a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007a5e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007a62:	2200      	movs	r2, #0
 8007a64:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007a68:	f7f8 fd6a 	bl	8000540 <__aeabi_dmul>
 8007a6c:	e6d9      	b.n	8007822 <__ieee754_exp+0x3a>
 8007a6e:	bf00      	nop
 8007a70:	fefa39ef 	.word	0xfefa39ef
 8007a74:	40862e42 	.word	0x40862e42
 8007a78:	d52d3051 	.word	0xd52d3051
 8007a7c:	c0874910 	.word	0xc0874910
 8007a80:	72bea4d0 	.word	0x72bea4d0
 8007a84:	3e663769 	.word	0x3e663769
 8007a88:	c5d26bf1 	.word	0xc5d26bf1
 8007a8c:	3ebbbd41 	.word	0x3ebbbd41
 8007a90:	af25de2c 	.word	0xaf25de2c
 8007a94:	3f11566a 	.word	0x3f11566a
 8007a98:	16bebd93 	.word	0x16bebd93
 8007a9c:	3f66c16c 	.word	0x3f66c16c
 8007aa0:	5555553e 	.word	0x5555553e
 8007aa4:	3fc55555 	.word	0x3fc55555
 8007aa8:	652b82fe 	.word	0x652b82fe
 8007aac:	3ff71547 	.word	0x3ff71547
 8007ab0:	fee00000 	.word	0xfee00000
 8007ab4:	3fe62e42 	.word	0x3fe62e42
 8007ab8:	35793c76 	.word	0x35793c76
 8007abc:	3dea39ef 	.word	0x3dea39ef
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	7e37e43c 	.word	0x7e37e43c
 8007ac8:	40862e41 	.word	0x40862e41
 8007acc:	7fefffff 	.word	0x7fefffff
 8007ad0:	3fd62e42 	.word	0x3fd62e42
 8007ad4:	3ff0a2b1 	.word	0x3ff0a2b1
 8007ad8:	08008c40 	.word	0x08008c40
 8007adc:	08008c50 	.word	0x08008c50
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	08008c30 	.word	0x08008c30
 8007ae8:	3defffff 	.word	0x3defffff
 8007aec:	00000000 	.word	0x00000000

08007af0 <__ieee754_rem_pio2>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	ed2d 8b02 	vpush	{d8}
 8007af8:	ec55 4b10 	vmov	r4, r5, d0
 8007afc:	4bca      	ldr	r3, [pc, #808]	; (8007e28 <__ieee754_rem_pio2+0x338>)
 8007afe:	b08b      	sub	sp, #44	; 0x2c
 8007b00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007b04:	4598      	cmp	r8, r3
 8007b06:	4682      	mov	sl, r0
 8007b08:	9502      	str	r5, [sp, #8]
 8007b0a:	dc08      	bgt.n	8007b1e <__ieee754_rem_pio2+0x2e>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	ed80 0b00 	vstr	d0, [r0]
 8007b14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007b18:	f04f 0b00 	mov.w	fp, #0
 8007b1c:	e028      	b.n	8007b70 <__ieee754_rem_pio2+0x80>
 8007b1e:	4bc3      	ldr	r3, [pc, #780]	; (8007e2c <__ieee754_rem_pio2+0x33c>)
 8007b20:	4598      	cmp	r8, r3
 8007b22:	dc78      	bgt.n	8007c16 <__ieee754_rem_pio2+0x126>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	4ec2      	ldr	r6, [pc, #776]	; (8007e30 <__ieee754_rem_pio2+0x340>)
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	ee10 0a10 	vmov	r0, s0
 8007b2e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x300>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	4629      	mov	r1, r5
 8007b36:	dd39      	ble.n	8007bac <__ieee754_rem_pio2+0xbc>
 8007b38:	f7f8 fb4a 	bl	80001d0 <__aeabi_dsub>
 8007b3c:	45b0      	cmp	r8, r6
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	d01b      	beq.n	8007b7c <__ieee754_rem_pio2+0x8c>
 8007b44:	a3ac      	add	r3, pc, #688	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x308>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb41 	bl	80001d0 <__aeabi_dsub>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9ca 2300 	strd	r2, r3, [sl]
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fb39 	bl	80001d0 <__aeabi_dsub>
 8007b5e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x308>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb34 	bl	80001d0 <__aeabi_dsub>
 8007b68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b6c:	f04f 0b01 	mov.w	fp, #1
 8007b70:	4658      	mov	r0, fp
 8007b72:	b00b      	add	sp, #44	; 0x2c
 8007b74:	ecbd 8b02 	vpop	{d8}
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e00 <__ieee754_rem_pio2+0x310>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fb25 	bl	80001d0 <__aeabi_dsub>
 8007b86:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x318>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	f7f8 fb1e 	bl	80001d0 <__aeabi_dsub>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e9ca 2300 	strd	r2, r3, [sl]
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fb16 	bl	80001d0 <__aeabi_dsub>
 8007ba4:	a398      	add	r3, pc, #608	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x318>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	e7db      	b.n	8007b64 <__ieee754_rem_pio2+0x74>
 8007bac:	f7f8 fb12 	bl	80001d4 <__adddf3>
 8007bb0:	45b0      	cmp	r8, r6
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	d016      	beq.n	8007be6 <__ieee754_rem_pio2+0xf6>
 8007bb8:	a38f      	add	r3, pc, #572	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x308>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f7f8 fb09 	bl	80001d4 <__adddf3>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e9ca 2300 	strd	r2, r3, [sl]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7f8 faff 	bl	80001d0 <__aeabi_dsub>
 8007bd2:	a389      	add	r3, pc, #548	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x308>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fafc 	bl	80001d4 <__adddf3>
 8007bdc:	f04f 3bff 	mov.w	fp, #4294967295
 8007be0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007be4:	e7c4      	b.n	8007b70 <__ieee754_rem_pio2+0x80>
 8007be6:	a386      	add	r3, pc, #536	; (adr r3, 8007e00 <__ieee754_rem_pio2+0x310>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 faf2 	bl	80001d4 <__adddf3>
 8007bf0:	a385      	add	r3, pc, #532	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x318>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	f7f8 faeb 	bl	80001d4 <__adddf3>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9ca 2300 	strd	r2, r3, [sl]
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fae1 	bl	80001d0 <__aeabi_dsub>
 8007c0e:	a37e      	add	r3, pc, #504	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x318>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	e7e0      	b.n	8007bd8 <__ieee754_rem_pio2+0xe8>
 8007c16:	4b87      	ldr	r3, [pc, #540]	; (8007e34 <__ieee754_rem_pio2+0x344>)
 8007c18:	4598      	cmp	r8, r3
 8007c1a:	f300 80d9 	bgt.w	8007dd0 <__ieee754_rem_pio2+0x2e0>
 8007c1e:	f000 fe79 	bl	8008914 <fabs>
 8007c22:	ec55 4b10 	vmov	r4, r5, d0
 8007c26:	ee10 0a10 	vmov	r0, s0
 8007c2a:	a379      	add	r3, pc, #484	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x320>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fc85 	bl	8000540 <__aeabi_dmul>
 8007c36:	4b80      	ldr	r3, [pc, #512]	; (8007e38 <__ieee754_rem_pio2+0x348>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f7f8 facb 	bl	80001d4 <__adddf3>
 8007c3e:	f7f8 ff19 	bl	8000a74 <__aeabi_d2iz>
 8007c42:	4683      	mov	fp, r0
 8007c44:	f7f8 fc12 	bl	800046c <__aeabi_i2d>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	ec43 2b18 	vmov	d8, r2, r3
 8007c50:	a367      	add	r3, pc, #412	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x300>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fc73 	bl	8000540 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fab5 	bl	80001d0 <__aeabi_dsub>
 8007c66:	a364      	add	r3, pc, #400	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x308>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	ec51 0b18 	vmov	r0, r1, d8
 8007c74:	f7f8 fc64 	bl	8000540 <__aeabi_dmul>
 8007c78:	f1bb 0f1f 	cmp.w	fp, #31
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	460d      	mov	r5, r1
 8007c80:	dc0d      	bgt.n	8007c9e <__ieee754_rem_pio2+0x1ae>
 8007c82:	4b6e      	ldr	r3, [pc, #440]	; (8007e3c <__ieee754_rem_pio2+0x34c>)
 8007c84:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	4543      	cmp	r3, r8
 8007c8e:	d006      	beq.n	8007c9e <__ieee754_rem_pio2+0x1ae>
 8007c90:	4622      	mov	r2, r4
 8007c92:	462b      	mov	r3, r5
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fa9a 	bl	80001d0 <__aeabi_dsub>
 8007c9c:	e00f      	b.n	8007cbe <__ieee754_rem_pio2+0x1ce>
 8007c9e:	462b      	mov	r3, r5
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	f7f8 fa93 	bl	80001d0 <__aeabi_dsub>
 8007caa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007cb4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007cb8:	f1b8 0f10 	cmp.w	r8, #16
 8007cbc:	dc02      	bgt.n	8007cc4 <__ieee754_rem_pio2+0x1d4>
 8007cbe:	e9ca 0100 	strd	r0, r1, [sl]
 8007cc2:	e039      	b.n	8007d38 <__ieee754_rem_pio2+0x248>
 8007cc4:	a34e      	add	r3, pc, #312	; (adr r3, 8007e00 <__ieee754_rem_pio2+0x310>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	ec51 0b18 	vmov	r0, r1, d8
 8007cce:	f7f8 fc37 	bl	8000540 <__aeabi_dmul>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4630      	mov	r0, r6
 8007cdc:	4639      	mov	r1, r7
 8007cde:	f7f8 fa77 	bl	80001d0 <__aeabi_dsub>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 fa6f 	bl	80001d0 <__aeabi_dsub>
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	f7f8 fa6b 	bl	80001d0 <__aeabi_dsub>
 8007cfa:	a343      	add	r3, pc, #268	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x318>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	ec51 0b18 	vmov	r0, r1, d8
 8007d08:	f7f8 fc1a 	bl	8000540 <__aeabi_dmul>
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	462b      	mov	r3, r5
 8007d10:	f7f8 fa5e 	bl	80001d0 <__aeabi_dsub>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4604      	mov	r4, r0
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fa56 	bl	80001d0 <__aeabi_dsub>
 8007d24:	9a03      	ldr	r2, [sp, #12]
 8007d26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b31      	cmp	r3, #49	; 0x31
 8007d2e:	dc24      	bgt.n	8007d7a <__ieee754_rem_pio2+0x28a>
 8007d30:	e9ca 0100 	strd	r0, r1, [sl]
 8007d34:	4646      	mov	r6, r8
 8007d36:	464f      	mov	r7, r9
 8007d38:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4642      	mov	r2, r8
 8007d40:	464b      	mov	r3, r9
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fa44 	bl	80001d0 <__aeabi_dsub>
 8007d48:	462b      	mov	r3, r5
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	f7f8 fa40 	bl	80001d0 <__aeabi_dsub>
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d58:	f6bf af0a 	bge.w	8007b70 <__ieee754_rem_pio2+0x80>
 8007d5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d60:	f8ca 3004 	str.w	r3, [sl, #4]
 8007d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d68:	f8ca 8000 	str.w	r8, [sl]
 8007d6c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007d70:	f8ca 300c 	str.w	r3, [sl, #12]
 8007d74:	f1cb 0b00 	rsb	fp, fp, #0
 8007d78:	e6fa      	b.n	8007b70 <__ieee754_rem_pio2+0x80>
 8007d7a:	a327      	add	r3, pc, #156	; (adr r3, 8007e18 <__ieee754_rem_pio2+0x328>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	ec51 0b18 	vmov	r0, r1, d8
 8007d84:	f7f8 fbdc 	bl	8000540 <__aeabi_dmul>
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f7f8 fa1c 	bl	80001d0 <__aeabi_dsub>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	460f      	mov	r7, r1
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	f7f8 fa14 	bl	80001d0 <__aeabi_dsub>
 8007da8:	4622      	mov	r2, r4
 8007daa:	462b      	mov	r3, r5
 8007dac:	f7f8 fa10 	bl	80001d0 <__aeabi_dsub>
 8007db0:	a31b      	add	r3, pc, #108	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x330>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	ec51 0b18 	vmov	r0, r1, d8
 8007dbe:	f7f8 fbbf 	bl	8000540 <__aeabi_dmul>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	f7f8 fa03 	bl	80001d0 <__aeabi_dsub>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	e75f      	b.n	8007c90 <__ieee754_rem_pio2+0x1a0>
 8007dd0:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <__ieee754_rem_pio2+0x350>)
 8007dd2:	4598      	cmp	r8, r3
 8007dd4:	dd36      	ble.n	8007e44 <__ieee754_rem_pio2+0x354>
 8007dd6:	ee10 2a10 	vmov	r2, s0
 8007dda:	462b      	mov	r3, r5
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 f9f6 	bl	80001d0 <__aeabi_dsub>
 8007de4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007de8:	e9ca 0100 	strd	r0, r1, [sl]
 8007dec:	e694      	b.n	8007b18 <__ieee754_rem_pio2+0x28>
 8007dee:	bf00      	nop
 8007df0:	54400000 	.word	0x54400000
 8007df4:	3ff921fb 	.word	0x3ff921fb
 8007df8:	1a626331 	.word	0x1a626331
 8007dfc:	3dd0b461 	.word	0x3dd0b461
 8007e00:	1a600000 	.word	0x1a600000
 8007e04:	3dd0b461 	.word	0x3dd0b461
 8007e08:	2e037073 	.word	0x2e037073
 8007e0c:	3ba3198a 	.word	0x3ba3198a
 8007e10:	6dc9c883 	.word	0x6dc9c883
 8007e14:	3fe45f30 	.word	0x3fe45f30
 8007e18:	2e000000 	.word	0x2e000000
 8007e1c:	3ba3198a 	.word	0x3ba3198a
 8007e20:	252049c1 	.word	0x252049c1
 8007e24:	397b839a 	.word	0x397b839a
 8007e28:	3fe921fb 	.word	0x3fe921fb
 8007e2c:	4002d97b 	.word	0x4002d97b
 8007e30:	3ff921fb 	.word	0x3ff921fb
 8007e34:	413921fb 	.word	0x413921fb
 8007e38:	3fe00000 	.word	0x3fe00000
 8007e3c:	08008c60 	.word	0x08008c60
 8007e40:	7fefffff 	.word	0x7fefffff
 8007e44:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007e48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007e4c:	ee10 0a10 	vmov	r0, s0
 8007e50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007e54:	ee10 6a10 	vmov	r6, s0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	f7f8 fe0b 	bl	8000a74 <__aeabi_d2iz>
 8007e5e:	f7f8 fb05 	bl	800046c <__aeabi_i2d>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e6e:	f7f8 f9af 	bl	80001d0 <__aeabi_dsub>
 8007e72:	4b23      	ldr	r3, [pc, #140]	; (8007f00 <__ieee754_rem_pio2+0x410>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	f7f8 fb63 	bl	8000540 <__aeabi_dmul>
 8007e7a:	460f      	mov	r7, r1
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	f7f8 fdf9 	bl	8000a74 <__aeabi_d2iz>
 8007e82:	f7f8 faf3 	bl	800046c <__aeabi_i2d>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e92:	f7f8 f99d 	bl	80001d0 <__aeabi_dsub>
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <__ieee754_rem_pio2+0x410>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 fb51 	bl	8000540 <__aeabi_dmul>
 8007e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ea2:	ad04      	add	r5, sp, #16
 8007ea4:	f04f 0803 	mov.w	r8, #3
 8007ea8:	46a9      	mov	r9, r5
 8007eaa:	2600      	movs	r6, #0
 8007eac:	2700      	movs	r7, #0
 8007eae:	4632      	mov	r2, r6
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007eb6:	46c3      	mov	fp, r8
 8007eb8:	3d08      	subs	r5, #8
 8007eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ebe:	f7f8 fda7 	bl	8000a10 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d1f3      	bne.n	8007eae <__ieee754_rem_pio2+0x3be>
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <__ieee754_rem_pio2+0x414>)
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	2302      	movs	r3, #2
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4622      	mov	r2, r4
 8007ed0:	465b      	mov	r3, fp
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	4648      	mov	r0, r9
 8007ed6:	f000 f8df 	bl	8008098 <__kernel_rem_pio2>
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	4683      	mov	fp, r0
 8007ee0:	f6bf ae46 	bge.w	8007b70 <__ieee754_rem_pio2+0x80>
 8007ee4:	e9da 2100 	ldrd	r2, r1, [sl]
 8007ee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eec:	e9ca 2300 	strd	r2, r3, [sl]
 8007ef0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ef8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007efc:	e73a      	b.n	8007d74 <__ieee754_rem_pio2+0x284>
 8007efe:	bf00      	nop
 8007f00:	41700000 	.word	0x41700000
 8007f04:	08008ce0 	.word	0x08008ce0

08007f08 <__kernel_cos>:
 8007f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ec57 6b10 	vmov	r6, r7, d0
 8007f10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007f14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007f18:	ed8d 1b00 	vstr	d1, [sp]
 8007f1c:	da07      	bge.n	8007f2e <__kernel_cos+0x26>
 8007f1e:	ee10 0a10 	vmov	r0, s0
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fda6 	bl	8000a74 <__aeabi_d2iz>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f000 8088 	beq.w	800803e <__kernel_cos+0x136>
 8007f2e:	4632      	mov	r2, r6
 8007f30:	463b      	mov	r3, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	4639      	mov	r1, r7
 8007f36:	f7f8 fb03 	bl	8000540 <__aeabi_dmul>
 8007f3a:	4b51      	ldr	r3, [pc, #324]	; (8008080 <__kernel_cos+0x178>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	f7f8 fafd 	bl	8000540 <__aeabi_dmul>
 8007f46:	a340      	add	r3, pc, #256	; (adr r3, 8008048 <__kernel_cos+0x140>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	468b      	mov	fp, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 faf4 	bl	8000540 <__aeabi_dmul>
 8007f58:	a33d      	add	r3, pc, #244	; (adr r3, 8008050 <__kernel_cos+0x148>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f939 	bl	80001d4 <__adddf3>
 8007f62:	4622      	mov	r2, r4
 8007f64:	462b      	mov	r3, r5
 8007f66:	f7f8 faeb 	bl	8000540 <__aeabi_dmul>
 8007f6a:	a33b      	add	r3, pc, #236	; (adr r3, 8008058 <__kernel_cos+0x150>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f92e 	bl	80001d0 <__aeabi_dsub>
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f7f8 fae2 	bl	8000540 <__aeabi_dmul>
 8007f7c:	a338      	add	r3, pc, #224	; (adr r3, 8008060 <__kernel_cos+0x158>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f927 	bl	80001d4 <__adddf3>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f7f8 fad9 	bl	8000540 <__aeabi_dmul>
 8007f8e:	a336      	add	r3, pc, #216	; (adr r3, 8008068 <__kernel_cos+0x160>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f91c 	bl	80001d0 <__aeabi_dsub>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f7f8 fad0 	bl	8000540 <__aeabi_dmul>
 8007fa0:	a333      	add	r3, pc, #204	; (adr r3, 8008070 <__kernel_cos+0x168>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f915 	bl	80001d4 <__adddf3>
 8007faa:	4622      	mov	r2, r4
 8007fac:	462b      	mov	r3, r5
 8007fae:	f7f8 fac7 	bl	8000540 <__aeabi_dmul>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f7f8 fac3 	bl	8000540 <__aeabi_dmul>
 8007fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fabb 	bl	8000540 <__aeabi_dmul>
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7f8 f8fd 	bl	80001d0 <__aeabi_dsub>
 8007fd6:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <__kernel_cos+0x17c>)
 8007fd8:	4598      	cmp	r8, r3
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	dc10      	bgt.n	8008002 <__kernel_cos+0xfa>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	f7f8 f8f2 	bl	80001d0 <__aeabi_dsub>
 8007fec:	460b      	mov	r3, r1
 8007fee:	4926      	ldr	r1, [pc, #152]	; (8008088 <__kernel_cos+0x180>)
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f7f8 f8ec 	bl	80001d0 <__aeabi_dsub>
 8007ff8:	ec41 0b10 	vmov	d0, r0, r1
 8007ffc:	b003      	add	sp, #12
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	4b22      	ldr	r3, [pc, #136]	; (800808c <__kernel_cos+0x184>)
 8008004:	4920      	ldr	r1, [pc, #128]	; (8008088 <__kernel_cos+0x180>)
 8008006:	4598      	cmp	r8, r3
 8008008:	bfcc      	ite	gt
 800800a:	4d21      	ldrgt	r5, [pc, #132]	; (8008090 <__kernel_cos+0x188>)
 800800c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008010:	2400      	movs	r4, #0
 8008012:	4622      	mov	r2, r4
 8008014:	462b      	mov	r3, r5
 8008016:	2000      	movs	r0, #0
 8008018:	f7f8 f8da 	bl	80001d0 <__aeabi_dsub>
 800801c:	4622      	mov	r2, r4
 800801e:	4680      	mov	r8, r0
 8008020:	4689      	mov	r9, r1
 8008022:	462b      	mov	r3, r5
 8008024:	4650      	mov	r0, sl
 8008026:	4659      	mov	r1, fp
 8008028:	f7f8 f8d2 	bl	80001d0 <__aeabi_dsub>
 800802c:	4632      	mov	r2, r6
 800802e:	463b      	mov	r3, r7
 8008030:	f7f8 f8ce 	bl	80001d0 <__aeabi_dsub>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	e7da      	b.n	8007ff4 <__kernel_cos+0xec>
 800803e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008078 <__kernel_cos+0x170>
 8008042:	e7db      	b.n	8007ffc <__kernel_cos+0xf4>
 8008044:	f3af 8000 	nop.w
 8008048:	be8838d4 	.word	0xbe8838d4
 800804c:	bda8fae9 	.word	0xbda8fae9
 8008050:	bdb4b1c4 	.word	0xbdb4b1c4
 8008054:	3e21ee9e 	.word	0x3e21ee9e
 8008058:	809c52ad 	.word	0x809c52ad
 800805c:	3e927e4f 	.word	0x3e927e4f
 8008060:	19cb1590 	.word	0x19cb1590
 8008064:	3efa01a0 	.word	0x3efa01a0
 8008068:	16c15177 	.word	0x16c15177
 800806c:	3f56c16c 	.word	0x3f56c16c
 8008070:	5555554c 	.word	0x5555554c
 8008074:	3fa55555 	.word	0x3fa55555
 8008078:	00000000 	.word	0x00000000
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	3fe00000 	.word	0x3fe00000
 8008084:	3fd33332 	.word	0x3fd33332
 8008088:	3ff00000 	.word	0x3ff00000
 800808c:	3fe90000 	.word	0x3fe90000
 8008090:	3fd20000 	.word	0x3fd20000
 8008094:	00000000 	.word	0x00000000

08008098 <__kernel_rem_pio2>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	ed2d 8b02 	vpush	{d8}
 80080a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80080a4:	f112 0f14 	cmn.w	r2, #20
 80080a8:	9308      	str	r3, [sp, #32]
 80080aa:	9101      	str	r1, [sp, #4]
 80080ac:	4bc4      	ldr	r3, [pc, #784]	; (80083c0 <__kernel_rem_pio2+0x328>)
 80080ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80080b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80080b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	9b08      	ldr	r3, [sp, #32]
 80080ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80080be:	bfa8      	it	ge
 80080c0:	1ed4      	subge	r4, r2, #3
 80080c2:	9306      	str	r3, [sp, #24]
 80080c4:	bfb2      	itee	lt
 80080c6:	2400      	movlt	r4, #0
 80080c8:	2318      	movge	r3, #24
 80080ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80080ce:	f06f 0317 	mvn.w	r3, #23
 80080d2:	fb04 3303 	mla	r3, r4, r3, r3
 80080d6:	eb03 0a02 	add.w	sl, r3, r2
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	9a06      	ldr	r2, [sp, #24]
 80080de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80083b0 <__kernel_rem_pio2+0x318>
 80080e2:	eb03 0802 	add.w	r8, r3, r2
 80080e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80080e8:	1aa7      	subs	r7, r4, r2
 80080ea:	ae22      	add	r6, sp, #136	; 0x88
 80080ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80080f0:	2500      	movs	r5, #0
 80080f2:	4545      	cmp	r5, r8
 80080f4:	dd13      	ble.n	800811e <__kernel_rem_pio2+0x86>
 80080f6:	9b08      	ldr	r3, [sp, #32]
 80080f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80083b0 <__kernel_rem_pio2+0x318>
 80080fc:	aa22      	add	r2, sp, #136	; 0x88
 80080fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008102:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008106:	f04f 0800 	mov.w	r8, #0
 800810a:	9b02      	ldr	r3, [sp, #8]
 800810c:	4598      	cmp	r8, r3
 800810e:	dc2f      	bgt.n	8008170 <__kernel_rem_pio2+0xd8>
 8008110:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008114:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008118:	462f      	mov	r7, r5
 800811a:	2600      	movs	r6, #0
 800811c:	e01b      	b.n	8008156 <__kernel_rem_pio2+0xbe>
 800811e:	42ef      	cmn	r7, r5
 8008120:	d407      	bmi.n	8008132 <__kernel_rem_pio2+0x9a>
 8008122:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008126:	f7f8 f9a1 	bl	800046c <__aeabi_i2d>
 800812a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800812e:	3501      	adds	r5, #1
 8008130:	e7df      	b.n	80080f2 <__kernel_rem_pio2+0x5a>
 8008132:	ec51 0b18 	vmov	r0, r1, d8
 8008136:	e7f8      	b.n	800812a <__kernel_rem_pio2+0x92>
 8008138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800813c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008140:	f7f8 f9fe 	bl	8000540 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800814c:	f7f8 f842 	bl	80001d4 <__adddf3>
 8008150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008154:	3601      	adds	r6, #1
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	429e      	cmp	r6, r3
 800815a:	f1a7 0708 	sub.w	r7, r7, #8
 800815e:	ddeb      	ble.n	8008138 <__kernel_rem_pio2+0xa0>
 8008160:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008164:	f108 0801 	add.w	r8, r8, #1
 8008168:	ecab 7b02 	vstmia	fp!, {d7}
 800816c:	3508      	adds	r5, #8
 800816e:	e7cc      	b.n	800810a <__kernel_rem_pio2+0x72>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	aa0e      	add	r2, sp, #56	; 0x38
 8008174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008178:	930d      	str	r3, [sp, #52]	; 0x34
 800817a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800817c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008180:	9c02      	ldr	r4, [sp, #8]
 8008182:	930c      	str	r3, [sp, #48]	; 0x30
 8008184:	00e3      	lsls	r3, r4, #3
 8008186:	930a      	str	r3, [sp, #40]	; 0x28
 8008188:	ab9a      	add	r3, sp, #616	; 0x268
 800818a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800818e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008192:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008196:	ab72      	add	r3, sp, #456	; 0x1c8
 8008198:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800819c:	46c3      	mov	fp, r8
 800819e:	46a1      	mov	r9, r4
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	f1a5 0508 	sub.w	r5, r5, #8
 80081a8:	dc77      	bgt.n	800829a <__kernel_rem_pio2+0x202>
 80081aa:	ec47 6b10 	vmov	d0, r6, r7
 80081ae:	4650      	mov	r0, sl
 80081b0:	f000 fc46 	bl	8008a40 <scalbn>
 80081b4:	ec57 6b10 	vmov	r6, r7, d0
 80081b8:	2200      	movs	r2, #0
 80081ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80081be:	ee10 0a10 	vmov	r0, s0
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 f9bc 	bl	8000540 <__aeabi_dmul>
 80081c8:	ec41 0b10 	vmov	d0, r0, r1
 80081cc:	f000 fbb8 	bl	8008940 <floor>
 80081d0:	4b7c      	ldr	r3, [pc, #496]	; (80083c4 <__kernel_rem_pio2+0x32c>)
 80081d2:	ec51 0b10 	vmov	r0, r1, d0
 80081d6:	2200      	movs	r2, #0
 80081d8:	f7f8 f9b2 	bl	8000540 <__aeabi_dmul>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f7 fff4 	bl	80001d0 <__aeabi_dsub>
 80081e8:	460f      	mov	r7, r1
 80081ea:	4606      	mov	r6, r0
 80081ec:	f7f8 fc42 	bl	8000a74 <__aeabi_d2iz>
 80081f0:	9004      	str	r0, [sp, #16]
 80081f2:	f7f8 f93b 	bl	800046c <__aeabi_i2d>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f7 ffe7 	bl	80001d0 <__aeabi_dsub>
 8008202:	f1ba 0f00 	cmp.w	sl, #0
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	dd6d      	ble.n	80082e8 <__kernel_rem_pio2+0x250>
 800820c:	1e62      	subs	r2, r4, #1
 800820e:	ab0e      	add	r3, sp, #56	; 0x38
 8008210:	9d04      	ldr	r5, [sp, #16]
 8008212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008216:	f1ca 0118 	rsb	r1, sl, #24
 800821a:	fa40 f301 	asr.w	r3, r0, r1
 800821e:	441d      	add	r5, r3
 8008220:	408b      	lsls	r3, r1
 8008222:	1ac0      	subs	r0, r0, r3
 8008224:	ab0e      	add	r3, sp, #56	; 0x38
 8008226:	9504      	str	r5, [sp, #16]
 8008228:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800822c:	f1ca 0317 	rsb	r3, sl, #23
 8008230:	fa40 fb03 	asr.w	fp, r0, r3
 8008234:	f1bb 0f00 	cmp.w	fp, #0
 8008238:	dd65      	ble.n	8008306 <__kernel_rem_pio2+0x26e>
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	2200      	movs	r2, #0
 800823e:	3301      	adds	r3, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	4615      	mov	r5, r2
 8008244:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008248:	4294      	cmp	r4, r2
 800824a:	f300 809c 	bgt.w	8008386 <__kernel_rem_pio2+0x2ee>
 800824e:	f1ba 0f00 	cmp.w	sl, #0
 8008252:	dd07      	ble.n	8008264 <__kernel_rem_pio2+0x1cc>
 8008254:	f1ba 0f01 	cmp.w	sl, #1
 8008258:	f000 80c0 	beq.w	80083dc <__kernel_rem_pio2+0x344>
 800825c:	f1ba 0f02 	cmp.w	sl, #2
 8008260:	f000 80c6 	beq.w	80083f0 <__kernel_rem_pio2+0x358>
 8008264:	f1bb 0f02 	cmp.w	fp, #2
 8008268:	d14d      	bne.n	8008306 <__kernel_rem_pio2+0x26e>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	4956      	ldr	r1, [pc, #344]	; (80083c8 <__kernel_rem_pio2+0x330>)
 8008270:	2000      	movs	r0, #0
 8008272:	f7f7 ffad 	bl	80001d0 <__aeabi_dsub>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	2d00      	cmp	r5, #0
 800827c:	d043      	beq.n	8008306 <__kernel_rem_pio2+0x26e>
 800827e:	4650      	mov	r0, sl
 8008280:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80083b8 <__kernel_rem_pio2+0x320>
 8008284:	f000 fbdc 	bl	8008a40 <scalbn>
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	ec53 2b10 	vmov	r2, r3, d0
 8008290:	f7f7 ff9e 	bl	80001d0 <__aeabi_dsub>
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	e035      	b.n	8008306 <__kernel_rem_pio2+0x26e>
 800829a:	4b4c      	ldr	r3, [pc, #304]	; (80083cc <__kernel_rem_pio2+0x334>)
 800829c:	2200      	movs	r2, #0
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 f94d 	bl	8000540 <__aeabi_dmul>
 80082a6:	f7f8 fbe5 	bl	8000a74 <__aeabi_d2iz>
 80082aa:	f7f8 f8df 	bl	800046c <__aeabi_i2d>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	ec43 2b18 	vmov	d8, r2, r3
 80082b6:	4b46      	ldr	r3, [pc, #280]	; (80083d0 <__kernel_rem_pio2+0x338>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f941 	bl	8000540 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f7 ff83 	bl	80001d0 <__aeabi_dsub>
 80082ca:	f7f8 fbd3 	bl	8000a74 <__aeabi_d2iz>
 80082ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082d2:	f84b 0b04 	str.w	r0, [fp], #4
 80082d6:	ec51 0b18 	vmov	r0, r1, d8
 80082da:	f7f7 ff7b 	bl	80001d4 <__adddf3>
 80082de:	f109 39ff 	add.w	r9, r9, #4294967295
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	e75b      	b.n	80081a0 <__kernel_rem_pio2+0x108>
 80082e8:	d106      	bne.n	80082f8 <__kernel_rem_pio2+0x260>
 80082ea:	1e63      	subs	r3, r4, #1
 80082ec:	aa0e      	add	r2, sp, #56	; 0x38
 80082ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80082f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80082f6:	e79d      	b.n	8008234 <__kernel_rem_pio2+0x19c>
 80082f8:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <__kernel_rem_pio2+0x33c>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	f7f8 fba6 	bl	8000a4c <__aeabi_dcmpge>
 8008300:	2800      	cmp	r0, #0
 8008302:	d13d      	bne.n	8008380 <__kernel_rem_pio2+0x2e8>
 8008304:	4683      	mov	fp, r0
 8008306:	2200      	movs	r2, #0
 8008308:	2300      	movs	r3, #0
 800830a:	4630      	mov	r0, r6
 800830c:	4639      	mov	r1, r7
 800830e:	f7f8 fb7f 	bl	8000a10 <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	f000 80c0 	beq.w	8008498 <__kernel_rem_pio2+0x400>
 8008318:	1e65      	subs	r5, r4, #1
 800831a:	462b      	mov	r3, r5
 800831c:	2200      	movs	r2, #0
 800831e:	9902      	ldr	r1, [sp, #8]
 8008320:	428b      	cmp	r3, r1
 8008322:	da6c      	bge.n	80083fe <__kernel_rem_pio2+0x366>
 8008324:	2a00      	cmp	r2, #0
 8008326:	f000 8089 	beq.w	800843c <__kernel_rem_pio2+0x3a4>
 800832a:	ab0e      	add	r3, sp, #56	; 0x38
 800832c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008330:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80ad 	beq.w	8008494 <__kernel_rem_pio2+0x3fc>
 800833a:	4650      	mov	r0, sl
 800833c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80083b8 <__kernel_rem_pio2+0x320>
 8008340:	f000 fb7e 	bl	8008a40 <scalbn>
 8008344:	ab9a      	add	r3, sp, #616	; 0x268
 8008346:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800834a:	ec57 6b10 	vmov	r6, r7, d0
 800834e:	00ec      	lsls	r4, r5, #3
 8008350:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008354:	46aa      	mov	sl, r5
 8008356:	f1ba 0f00 	cmp.w	sl, #0
 800835a:	f280 80d6 	bge.w	800850a <__kernel_rem_pio2+0x472>
 800835e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80083b0 <__kernel_rem_pio2+0x318>
 8008362:	462e      	mov	r6, r5
 8008364:	2e00      	cmp	r6, #0
 8008366:	f2c0 8104 	blt.w	8008572 <__kernel_rem_pio2+0x4da>
 800836a:	ab72      	add	r3, sp, #456	; 0x1c8
 800836c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008370:	f8df a064 	ldr.w	sl, [pc, #100]	; 80083d8 <__kernel_rem_pio2+0x340>
 8008374:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008378:	f04f 0800 	mov.w	r8, #0
 800837c:	1baf      	subs	r7, r5, r6
 800837e:	e0ea      	b.n	8008556 <__kernel_rem_pio2+0x4be>
 8008380:	f04f 0b02 	mov.w	fp, #2
 8008384:	e759      	b.n	800823a <__kernel_rem_pio2+0x1a2>
 8008386:	f8d8 3000 	ldr.w	r3, [r8]
 800838a:	b955      	cbnz	r5, 80083a2 <__kernel_rem_pio2+0x30a>
 800838c:	b123      	cbz	r3, 8008398 <__kernel_rem_pio2+0x300>
 800838e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008392:	f8c8 3000 	str.w	r3, [r8]
 8008396:	2301      	movs	r3, #1
 8008398:	3201      	adds	r2, #1
 800839a:	f108 0804 	add.w	r8, r8, #4
 800839e:	461d      	mov	r5, r3
 80083a0:	e752      	b.n	8008248 <__kernel_rem_pio2+0x1b0>
 80083a2:	1acb      	subs	r3, r1, r3
 80083a4:	f8c8 3000 	str.w	r3, [r8]
 80083a8:	462b      	mov	r3, r5
 80083aa:	e7f5      	b.n	8008398 <__kernel_rem_pio2+0x300>
 80083ac:	f3af 8000 	nop.w
	...
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	08008e28 	.word	0x08008e28
 80083c4:	40200000 	.word	0x40200000
 80083c8:	3ff00000 	.word	0x3ff00000
 80083cc:	3e700000 	.word	0x3e700000
 80083d0:	41700000 	.word	0x41700000
 80083d4:	3fe00000 	.word	0x3fe00000
 80083d8:	08008de8 	.word	0x08008de8
 80083dc:	1e62      	subs	r2, r4, #1
 80083de:	ab0e      	add	r3, sp, #56	; 0x38
 80083e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80083e8:	a90e      	add	r1, sp, #56	; 0x38
 80083ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80083ee:	e739      	b.n	8008264 <__kernel_rem_pio2+0x1cc>
 80083f0:	1e62      	subs	r2, r4, #1
 80083f2:	ab0e      	add	r3, sp, #56	; 0x38
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80083fc:	e7f4      	b.n	80083e8 <__kernel_rem_pio2+0x350>
 80083fe:	a90e      	add	r1, sp, #56	; 0x38
 8008400:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008404:	3b01      	subs	r3, #1
 8008406:	430a      	orrs	r2, r1
 8008408:	e789      	b.n	800831e <__kernel_rem_pio2+0x286>
 800840a:	3301      	adds	r3, #1
 800840c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008410:	2900      	cmp	r1, #0
 8008412:	d0fa      	beq.n	800840a <__kernel_rem_pio2+0x372>
 8008414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008416:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800841a:	446a      	add	r2, sp
 800841c:	3a98      	subs	r2, #152	; 0x98
 800841e:	920a      	str	r2, [sp, #40]	; 0x28
 8008420:	9a08      	ldr	r2, [sp, #32]
 8008422:	18e3      	adds	r3, r4, r3
 8008424:	18a5      	adds	r5, r4, r2
 8008426:	aa22      	add	r2, sp, #136	; 0x88
 8008428:	f104 0801 	add.w	r8, r4, #1
 800842c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	4543      	cmp	r3, r8
 8008436:	da04      	bge.n	8008442 <__kernel_rem_pio2+0x3aa>
 8008438:	461c      	mov	r4, r3
 800843a:	e6a3      	b.n	8008184 <__kernel_rem_pio2+0xec>
 800843c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843e:	2301      	movs	r3, #1
 8008440:	e7e4      	b.n	800840c <__kernel_rem_pio2+0x374>
 8008442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008444:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008448:	f7f8 f810 	bl	800046c <__aeabi_i2d>
 800844c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008452:	46ab      	mov	fp, r5
 8008454:	461c      	mov	r4, r3
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	2600      	movs	r6, #0
 800845c:	2700      	movs	r7, #0
 800845e:	9b06      	ldr	r3, [sp, #24]
 8008460:	4599      	cmp	r9, r3
 8008462:	dd06      	ble.n	8008472 <__kernel_rem_pio2+0x3da>
 8008464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008466:	e8e3 6702 	strd	r6, r7, [r3], #8
 800846a:	f108 0801 	add.w	r8, r8, #1
 800846e:	930a      	str	r3, [sp, #40]	; 0x28
 8008470:	e7df      	b.n	8008432 <__kernel_rem_pio2+0x39a>
 8008472:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008476:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800847a:	f7f8 f861 	bl	8000540 <__aeabi_dmul>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f7 fea5 	bl	80001d4 <__adddf3>
 800848a:	f109 0901 	add.w	r9, r9, #1
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	e7e4      	b.n	800845e <__kernel_rem_pio2+0x3c6>
 8008494:	3d01      	subs	r5, #1
 8008496:	e748      	b.n	800832a <__kernel_rem_pio2+0x292>
 8008498:	ec47 6b10 	vmov	d0, r6, r7
 800849c:	f1ca 0000 	rsb	r0, sl, #0
 80084a0:	f000 face 	bl	8008a40 <scalbn>
 80084a4:	ec57 6b10 	vmov	r6, r7, d0
 80084a8:	4ba0      	ldr	r3, [pc, #640]	; (800872c <__kernel_rem_pio2+0x694>)
 80084aa:	ee10 0a10 	vmov	r0, s0
 80084ae:	2200      	movs	r2, #0
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 facb 	bl	8000a4c <__aeabi_dcmpge>
 80084b6:	b1f8      	cbz	r0, 80084f8 <__kernel_rem_pio2+0x460>
 80084b8:	4b9d      	ldr	r3, [pc, #628]	; (8008730 <__kernel_rem_pio2+0x698>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 f83e 	bl	8000540 <__aeabi_dmul>
 80084c4:	f7f8 fad6 	bl	8000a74 <__aeabi_d2iz>
 80084c8:	4680      	mov	r8, r0
 80084ca:	f7f7 ffcf 	bl	800046c <__aeabi_i2d>
 80084ce:	4b97      	ldr	r3, [pc, #604]	; (800872c <__kernel_rem_pio2+0x694>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	f7f8 f835 	bl	8000540 <__aeabi_dmul>
 80084d6:	460b      	mov	r3, r1
 80084d8:	4602      	mov	r2, r0
 80084da:	4639      	mov	r1, r7
 80084dc:	4630      	mov	r0, r6
 80084de:	f7f7 fe77 	bl	80001d0 <__aeabi_dsub>
 80084e2:	f7f8 fac7 	bl	8000a74 <__aeabi_d2iz>
 80084e6:	1c65      	adds	r5, r4, #1
 80084e8:	ab0e      	add	r3, sp, #56	; 0x38
 80084ea:	f10a 0a18 	add.w	sl, sl, #24
 80084ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80084f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80084f6:	e720      	b.n	800833a <__kernel_rem_pio2+0x2a2>
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 faba 	bl	8000a74 <__aeabi_d2iz>
 8008500:	ab0e      	add	r3, sp, #56	; 0x38
 8008502:	4625      	mov	r5, r4
 8008504:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008508:	e717      	b.n	800833a <__kernel_rem_pio2+0x2a2>
 800850a:	ab0e      	add	r3, sp, #56	; 0x38
 800850c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008510:	f7f7 ffac 	bl	800046c <__aeabi_i2d>
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	f7f8 f812 	bl	8000540 <__aeabi_dmul>
 800851c:	4b84      	ldr	r3, [pc, #528]	; (8008730 <__kernel_rem_pio2+0x698>)
 800851e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008522:	2200      	movs	r2, #0
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f8 f80a 	bl	8000540 <__aeabi_dmul>
 800852c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008530:	4606      	mov	r6, r0
 8008532:	460f      	mov	r7, r1
 8008534:	e70f      	b.n	8008356 <__kernel_rem_pio2+0x2be>
 8008536:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800853a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800853e:	f7f7 ffff 	bl	8000540 <__aeabi_dmul>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854a:	f7f7 fe43 	bl	80001d4 <__adddf3>
 800854e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008552:	f108 0801 	add.w	r8, r8, #1
 8008556:	9b02      	ldr	r3, [sp, #8]
 8008558:	4598      	cmp	r8, r3
 800855a:	dc01      	bgt.n	8008560 <__kernel_rem_pio2+0x4c8>
 800855c:	45b8      	cmp	r8, r7
 800855e:	ddea      	ble.n	8008536 <__kernel_rem_pio2+0x49e>
 8008560:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008564:	ab4a      	add	r3, sp, #296	; 0x128
 8008566:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800856a:	ed87 7b00 	vstr	d7, [r7]
 800856e:	3e01      	subs	r6, #1
 8008570:	e6f8      	b.n	8008364 <__kernel_rem_pio2+0x2cc>
 8008572:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008574:	2b02      	cmp	r3, #2
 8008576:	dc0b      	bgt.n	8008590 <__kernel_rem_pio2+0x4f8>
 8008578:	2b00      	cmp	r3, #0
 800857a:	dc35      	bgt.n	80085e8 <__kernel_rem_pio2+0x550>
 800857c:	d059      	beq.n	8008632 <__kernel_rem_pio2+0x59a>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	f003 0007 	and.w	r0, r3, #7
 8008584:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008588:	ecbd 8b02 	vpop	{d8}
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008592:	2b03      	cmp	r3, #3
 8008594:	d1f3      	bne.n	800857e <__kernel_rem_pio2+0x4e6>
 8008596:	ab4a      	add	r3, sp, #296	; 0x128
 8008598:	4423      	add	r3, r4
 800859a:	9306      	str	r3, [sp, #24]
 800859c:	461c      	mov	r4, r3
 800859e:	469a      	mov	sl, r3
 80085a0:	9502      	str	r5, [sp, #8]
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80085aa:	dc6b      	bgt.n	8008684 <__kernel_rem_pio2+0x5ec>
 80085ac:	46aa      	mov	sl, r5
 80085ae:	f1ba 0f01 	cmp.w	sl, #1
 80085b2:	f1a4 0408 	sub.w	r4, r4, #8
 80085b6:	f300 8085 	bgt.w	80086c4 <__kernel_rem_pio2+0x62c>
 80085ba:	9c06      	ldr	r4, [sp, #24]
 80085bc:	2000      	movs	r0, #0
 80085be:	3408      	adds	r4, #8
 80085c0:	2100      	movs	r1, #0
 80085c2:	2d01      	cmp	r5, #1
 80085c4:	f300 809d 	bgt.w	8008702 <__kernel_rem_pio2+0x66a>
 80085c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80085cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80085d0:	f1bb 0f00 	cmp.w	fp, #0
 80085d4:	f040 809b 	bne.w	800870e <__kernel_rem_pio2+0x676>
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	e9c3 5600 	strd	r5, r6, [r3]
 80085de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80085e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80085e6:	e7ca      	b.n	800857e <__kernel_rem_pio2+0x4e6>
 80085e8:	3408      	adds	r4, #8
 80085ea:	ab4a      	add	r3, sp, #296	; 0x128
 80085ec:	441c      	add	r4, r3
 80085ee:	462e      	mov	r6, r5
 80085f0:	2000      	movs	r0, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	da36      	bge.n	8008666 <__kernel_rem_pio2+0x5ce>
 80085f8:	f1bb 0f00 	cmp.w	fp, #0
 80085fc:	d039      	beq.n	8008672 <__kernel_rem_pio2+0x5da>
 80085fe:	4602      	mov	r2, r0
 8008600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008604:	9c01      	ldr	r4, [sp, #4]
 8008606:	e9c4 2300 	strd	r2, r3, [r4]
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008612:	f7f7 fddd 	bl	80001d0 <__aeabi_dsub>
 8008616:	ae4c      	add	r6, sp, #304	; 0x130
 8008618:	2401      	movs	r4, #1
 800861a:	42a5      	cmp	r5, r4
 800861c:	da2c      	bge.n	8008678 <__kernel_rem_pio2+0x5e0>
 800861e:	f1bb 0f00 	cmp.w	fp, #0
 8008622:	d002      	beq.n	800862a <__kernel_rem_pio2+0x592>
 8008624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008628:	4619      	mov	r1, r3
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008630:	e7a5      	b.n	800857e <__kernel_rem_pio2+0x4e6>
 8008632:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008636:	eb0d 0403 	add.w	r4, sp, r3
 800863a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800863e:	2000      	movs	r0, #0
 8008640:	2100      	movs	r1, #0
 8008642:	2d00      	cmp	r5, #0
 8008644:	da09      	bge.n	800865a <__kernel_rem_pio2+0x5c2>
 8008646:	f1bb 0f00 	cmp.w	fp, #0
 800864a:	d002      	beq.n	8008652 <__kernel_rem_pio2+0x5ba>
 800864c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008650:	4619      	mov	r1, r3
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	e9c3 0100 	strd	r0, r1, [r3]
 8008658:	e791      	b.n	800857e <__kernel_rem_pio2+0x4e6>
 800865a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800865e:	f7f7 fdb9 	bl	80001d4 <__adddf3>
 8008662:	3d01      	subs	r5, #1
 8008664:	e7ed      	b.n	8008642 <__kernel_rem_pio2+0x5aa>
 8008666:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800866a:	f7f7 fdb3 	bl	80001d4 <__adddf3>
 800866e:	3e01      	subs	r6, #1
 8008670:	e7c0      	b.n	80085f4 <__kernel_rem_pio2+0x55c>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	e7c5      	b.n	8008604 <__kernel_rem_pio2+0x56c>
 8008678:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800867c:	f7f7 fdaa 	bl	80001d4 <__adddf3>
 8008680:	3401      	adds	r4, #1
 8008682:	e7ca      	b.n	800861a <__kernel_rem_pio2+0x582>
 8008684:	e9da 8900 	ldrd	r8, r9, [sl]
 8008688:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800868c:	9b02      	ldr	r3, [sp, #8]
 800868e:	3b01      	subs	r3, #1
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f7 fd9b 	bl	80001d4 <__adddf3>
 800869e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f7 fd91 	bl	80001d0 <__aeabi_dsub>
 80086ae:	4632      	mov	r2, r6
 80086b0:	463b      	mov	r3, r7
 80086b2:	f7f7 fd8f 	bl	80001d4 <__adddf3>
 80086b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80086ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086be:	ed8a 7b00 	vstr	d7, [sl]
 80086c2:	e76e      	b.n	80085a2 <__kernel_rem_pio2+0x50a>
 80086c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80086c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80086cc:	4640      	mov	r0, r8
 80086ce:	4632      	mov	r2, r6
 80086d0:	463b      	mov	r3, r7
 80086d2:	4649      	mov	r1, r9
 80086d4:	f7f7 fd7e 	bl	80001d4 <__adddf3>
 80086d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f7 fd74 	bl	80001d0 <__aeabi_dsub>
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	f7f7 fd72 	bl	80001d4 <__adddf3>
 80086f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086f8:	ed84 7b00 	vstr	d7, [r4]
 80086fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008700:	e755      	b.n	80085ae <__kernel_rem_pio2+0x516>
 8008702:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008706:	f7f7 fd65 	bl	80001d4 <__adddf3>
 800870a:	3d01      	subs	r5, #1
 800870c:	e759      	b.n	80085c2 <__kernel_rem_pio2+0x52a>
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	9a01      	ldr	r2, [sp, #4]
 8008712:	601d      	str	r5, [r3, #0]
 8008714:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008718:	605c      	str	r4, [r3, #4]
 800871a:	609f      	str	r7, [r3, #8]
 800871c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008720:	60d3      	str	r3, [r2, #12]
 8008722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008726:	6110      	str	r0, [r2, #16]
 8008728:	6153      	str	r3, [r2, #20]
 800872a:	e728      	b.n	800857e <__kernel_rem_pio2+0x4e6>
 800872c:	41700000 	.word	0x41700000
 8008730:	3e700000 	.word	0x3e700000
 8008734:	00000000 	.word	0x00000000

08008738 <__kernel_sin>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	ed2d 8b04 	vpush	{d8-d9}
 8008740:	eeb0 8a41 	vmov.f32	s16, s2
 8008744:	eef0 8a61 	vmov.f32	s17, s3
 8008748:	ec55 4b10 	vmov	r4, r5, d0
 800874c:	b083      	sub	sp, #12
 800874e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008752:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008756:	9001      	str	r0, [sp, #4]
 8008758:	da06      	bge.n	8008768 <__kernel_sin+0x30>
 800875a:	ee10 0a10 	vmov	r0, s0
 800875e:	4629      	mov	r1, r5
 8008760:	f7f8 f988 	bl	8000a74 <__aeabi_d2iz>
 8008764:	2800      	cmp	r0, #0
 8008766:	d051      	beq.n	800880c <__kernel_sin+0xd4>
 8008768:	4622      	mov	r2, r4
 800876a:	462b      	mov	r3, r5
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f7 fee6 	bl	8000540 <__aeabi_dmul>
 8008774:	4682      	mov	sl, r0
 8008776:	468b      	mov	fp, r1
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f7 fede 	bl	8000540 <__aeabi_dmul>
 8008784:	a341      	add	r3, pc, #260	; (adr r3, 800888c <__kernel_sin+0x154>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	4680      	mov	r8, r0
 800878c:	4689      	mov	r9, r1
 800878e:	4650      	mov	r0, sl
 8008790:	4659      	mov	r1, fp
 8008792:	f7f7 fed5 	bl	8000540 <__aeabi_dmul>
 8008796:	a33f      	add	r3, pc, #252	; (adr r3, 8008894 <__kernel_sin+0x15c>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f7f7 fd18 	bl	80001d0 <__aeabi_dsub>
 80087a0:	4652      	mov	r2, sl
 80087a2:	465b      	mov	r3, fp
 80087a4:	f7f7 fecc 	bl	8000540 <__aeabi_dmul>
 80087a8:	a33c      	add	r3, pc, #240	; (adr r3, 800889c <__kernel_sin+0x164>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fd11 	bl	80001d4 <__adddf3>
 80087b2:	4652      	mov	r2, sl
 80087b4:	465b      	mov	r3, fp
 80087b6:	f7f7 fec3 	bl	8000540 <__aeabi_dmul>
 80087ba:	a33a      	add	r3, pc, #232	; (adr r3, 80088a4 <__kernel_sin+0x16c>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 fd06 	bl	80001d0 <__aeabi_dsub>
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	f7f7 feba 	bl	8000540 <__aeabi_dmul>
 80087cc:	a337      	add	r3, pc, #220	; (adr r3, 80088ac <__kernel_sin+0x174>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f7 fcff 	bl	80001d4 <__adddf3>
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	4606      	mov	r6, r0
 80087da:	460f      	mov	r7, r1
 80087dc:	b9eb      	cbnz	r3, 800881a <__kernel_sin+0xe2>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4650      	mov	r0, sl
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 feab 	bl	8000540 <__aeabi_dmul>
 80087ea:	a325      	add	r3, pc, #148	; (adr r3, 8008880 <__kernel_sin+0x148>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 fcee 	bl	80001d0 <__aeabi_dsub>
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	f7f7 fea2 	bl	8000540 <__aeabi_dmul>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4620      	mov	r0, r4
 8008802:	4629      	mov	r1, r5
 8008804:	f7f7 fce6 	bl	80001d4 <__adddf3>
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	ec45 4b10 	vmov	d0, r4, r5
 8008810:	b003      	add	sp, #12
 8008812:	ecbd 8b04 	vpop	{d8-d9}
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <__kernel_sin+0x150>)
 800881c:	ec51 0b18 	vmov	r0, r1, d8
 8008820:	2200      	movs	r2, #0
 8008822:	f7f7 fe8d 	bl	8000540 <__aeabi_dmul>
 8008826:	4632      	mov	r2, r6
 8008828:	ec41 0b19 	vmov	d9, r0, r1
 800882c:	463b      	mov	r3, r7
 800882e:	4640      	mov	r0, r8
 8008830:	4649      	mov	r1, r9
 8008832:	f7f7 fe85 	bl	8000540 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	ec51 0b19 	vmov	r0, r1, d9
 800883e:	f7f7 fcc7 	bl	80001d0 <__aeabi_dsub>
 8008842:	4652      	mov	r2, sl
 8008844:	465b      	mov	r3, fp
 8008846:	f7f7 fe7b 	bl	8000540 <__aeabi_dmul>
 800884a:	ec53 2b18 	vmov	r2, r3, d8
 800884e:	f7f7 fcbf 	bl	80001d0 <__aeabi_dsub>
 8008852:	a30b      	add	r3, pc, #44	; (adr r3, 8008880 <__kernel_sin+0x148>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	4606      	mov	r6, r0
 800885a:	460f      	mov	r7, r1
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f7 fe6e 	bl	8000540 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f7 fcb2 	bl	80001d4 <__adddf3>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f7 fcaa 	bl	80001d0 <__aeabi_dsub>
 800887c:	e7c4      	b.n	8008808 <__kernel_sin+0xd0>
 800887e:	bf00      	nop
 8008880:	55555549 	.word	0x55555549
 8008884:	3fc55555 	.word	0x3fc55555
 8008888:	3fe00000 	.word	0x3fe00000
 800888c:	5acfd57c 	.word	0x5acfd57c
 8008890:	3de5d93a 	.word	0x3de5d93a
 8008894:	8a2b9ceb 	.word	0x8a2b9ceb
 8008898:	3e5ae5e6 	.word	0x3e5ae5e6
 800889c:	57b1fe7d 	.word	0x57b1fe7d
 80088a0:	3ec71de3 	.word	0x3ec71de3
 80088a4:	19c161d5 	.word	0x19c161d5
 80088a8:	3f2a01a0 	.word	0x3f2a01a0
 80088ac:	1110f8a6 	.word	0x1110f8a6
 80088b0:	3f811111 	.word	0x3f811111

080088b4 <with_errno>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	4604      	mov	r4, r0
 80088b8:	460d      	mov	r5, r1
 80088ba:	4616      	mov	r6, r2
 80088bc:	f7fe f93e 	bl	8006b3c <__errno>
 80088c0:	4629      	mov	r1, r5
 80088c2:	6006      	str	r6, [r0, #0]
 80088c4:	4620      	mov	r0, r4
 80088c6:	bd70      	pop	{r4, r5, r6, pc}

080088c8 <xflow>:
 80088c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ca:	4614      	mov	r4, r2
 80088cc:	461d      	mov	r5, r3
 80088ce:	b108      	cbz	r0, 80088d4 <xflow+0xc>
 80088d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088d4:	e9cd 2300 	strd	r2, r3, [sp]
 80088d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 fe2e 	bl	8000540 <__aeabi_dmul>
 80088e4:	2222      	movs	r2, #34	; 0x22
 80088e6:	b003      	add	sp, #12
 80088e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ec:	f7ff bfe2 	b.w	80088b4 <with_errno>

080088f0 <__math_uflow>:
 80088f0:	b508      	push	{r3, lr}
 80088f2:	2200      	movs	r2, #0
 80088f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088f8:	f7ff ffe6 	bl	80088c8 <xflow>
 80088fc:	ec41 0b10 	vmov	d0, r0, r1
 8008900:	bd08      	pop	{r3, pc}

08008902 <__math_oflow>:
 8008902:	b508      	push	{r3, lr}
 8008904:	2200      	movs	r2, #0
 8008906:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800890a:	f7ff ffdd 	bl	80088c8 <xflow>
 800890e:	ec41 0b10 	vmov	d0, r0, r1
 8008912:	bd08      	pop	{r3, pc}

08008914 <fabs>:
 8008914:	ec51 0b10 	vmov	r0, r1, d0
 8008918:	ee10 2a10 	vmov	r2, s0
 800891c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008920:	ec43 2b10 	vmov	d0, r2, r3
 8008924:	4770      	bx	lr

08008926 <finite>:
 8008926:	b082      	sub	sp, #8
 8008928:	ed8d 0b00 	vstr	d0, [sp]
 800892c:	9801      	ldr	r0, [sp, #4]
 800892e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008932:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008936:	0fc0      	lsrs	r0, r0, #31
 8008938:	b002      	add	sp, #8
 800893a:	4770      	bx	lr
 800893c:	0000      	movs	r0, r0
	...

08008940 <floor>:
 8008940:	ec51 0b10 	vmov	r0, r1, d0
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800894c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008950:	2e13      	cmp	r6, #19
 8008952:	ee10 5a10 	vmov	r5, s0
 8008956:	ee10 8a10 	vmov	r8, s0
 800895a:	460c      	mov	r4, r1
 800895c:	dc32      	bgt.n	80089c4 <floor+0x84>
 800895e:	2e00      	cmp	r6, #0
 8008960:	da14      	bge.n	800898c <floor+0x4c>
 8008962:	a333      	add	r3, pc, #204	; (adr r3, 8008a30 <floor+0xf0>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fc34 	bl	80001d4 <__adddf3>
 800896c:	2200      	movs	r2, #0
 800896e:	2300      	movs	r3, #0
 8008970:	f7f8 f876 	bl	8000a60 <__aeabi_dcmpgt>
 8008974:	b138      	cbz	r0, 8008986 <floor+0x46>
 8008976:	2c00      	cmp	r4, #0
 8008978:	da57      	bge.n	8008a2a <floor+0xea>
 800897a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800897e:	431d      	orrs	r5, r3
 8008980:	d001      	beq.n	8008986 <floor+0x46>
 8008982:	4c2d      	ldr	r4, [pc, #180]	; (8008a38 <floor+0xf8>)
 8008984:	2500      	movs	r5, #0
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	e025      	b.n	80089d8 <floor+0x98>
 800898c:	4f2b      	ldr	r7, [pc, #172]	; (8008a3c <floor+0xfc>)
 800898e:	4137      	asrs	r7, r6
 8008990:	ea01 0307 	and.w	r3, r1, r7
 8008994:	4303      	orrs	r3, r0
 8008996:	d01f      	beq.n	80089d8 <floor+0x98>
 8008998:	a325      	add	r3, pc, #148	; (adr r3, 8008a30 <floor+0xf0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc19 	bl	80001d4 <__adddf3>
 80089a2:	2200      	movs	r2, #0
 80089a4:	2300      	movs	r3, #0
 80089a6:	f7f8 f85b 	bl	8000a60 <__aeabi_dcmpgt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d0eb      	beq.n	8008986 <floor+0x46>
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	bfbe      	ittt	lt
 80089b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80089b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80089ba:	19a4      	addlt	r4, r4, r6
 80089bc:	ea24 0407 	bic.w	r4, r4, r7
 80089c0:	2500      	movs	r5, #0
 80089c2:	e7e0      	b.n	8008986 <floor+0x46>
 80089c4:	2e33      	cmp	r6, #51	; 0x33
 80089c6:	dd0b      	ble.n	80089e0 <floor+0xa0>
 80089c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80089cc:	d104      	bne.n	80089d8 <floor+0x98>
 80089ce:	ee10 2a10 	vmov	r2, s0
 80089d2:	460b      	mov	r3, r1
 80089d4:	f7f7 fbfe 	bl	80001d4 <__adddf3>
 80089d8:	ec41 0b10 	vmov	d0, r0, r1
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
 80089e8:	fa23 f707 	lsr.w	r7, r3, r7
 80089ec:	4207      	tst	r7, r0
 80089ee:	d0f3      	beq.n	80089d8 <floor+0x98>
 80089f0:	a30f      	add	r3, pc, #60	; (adr r3, 8008a30 <floor+0xf0>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fbed 	bl	80001d4 <__adddf3>
 80089fa:	2200      	movs	r2, #0
 80089fc:	2300      	movs	r3, #0
 80089fe:	f7f8 f82f 	bl	8000a60 <__aeabi_dcmpgt>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0bf      	beq.n	8008986 <floor+0x46>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	da02      	bge.n	8008a10 <floor+0xd0>
 8008a0a:	2e14      	cmp	r6, #20
 8008a0c:	d103      	bne.n	8008a16 <floor+0xd6>
 8008a0e:	3401      	adds	r4, #1
 8008a10:	ea25 0507 	bic.w	r5, r5, r7
 8008a14:	e7b7      	b.n	8008986 <floor+0x46>
 8008a16:	2301      	movs	r3, #1
 8008a18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008a1c:	fa03 f606 	lsl.w	r6, r3, r6
 8008a20:	4435      	add	r5, r6
 8008a22:	4545      	cmp	r5, r8
 8008a24:	bf38      	it	cc
 8008a26:	18e4      	addcc	r4, r4, r3
 8008a28:	e7f2      	b.n	8008a10 <floor+0xd0>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	462c      	mov	r4, r5
 8008a2e:	e7aa      	b.n	8008986 <floor+0x46>
 8008a30:	8800759c 	.word	0x8800759c
 8008a34:	7e37e43c 	.word	0x7e37e43c
 8008a38:	bff00000 	.word	0xbff00000
 8008a3c:	000fffff 	.word	0x000fffff

08008a40 <scalbn>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	ec55 4b10 	vmov	r4, r5, d0
 8008a46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	b99a      	cbnz	r2, 8008a78 <scalbn+0x38>
 8008a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008a54:	4323      	orrs	r3, r4
 8008a56:	d036      	beq.n	8008ac6 <scalbn+0x86>
 8008a58:	4b39      	ldr	r3, [pc, #228]	; (8008b40 <scalbn+0x100>)
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	ee10 0a10 	vmov	r0, s0
 8008a60:	2200      	movs	r2, #0
 8008a62:	f7f7 fd6d 	bl	8000540 <__aeabi_dmul>
 8008a66:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <scalbn+0x104>)
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	460d      	mov	r5, r1
 8008a6e:	da10      	bge.n	8008a92 <scalbn+0x52>
 8008a70:	a32b      	add	r3, pc, #172	; (adr r3, 8008b20 <scalbn+0xe0>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	e03a      	b.n	8008aee <scalbn+0xae>
 8008a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008a7c:	428a      	cmp	r2, r1
 8008a7e:	d10c      	bne.n	8008a9a <scalbn+0x5a>
 8008a80:	ee10 2a10 	vmov	r2, s0
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fba4 	bl	80001d4 <__adddf3>
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	e019      	b.n	8008ac6 <scalbn+0x86>
 8008a92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a96:	460b      	mov	r3, r1
 8008a98:	3a36      	subs	r2, #54	; 0x36
 8008a9a:	4432      	add	r2, r6
 8008a9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008aa0:	428a      	cmp	r2, r1
 8008aa2:	dd08      	ble.n	8008ab6 <scalbn+0x76>
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	a120      	add	r1, pc, #128	; (adr r1, 8008b28 <scalbn+0xe8>)
 8008aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aac:	da1c      	bge.n	8008ae8 <scalbn+0xa8>
 8008aae:	a120      	add	r1, pc, #128	; (adr r1, 8008b30 <scalbn+0xf0>)
 8008ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ab4:	e018      	b.n	8008ae8 <scalbn+0xa8>
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	dd08      	ble.n	8008acc <scalbn+0x8c>
 8008aba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ac6:	ec45 4b10 	vmov	d0, r4, r5
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008ad0:	da19      	bge.n	8008b06 <scalbn+0xc6>
 8008ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008ad6:	429e      	cmp	r6, r3
 8008ad8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008adc:	dd0a      	ble.n	8008af4 <scalbn+0xb4>
 8008ade:	a112      	add	r1, pc, #72	; (adr r1, 8008b28 <scalbn+0xe8>)
 8008ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e2      	bne.n	8008aae <scalbn+0x6e>
 8008ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8008b28 <scalbn+0xe8>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fd27 	bl	8000540 <__aeabi_dmul>
 8008af2:	e7cb      	b.n	8008a8c <scalbn+0x4c>
 8008af4:	a10a      	add	r1, pc, #40	; (adr r1, 8008b20 <scalbn+0xe0>)
 8008af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0b8      	beq.n	8008a70 <scalbn+0x30>
 8008afe:	a10e      	add	r1, pc, #56	; (adr r1, 8008b38 <scalbn+0xf8>)
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	e7b4      	b.n	8008a70 <scalbn+0x30>
 8008b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b0a:	3236      	adds	r2, #54	; 0x36
 8008b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b14:	4620      	mov	r0, r4
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <scalbn+0x108>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	e7e8      	b.n	8008aee <scalbn+0xae>
 8008b1c:	f3af 8000 	nop.w
 8008b20:	c2f8f359 	.word	0xc2f8f359
 8008b24:	01a56e1f 	.word	0x01a56e1f
 8008b28:	8800759c 	.word	0x8800759c
 8008b2c:	7e37e43c 	.word	0x7e37e43c
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	fe37e43c 	.word	0xfe37e43c
 8008b38:	c2f8f359 	.word	0xc2f8f359
 8008b3c:	81a56e1f 	.word	0x81a56e1f
 8008b40:	43500000 	.word	0x43500000
 8008b44:	ffff3cb0 	.word	0xffff3cb0
 8008b48:	3c900000 	.word	0x3c900000

08008b4c <_init>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr

08008b58 <_fini>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr
